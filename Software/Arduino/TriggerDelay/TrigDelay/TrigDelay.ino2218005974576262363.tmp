/* This hacky crap will produce a pulses that are delayed by ~11-12 useconds
relative to trigger. Each pulse last ~980ns (high time)
with inter-pulse separation of 2052 ns, i.e., slightly longer
than the 2 usec sampling time of 500kHz the 1608GX supports...
This will only work on arduino nano! (Test if used on another board!*/

bool  triggered = false;
const int DELAY_USEC = 0;
const int PIN_DELAY = 12;
const int PIN_OUT = 13;
const int PIN_IN = 2;
const int INTERRUPT = 0;
const int TTL_LENGTH_USEC = 10;
const int INTER_TTL_DELAY_USEC = 200;
 int NUM_TTLS = 15;
const int ON_REP = 5;
const int OFF_REP = 4;
const int OFF_REP2 = 6;
const int DELAY_REP = 12 * 3; // this equals to 12 useconds...
long cnt = 0;
void Pulse()
{
  triggered = true;
}

void setup() {
  pinMode(PIN_OUT, OUTPUT);
  pinMode(PIN_IN,INPUT);
  pinMode(PIN_DELAY, OUTPUT);
  digitalWrite(PIN_OUT,LOW);
  noInterrupts();
 // Serial.begin(115200);
}

#define MAX_BUFFER 128
int buffer_index = 0;
char packetBuffer[MAX_BUFFER]; //buffer to hold incoming packet,

const int CMD_SET_NUM_TTLS = 1;
const int CMD_GET_NUM_TTLS = 2;

byte apply_command()
{
  long tempLong;
  int command = (packetBuffer[0]-'0') * 10 + packetBuffer[1]-'0';
  switch (command) 
  {
        case CMD_SET_NUM_TTLS:
         NUM_TTLS = atol(packetBuffer+3);
        Serial.println("OK! ");
        break;
        case CMD_GET_NUM_TTLS:
        Serial.println("OK! "+String(NUM_TTLS));
        break;

  }
  
}

void fnHandleSerialCommunication() 
{
  if (Serial.available() > 0) {
    // get incoming byte:
    char inByte = Serial.read();
    if (inByte == 10) 
      {  // new line
	  packetBuffer[buffer_index] = 0;
          if (buffer_index > 0)
              apply_command();
              
	  buffer_index = 0;
  	  
	} else {
    	  packetBuffer[buffer_index++] = inByte;
	  if (buffer_index >= MAX_BUFFER-1) {
	    buffer_index = MAX_BUFFER-1;
	  }
      }
  }
}


void loop() {
  //fnHandleSerialCommunication();
  
  if (PIND & B00000100)
  {
      
  for (int x=0;x<DELAY_REP;x++)
        PORTB = B00000000;
 
  // Turn on/off pin 13
  for (int k=0;k< NUM_TTLS;k++)
  {
    for (int x=0;x<ON_REP;x++)
        PORTB = B00100000;
       
    for (int x=0;x<ON_REP;x++)
        PORTB = B00100000;
       
    for (int x=0;x<ON_REP;x++)
        PORTB = B00100000;
        
    for (int x=0;x<OFF_REP;x++)        
        PORTB = B00000000;    
      
    for (int x=0;x<OFF_REP;x++)        
        PORTB = B00000000;    
      
    for (int x=0;x<OFF_REP2;x++)        
        PORTB = B00000000;    
  }  

  // Turn on pin 12 (delayed output)
  PORTB = B00010000;      
  
  while (PIND & B00000100); // wait until trigger is down               
  // turn off delayed trigger
  PORTB = B00000000;
  }
}
