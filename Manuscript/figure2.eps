%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: figure2.pdf
%%Creator: (Adobe Acrobat 18.9.0)
%%For: shayo
%%CreationDate: 12/7/17, 15:38
%%BoundingBox: 0 0 515 525
%%HiResBoundingBox: 0 0 514.5644 524.4361
%%CropBox: 0 0 514.5644 524.4361
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 44666 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   dc:format="application/pdf"
   xmp:MetadataDate="2017-12-07T15:37:54-05:00"
   xmp:ModifyDate="2017-12-07T15:37:54-05:00"
   xmp:CreateDate="2017-12-06T11:09:59-05:00"
   xmp:CreatorTool="Adobe Illustrator CC 2017 (Macintosh)"
   xmpMM:InstanceID="uuid:7c47327d-4de7-aa41-a5a1-5be08defc2e1"
   xmpMM:DocumentID="xmp.did:3204ac5a-889d-40e6-aa40-a0696289a0f5"
   xmpMM:OriginalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Print"
   xmpTPg:HasVisibleOverprint="False"
   xmpTPg:HasVisibleTransparency="True"
   xmpTPg:NPages="1"
   pdf:Producer="Adobe PDF library 15.00"
   pdfx:CreatorVersion="21.0.0">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">figure2</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="252"
      xmpGImg:height="256"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAD8AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7R5l0bzvaXmsajpElpDb&#xA;TXceoR3NJbi7UJp4s3ijt1s7vixZQyyJzNKgoRUFVA+WPLH5mmbS9YuNX9CK+mtNR1zTnCRSu4sL&#xA;e3lQgW3wlnWRpE2GycfTNSFVSw8o/mdp+oQnTrnRrK1a6hk1a8jSSS+1CNXlaZp3kiZQzc14KOlW&#xA;HOlMVVrLy/8AnSl/bC78zWs2moluLkrFCtwzh4numB+qenQgSJH8I+Glfi+IKpfZ+Vfz0NxHd6j5&#xA;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&#xA;pcRpKElSvGRQ4NGWuzDfFUTir//Z"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:eb31604a-c526-47e2-84f0-16f7c6739c37"
    stRef:documentID="xmp.did:eb31604a-c526-47e2-84f0-16f7c6739c37"
    stRef:originalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:926a8ee5-576a-2646-879d-21a5445c64ad"
      stEvt:when="2017-02-03T11:47:42-05:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2017 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:3204ac5a-889d-40e6-aa40-a0696289a0f5"
      stEvt:when="2017-12-06T11:09:58-05:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2017 (Macintosh)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="595.276000"
    stDim:h="841.890000"
    stDim:unit="Points"/>
   <xmpTPg:Fonts>
    <rdf:Bag>
     <rdf:li
      stFnt:fontName="MyriadPro-Regular"
      stFnt:fontFamily="Myriad Pro"
      stFnt:fontFace="Regular"
      stFnt:fontType="Open Type"
      stFnt:versionString="Version 2.106;PS 2.000;hotconv 1.0.70;makeotf.lib2.5.58329"
      stFnt:composite="False"
      stFnt:fontFileName="MyriadPro-Regular.otf"/>
    </rdf:Bag>
   </xmpTPg:Fonts>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Default Swatch Group"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="White"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="Black"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="100.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Red"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Yellow"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Green"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Cyan"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Blue"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Magenta"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=15 M=100 Y=90 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="15.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="90.000000"
         xmpG:black="10.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=90 Y=85 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="90.000000"
         xmpG:yellow="85.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=80 Y=95 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="80.000000"
         xmpG:yellow="95.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=50 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="50.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=35 Y=85 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="35.000000"
         xmpG:yellow="85.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=5 M=0 Y=90 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="5.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="90.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=20 M=0 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="20.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=50 M=0 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=75 M=0 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="75.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=85 M=10 Y=100 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="85.000000"
         xmpG:magenta="10.000000"
         xmpG:yellow="100.000000"
         xmpG:black="10.000000"/>
        <rdf:li
         xmpG:swatchName="C=90 M=30 Y=95 K=30"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="90.000000"
         xmpG:magenta="30.000000"
         xmpG:yellow="95.000000"
         xmpG:black="30.000000"/>
        <rdf:li
         xmpG:swatchName="C=75 M=0 Y=75 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="75.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="75.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=80 M=10 Y=45 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="80.000000"
         xmpG:magenta="10.000000"
         xmpG:yellow="45.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=70 M=15 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="70.000000"
         xmpG:magenta="15.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=85 M=50 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="85.000000"
         xmpG:magenta="50.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=100 M=95 Y=5 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="95.000000"
         xmpG:yellow="5.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=100 M=100 Y=25 K=25"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="25.000000"
         xmpG:black="25.000000"/>
        <rdf:li
         xmpG:swatchName="C=75 M=100 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="75.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=50 M=100 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=35 M=100 Y=35 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="35.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="35.000000"
         xmpG:black="10.000000"/>
        <rdf:li
         xmpG:swatchName="C=10 M=100 Y=50 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="10.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="50.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=95 Y=20 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="95.000000"
         xmpG:yellow="20.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=25 M=25 Y=40 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="25.000000"
         xmpG:magenta="25.000000"
         xmpG:yellow="40.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=40 M=45 Y=50 K=5"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="40.000000"
         xmpG:magenta="45.000000"
         xmpG:yellow="50.000000"
         xmpG:black="5.000000"/>
        <rdf:li
         xmpG:swatchName="C=50 M=50 Y=60 K=25"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="50.000000"
         xmpG:yellow="60.000000"
         xmpG:black="25.000000"/>
        <rdf:li
         xmpG:swatchName="C=55 M=60 Y=65 K=40"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="55.000000"
         xmpG:magenta="60.000000"
         xmpG:yellow="65.000000"
         xmpG:black="40.000000"/>
        <rdf:li
         xmpG:swatchName="C=25 M=40 Y=65 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="25.000000"
         xmpG:magenta="40.000000"
         xmpG:yellow="65.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=30 M=50 Y=75 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="30.000000"
         xmpG:magenta="50.000000"
         xmpG:yellow="75.000000"
         xmpG:black="10.000000"/>
        <rdf:li
         xmpG:swatchName="C=35 M=60 Y=80 K=25"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="35.000000"
         xmpG:magenta="60.000000"
         xmpG:yellow="80.000000"
         xmpG:black="25.000000"/>
        <rdf:li
         xmpG:swatchName="C=40 M=65 Y=90 K=35"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="40.000000"
         xmpG:magenta="65.000000"
         xmpG:yellow="90.000000"
         xmpG:black="35.000000"/>
        <rdf:li
         xmpG:swatchName="C=40 M=70 Y=100 K=50"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="40.000000"
         xmpG:magenta="70.000000"
         xmpG:yellow="100.000000"
         xmpG:black="50.000000"/>
        <rdf:li
         xmpG:swatchName="C=50 M=70 Y=80 K=70"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="70.000000"
         xmpG:yellow="80.000000"
         xmpG:black="70.000000"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Grays"
       xmpG:groupType="1">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=100"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="100.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=90"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="89.999400"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=80"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="79.998800"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=70"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="69.999700"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=60"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="59.999100"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=50"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="50.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=40"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="39.999400"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=30"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="29.998800"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=20"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="19.999700"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="9.999100"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=5"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="4.998800"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Brights"
       xmpG:groupType="1">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="C=0 M=100 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=75 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="75.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=10 Y=95 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="10.000000"
         xmpG:yellow="95.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=85 M=10 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="85.000000"
         xmpG:magenta="10.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=100 M=90 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="90.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=60 M=90 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="60.000000"
         xmpG:magenta="90.000000"
         xmpG:yellow="0.003100"
         xmpG:black="0.003100"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
<<
/Name (All)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 1 1 1 1 ] 
>>
/CSD add_res
/1 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 57 
/Lookup <~
m+MF>l-TJ2jN@N'iPY]riPPWqhSB0lgq<[ffs^q]eZJlPd@pU@bEMu,`.7mg\nM-EY=norW%J&MTb%2(
ScA`jP5l$lM#\=lLB'gEL&bBWK`GujK`En/KE*+pJcLB&I/oT6G6"ZDDudTPB)p6X?i]$`<<2Oh9)np#
8c\\f4TGFA495B]2#mS&/cbnO+9;EA+92?I&HDb4&-2D(#lsSt"Vgq9!\F<N!<<'!!<)ot!;lcr!;-9k
!:9^c!94"Y!7h)L!6+s<!4)V)!1s2j!/LRS!-%r<!*]C&!(?he~>
>>
/CSD add_res
/2 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 63 
/Lookup <~
^TFR!^9+Eo]r\6i]r\3d];qm[\uVaS\Z2RM\Z)IE\#?.:[\oq/[ABY#Z_O4gZD*tZZ(R\MYF_8>Xdki/
XI>JuWgK&gW0WWYVj*<LV3-g>UQ:C1To=k"Sr&4gS;)_ZR=g)KQ@XN=PC7g.OEu0tNHfUfMKEnXL2_)I
Jo#68Iqi^.HY-jsG@G%eF'i;YE*QZNCfjgABN.t4@o-&(?;4/p=@Ym^<'s(S:Hq)E905697Q3:,5r:G!
4YSSj3%QZ^1ajdQ0-hhD.Nfl7,odp*+;l't*#07i)%mS_'Ft`T&I]'J$jd4?#mLS6"Tni,!W`<%!!!!!
~>
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -524.436 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 524.436 li
514.564 524.436 li
514.564 0 li
cp
clp
gsave
0 524.89 mo
515 524.89 li
515 -.110016 li
0 -.110016 li
0 524.89 li
clp
false sop
/1 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
%ADOBeginSubsetFont: FAAAAA+MyriadPro-Regular Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /FAAAAA+MyriadPro-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 1992, 1994, 1997, 2000, 2004 Adobe Systems Incorporated. All rights reserved. Myriad is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 50 /two putdup 51 /three putdup 52 /four putdup 53 /five putdup 55 /seven putdup 109 /m putdup 110 /n putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-12 -0 484 496 650 662 674 686 710 722] def/OtherBlues [-210 -198 -121 -109] def/BlueScale 0.0625 def/BlueFuzz 0 def/StdHW [67] def/StdVW [88] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings9 dict dup begin/space <1C60D8A8C9B896187A> |-/two <1C60D8A8C9B7BA8F694E6FA15FFB6B382A3EE4F45111A59DACA07CBB1A390893C6F8FDC203687F0DAB4019999EF2C31C2A8E2B5C18284C0FA933EB49F0D3AAC406EC417696890BDF0C7AE9B4C23364F4C649F84537FC> |-/three <1C60D8A8C9B7BA8F622456C4A5B0CA9B1BA284AF806928062A6B7B09FB3F0AFA0642F9B368E55CBEC860ACEDE00F619B43869FF145573EE19FF4FA261BF5938247732EEA9C997694C21F3826519E5860C319187A2BE7C4798BE40539D59DC5F8C368613E2EF361E84E1BE9A2B721FABB539C13C42CCE1FC716B22FBB381EE1131CEA0A76D50B43FAFEFB6984253871A40EF8DA774460484F> |-/four <1C60D8A8C9B7BA8F425ECEAC1E8FFE1F2E4A9E9BFE692DFC86F0914D1950B7E9330CFAE2AE0CE50BC8F9A81B99E65C7EB21064416D8548FA09CC9C6588AD65393A47B2EBDED97474D4C03B3488707365B1350A023199FD7F8930> |-/five <1C60D8A8C9B7BA8F622456C498CD57E93AA5454FC364F93ECEC83D3913500E43A82F14121F71966C4788C2353DA5A8BD5D8CFB5314B38B5B35B8DBF6E6B89948F26F660C16062F6C0ACEFA240305DC4EBB618986C70F22D9BDD5EF2FA4DDB132186E4364560E4CE6F0F405A0BF> |-/seven <1C60D8A8C9B7BA8F425ECEA3CCEB01EB08904B1DBA8C9FADA482DD5BD7B85932F4448BE6EA91291DDC2715CACD23> |-/m <1C60D8A8C9B6B770778B71072D7C1E07589A410E5C64818087655066490C3ED2B909917C7BC0728B14D2333B4F2D4E6CDB7289552EC38E07C385447196A6FC80676BB9787067F8DE500C6FC7D1A575A85B3402140944D912F286F0EE619E6F139DB3EF4C05E3E0A0041D31E971FFC094FB694326327D937DFA882F7A9EEBB38D578A289643EC8BA4470A41469EE238EB0C3D041FDB99E682E3290582B0A809> |-/n <1C60D8A8C9B790A816BA887E1EEB5EA22251B57591287932F226429470C6F5104125FD46BD566113711AC75833C9FEE3F6D848EF41B3B29B720FE91D57099036ACB328FF5F27B548C47B09DAAAB22DF7203FD31E4DFCBB6F334EB2AEBC18B95062C1F81D8B> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/GIBHKR+MyriadPro-Regular /FAAAAA+MyriadPro-Regular findfont ct_VMDictPut/GIBHKR+MyriadPro-Regular*1 [32{/.notdef}rp /space 17{/.notdef}rp /two /three /four /five /.notdef /seven 53{/.notdef}rp /m /n 145{/.notdef}rp]GIBHKR+MyriadPro-Regular nfGIBHKR+MyriadPro-Regular*1 [8 0 0 -8 0 0 ]msf19.2344 40.076 mo(473 nm)sh16.8984 96.324 mo(532 nm)sh1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
76.729 59.023 mo
74.479 59.023 li
74.479 43.023 li
76.729 43.023 li
cp
0 0 0 .8 cmyk
@
76.151 84.99 mo
76.151 85.4899 li
73.401 85.4899 li
73.401 68.4901 li
76.6509 68.4901 li
76.6509 85.4899 li
76.151 85.4899 li
76.151 84.99 li
75.6511 84.99 li
75.6511 69.49 li
74.4011 69.49 li
74.4011 84.4901 li
76.151 84.4901 li
76.151 84.99 li
75.6511 84.99 li
76.151 84.99 li
f
gsave
92.9499 59.9911 mo
109.339 59.9911 li
109.339 42.6261 li
92.9499 42.6261 li
92.9499 59.9911 li
clp
94.4124 59.9907 mo
92.9499 58.6264 li
99.1498 51.981 li
100.194 51.981 li
100.196 53.7913 li
94.4124 59.9907 li
102.046 51.8084 mo
102.046 51.7512 li
102.1 51.7509 li
102.046 51.8084 li
103.465 50.2877 mo
101.151 50.2871 li
101.151 50.064 li
100.938 50.064 li
107.877 42.6265 li
109.339 43.9904 li
109.339 43.9912 li
103.465 50.2877 li
0 0 0 .558431 cmyk
f
grestore
gsave
94.1348 84.8989 mo
110.524 84.8989 li
110.524 67.5339 li
94.1348 67.5339 li
94.1348 84.8989 li
clp
95.5975 84.8989 mo
95.5975 84.8989 li
94.135 83.5347 li
109.061 67.5346 li
110.523 68.899 li
95.5975 84.8989 li
0 0 0 .558431 cmyk
f
grestore
100.223 76.99 mo
100.223 76.99 li
100.223 76.9896 li
100.223 75.1547 li
100.221 75.1547 li
100.196 53.7913 li
102.046 51.8084 li
102.073 75.0019 li
100.223 76.99 li
.449412 0 .449412 0 cmyk
f
100.196 53.7913 mo
100.194 51.981 li
101.151 51.981 li
101.151 51.7559 li
102.046 51.7512 li
102.046 51.8084 li
100.196 53.7913 li
.447828 0 .447828 .223914 cmyk
f
154.092 51.9812 mo
154.092 51.4993 li
154.333 51.5008 154.574 51.502 154.815 51.5032 cv
154.82 50.5469 li
154.82 50.5034 li
154.577 50.5023 154.334 50.5011 154.092 50.4996 cv
154.092 50.0642 li
227.604 50.0732 li
227.604 51.7812 li
154.092 51.9812 li
.4 0 0 0 cmyk
f
242.613 37.3995 mo
242.613 62.5645 li
241.613 62.5645 li
241.613 37.3995 li
242.613 37.3995 li
0 0 0 1 cmyk
f
245.082 37.9282 mo
241.613 37.9282 li
@
245.137 37.5186 mo
246.528 38.5043 247.487 40.3897 248.154 42.7015 cv
248.815 45.0165 249.156 47.7753 249.156 50.5272 cv
249.156 53.1195 248.853 55.7032 248.211 57.9023 cv
247.564 60.0977 246.589 61.9286 245.141 62.971 cv
244.56 62.1575 li
245.719 61.337 246.646 59.7024 247.251 57.6215 cv
247.859 55.5443 248.157 53.0409 248.156 50.5272 cv
248.157 47.859 247.822 45.1765 247.193 42.9762 cv
246.571 40.7725 245.628 39.0687 244.564 38.338 cv
245.137 37.5184 li
245.137 37.5186 li
f
245.16 62.5644 mo
241.613 62.5644 li
@
230.954 62.8292 mo
230.954 37.6632 li
231.953 37.6632 li
231.953 62.8292 li
230.954 62.8292 li
f
228.485 62.3003 mo
231.954 62.3003 li
@
228.716 62.3003 mo
223.95 58.9673 223.343 41.5053 228.716 37.6633 cv
@
228.407 37.6636 mo
231.954 37.6636 li
@
237.442 48.539 mo
237.442 37.928 li
@
237.442 63.8281 mo
237.442 53.2172 li
@
232.588 51.7816 mo
231.953 51.7816 li
231.953 50.0737 li
232.588 50.0737 li
236.979 50.9277 li
232.588 51.7816 li
230.954 51.7816 mo
227.604 51.7816 li
227.604 50.0737 li
230.954 50.0737 li
230.954 51.7816 li
.4 0 0 0 cmyk
f
231.953 51.7816 mo
230.954 51.7816 li
230.954 50.0737 li
231.953 50.0737 li
231.953 51.7816 li
.4 0 0 .6 cmyk
f
250.025 57.7084 mo
248.478 56.8815 li
248.938 54.923 249.156 52.7283 249.156 50.5272 cv
249.156 48.1541 248.902 45.776 248.409 43.6816 cv
252.842 40.7314 li
270.067 40.7314 li
283.213 53.7998 li
286.645 57.2316 li
286.62 57.232 li
250.025 57.7084 li
247.564 56.3928 mo
242.613 53.7461 li
242.613 47.5391 li
247.518 44.2745 li
247.937 46.1919 248.157 48.3642 248.156 50.5272 cv
248.157 52.5627 247.962 54.5916 247.564 56.3928 cv
241.613 53.2116 mo
237.441 50.9814 li
241.613 48.2046 li
241.613 53.2116 li
.4 0 0 0 cmyk
f
242.613 53.7461 mo
241.613 53.2116 li
241.613 48.2046 li
242.613 47.5391 li
242.613 53.7461 li
.4 0 0 .6 cmyk
f
248.478 56.8815 mo
247.564 56.3928 li
247.962 54.5916 248.157 52.5627 248.156 50.5272 cv
248.157 48.3642 247.937 46.1919 247.518 44.2745 cv
248.409 43.6816 li
248.902 45.776 249.156 48.1541 249.156 50.5272 cv
249.156 52.7283 248.938 54.923 248.478 56.8815 cv
f
258.202 112.653 mo
284.13 112.758 li
293.57 103.327 li
266.102 102.875 li
258.202 112.653 li
.492 .402 .406 .047 cmyk
f
267.216 101.664 mo
275.111 101.664 li
272.45 104.499 li
264.59 104.499 li
267.216 101.664 li
.684 .395 .176 .004 cmyk
f
272.45 105.033 mo
275.111 102.119 li
275.111 101.664 li
272.45 104.499 li
272.45 105.033 li
.98 .766 .383 .27 cmyk
f
264.59 105.033 mo
272.45 105.033 li
272.45 104.499 li
264.59 104.499 li
264.59 105.033 li
.375 .105 0 0 cmyk
f
258.202 112.653 mo
258.19 114.67 li
284.235 114.754 li
284.235 112.758 li
.363 .313 .293 0 cmyk
f
284.235 112.758 mo
293.569 103.327 li
293.453 105.258 li
284.235 114.754 li
.684 .633 .637 .613 cmyk
f
276.231 101.664 mo
284.126 101.664 li
281.465 104.499 li
273.606 104.499 li
276.231 101.664 li
.684 .395 .176 .004 cmyk
f
281.465 105.033 mo
284.126 102.119 li
284.126 101.664 li
281.465 104.499 li
281.465 105.033 li
.98 .766 .383 .27 cmyk
f
273.605 105.033 mo
281.464 105.033 li
281.464 104.499 li
273.605 104.499 li
273.605 105.033 li
.375 .105 0 0 cmyk
f
285.141 101.87 mo
293.035 101.87 li
290.375 104.705 li
282.516 104.705 li
285.141 101.87 li
.684 .395 .176 .004 cmyk
f
290.375 105.239 mo
293.035 102.324 li
293.035 101.869 li
290.375 104.705 li
cp
.98 .766 .383 .27 cmyk
f
282.515 105.239 mo
290.374 105.239 li
290.374 104.705 li
282.515 104.705 li
282.515 105.239 li
.375 .105 0 0 cmyk
f
264.039 105.272 mo
271.934 105.272 li
269.273 108.108 li
261.414 108.108 li
264.039 105.272 li
.684 .395 .176 .004 cmyk
f
269.273 108.642 mo
271.934 105.727 li
271.934 105.272 li
269.273 108.108 li
269.273 108.642 li
.98 .766 .383 .27 cmyk
f
261.414 108.642 mo
269.273 108.642 li
269.273 108.108 li
261.414 108.108 li
261.414 108.642 li
.375 .105 0 0 cmyk
f
260.954 108.88 mo
268.849 108.88 li
266.188 111.716 li
258.329 111.716 li
cp
.684 .395 .176 .004 cmyk
f
266.188 112.25 mo
268.848 109.335 li
268.848 108.88 li
266.188 111.716 li
cp
.98 .766 .383 .27 cmyk
f
258.328 112.25 mo
266.187 112.25 li
266.187 111.716 li
258.328 111.716 li
cp
.375 .105 0 0 cmyk
f
271.615 106.603 mo
279.384 109.164 li
279.377 108.742 li
271.683 106.143 li
271.615 106.603 li
f
279.377 108.742 mo
282.515 106.762 li
282.456 107.139 li
279.376 109.163 li
279.377 108.742 li
.707 .484 .277 .043 cmyk
f
271.684 106.143 mo
274.913 104.217 li
282.423 106.773 li
279.377 108.742 li
271.684 106.143 li
.863 .633 .309 .121 cmyk
f
271.581 105.971 mo
274.889 103.997 li
282.878 106.716 li
279.404 108.962 li
271.619 106.332 li
271.748 105.953 li
279.349 108.521 li
281.967 106.829 li
274.936 104.436 li
271.786 106.315 li
271.581 105.971 li
.605 .523 .52 .227 cmyk
f
278.785 106.674 mo
286.554 109.235 li
286.547 108.813 li
278.854 106.214 li
278.785 106.674 li
.375 .105 0 0 cmyk
f
286.546 108.813 mo
289.685 106.835 li
289.626 107.211 li
286.545 109.235 li
286.546 108.813 li
.707 .484 .277 .043 cmyk
f
278.854 106.214 mo
282.082 104.288 li
289.593 106.844 li
286.546 108.813 li
278.854 106.214 li
.863 .633 .309 .121 cmyk
f
278.751 106.042 mo
282.059 104.069 li
290.048 106.788 li
286.574 109.034 li
278.789 106.404 li
278.917 106.025 li
286.519 108.593 li
289.137 106.901 li
282.105 104.507 li
278.956 106.386 li
278.751 106.042 li
278.751 106.042 li
.605 .523 .52 .227 cmyk
f
269.815 109.086 mo
277.71 109.086 li
275.049 111.921 li
267.19 111.921 li
cp
.684 .395 .176 .004 cmyk
f
275.049 112.456 mo
277.71 109.542 li
277.71 109.087 li
275.049 111.922 li
cp
.98 .766 .383 .27 cmyk
f
267.19 112.456 mo
275.049 112.456 li
275.049 111.922 li
267.19 111.922 li
cp
.375 .105 0 0 cmyk
f
278.831 109.223 mo
286.726 109.223 li
284.064 112.059 li
276.205 112.059 li
cp
.684 .395 .176 .004 cmyk
f
284.064 112.593 mo
286.725 109.679 li
286.725 109.223 li
284.064 112.059 li
cp
.98 .766 .383 .27 cmyk
f
276.205 112.593 mo
284.064 112.593 li
284.064 112.059 li
276.205 112.059 li
cp
.375 .105 0 0 cmyk
f
gsave
262.963 62.0599 mo
292.889 62.0599 li
292.889 32.135 li
262.963 32.135 li
262.963 62.0599 li
clp
291.475 62.0599 mo
291.474 62.0599 li
286.665 57.2514 li
286.665 57.2312 li
286.666 57.2314 li
283.213 53.7998 li
262.963 33.5494 li
264.377 32.1352 li
292.889 60.6461 li
291.475 62.0599 li
0 0 0 .558431 cmyk
f
286.645 57.2316 mo
283.213 53.7998 li
286.666 57.2314 li
286.665 57.2312 li
286.645 57.2316 li
.122138 0 0 .559262 cmyk
f
grestore
283.938 103.169 mo
283.179 103.156 li
284.126 102.119 li
284.126 101.664 li
282.732 103.149 li
282.732 103.149 li
284.126 101.664 li
276.231 101.664 li
274.974 103.021 li
274.297 103.01 li
275.111 102.119 li
275.111 101.664 li
275.111 101.664 li
268.693 101.664 li
268.913 57.5482 li
286.62 57.232 li
286.645 57.2317 li
286.665 57.2514 li
286.613 86.7014 li
286.587 86.7304 li
286.592 98.3601 li
286.586 101.87 li
285.141 101.87 li
283.938 103.169 li
273.855 103.003 mo
273.855 103.003 li
274.948 101.838 li
273.855 103.003 li
.4 0 0 0 cmyk
f
286.62 57.232 mo
286.645 57.2316 li
286.645 57.2317 li
286.62 57.232 li
.639216 0 0 0 cmyk
f
271.867 105.801 mo
271.934 105.727 li
271.934 105.272 li
271.934 105.272 li
271.934 105.272 li
271.934 105.272 li
268.675 105.272 li
268.676 105.033 li
272.45 105.033 li
272.45 104.499 li
268.679 104.499 li
272.45 104.499 li
273.855 103.003 li
273.855 103.003 li
272.45 104.499 li
272.45 105.033 li
274.297 103.01 li
274.974 103.021 li
273.606 104.499 li
274.048 104.499 li
273.605 104.499 li
273.605 104.764 li
271.867 105.801 li
286.579 105.608 mo
285.496 105.239 li
286.58 105.239 li
286.579 105.608 li
279.531 105.577 mo
277.932 105.033 li
280.443 105.033 li
279.531 105.577 li
286.581 104.705 mo
283.927 104.705 li
283.926 104.705 li
286.581 104.705 li
286.581 104.705 li
282.854 104.34 mo
282.277 104.144 li
283.179 103.156 li
283.938 103.169 li
282.854 104.34 li
281.628 104.325 mo
282.732 103.149 li
282.732 103.149 li
281.628 104.325 li
.694118 .243137 .243137 .027451 cmyk
f
272.45 104.499 mo
268.679 104.499 li
268.693 101.664 li
275.111 101.664 li
275.111 101.664 li
275.111 101.664 li
274.948 101.838 li
273.855 103.003 li
272.45 104.499 li
.807843 .239216 .105882 .00392157 cmyk
f
272.45 105.033 mo
272.45 104.499 li
273.855 103.003 li
274.948 101.838 li
275.111 101.664 li
275.111 102.119 li
274.297 103.01 li
272.45 105.033 li
.988235 .458824 .231373 .160784 cmyk
f
272.45 105.033 mo
268.676 105.033 li
268.679 104.499 li
272.45 104.499 li
272.45 105.033 li
.627451 .0627451 0 0 cmyk
f
281.339 104.499 mo
276.363 104.499 li
274.889 103.997 li
274.048 104.499 li
273.606 104.499 li
274.974 103.021 li
276.231 101.664 li
284.126 101.664 li
282.732 103.149 li
281.628 104.325 li
281.626 104.328 li
281.339 104.499 li
.807843 .239216 .105882 .00392157 cmyk
f
281.626 104.328 mo
281.628 104.325 li
282.732 103.149 li
284.126 101.664 li
284.126 102.119 li
283.179 103.156 li
282.277 104.144 li
282.059 104.069 li
281.626 104.328 li
.988235 .458824 .231373 .160784 cmyk
f
280.443 105.033 mo
277.932 105.033 li
276.363 104.499 li
281.339 104.499 li
280.443 105.033 li
273.605 104.764 mo
273.605 104.499 li
274.048 104.499 li
273.605 104.764 li
.627451 .0627451 0 0 cmyk
f
286.581 104.705 mo
283.926 104.705 li
282.854 104.34 li
283.938 103.169 li
285.141 101.87 li
286.586 101.87 li
286.581 104.705 li
.807843 .239216 .105882 .00392157 cmyk
f
286.58 105.239 mo
285.496 105.239 li
283.927 104.705 li
286.581 104.705 li
286.58 105.239 li
.627451 .0627451 0 0 cmyk
f
268.664 107.464 mo
268.675 105.272 li
271.934 105.272 li
269.923 107.415 li
268.664 107.464 li
271.934 105.272 mo
271.934 105.272 li
271.934 105.272 li
271.934 105.272 li
.807843 .239216 .105882 .00392157 cmyk
f
270.41 107.396 mo
271.632 106.057 li
271.684 106.143 li
271.684 106.143 li
271.683 106.143 li
271.683 106.145 li
271.619 106.332 li
271.653 106.344 li
271.615 106.603 li
273.637 107.269 li
270.41 107.396 li
.694118 .243137 .243137 .027451 cmyk
f
269.923 107.415 mo
271.934 105.272 li
271.934 105.272 li
271.934 105.272 li
271.934 105.272 li
271.934 105.727 li
271.867 105.801 li
271.581 105.971 li
271.632 106.057 li
270.41 107.396 li
269.923 107.415 li
.988235 .458824 .231373 .160784 cmyk
f
273.637 107.269 mo
271.615 106.603 li
271.653 106.344 li
274.314 107.242 li
273.637 107.269 li
271.683 106.145 mo
271.683 106.143 li
271.684 106.143 li
271.683 106.145 li
.627451 .0627451 0 0 cmyk
f
275.434 107.199 mo
272.159 106.092 li
274.936 104.436 li
279.08 105.846 li
278.751 106.042 li
278.751 106.042 li
278.853 106.214 li
278.789 106.404 li
278.824 106.415 li
278.785 106.674 li
279.849 107.025 li
275.434 107.199 li
.917647 .380392 .184314 .0745098 cmyk
f
274.314 107.242 mo
271.653 106.344 li
271.619 106.332 li
271.683 106.145 li
271.684 106.143 li
271.684 106.143 li
271.632 106.057 li
271.581 105.971 li
271.867 105.801 li
273.605 104.764 li
274.048 104.499 li
274.889 103.997 li
276.363 104.499 li
277.932 105.033 li
279.531 105.577 li
279.08 105.846 li
274.936 104.436 li
272.159 106.092 li
275.434 107.199 li
274.314 107.242 li
.760784 .313725 .313725 .137255 cmyk
f
279.849 107.025 mo
278.785 106.674 li
278.824 106.415 li
280.547 106.998 li
279.849 107.025 li
.627451 .0627451 0 0 cmyk
f
281.667 106.954 mo
279.329 106.164 li
282.105 104.507 li
286.578 106.03 li
286.577 106.761 li
281.667 106.954 li
.917647 .380392 .184314 .0745098 cmyk
f
280.547 106.998 mo
278.824 106.415 li
278.789 106.404 li
278.853 106.214 li
278.751 106.042 li
278.751 106.042 li
279.08 105.846 li
279.531 105.577 li
280.443 105.033 li
281.339 104.499 li
281.626 104.328 li
282.059 104.069 li
282.277 104.144 li
282.854 104.34 li
283.926 104.705 li
283.927 104.705 li
285.496 105.239 li
286.579 105.608 li
286.578 106.03 li
282.105 104.507 li
279.329 106.164 li
281.667 106.954 li
280.547 106.998 li
.760784 .313725 .313725 .137255 cmyk
f
286.665 57.2514 mo
286.645 57.2317 li
286.666 57.2314 li
286.665 57.2514 li
.398554 0 0 .337486 cmyk
f
286.645 57.2317 mo
286.645 57.2316 li
286.665 57.2312 li
286.645 57.2317 li
.474771 0 0 .335133 cmyk
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: FAAAAA+MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginGIBHKR+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/D <1C60D8A8C9B64FADC8BE4593403BE5D574FAA91D2562B9CACA5724F68CBAF9B633416D067A5E8A48880CF83E5CAB8A03949B1116C187CA13B7F370A65C8E97DC500D70EFBCB5CC26BBB7D696E8150B2CA220CEDCF26D8B900AAD9145402949556A2673EAB0E2F57A487E41> |-/M <1C60D8A8C9B6D9EA19A14B847D0E8EB8BF4B471CD7A6A1199FBF0367BA3210A68B70701B9284BFB2267E01EDF19411682FDEA0A61E4E1B02AB19A085A090981D7B2D5305D7BA8D88FBD7AADFDB7642CCF5DD11DBF6878FEF2B11C57265F73526C5EBB1D5352B9863C29DD2C5087C1526E4892F6303AB66F633145B0858E108CA9CCC75D7B9048852C503CE8C743F5DAD5FF90A11C264B389B467D8345DAD2D> |-systemdict /gcheck known {setglobal} if end {end} ifendGIBHKR+MyriadPro-Regular /Encoding getdup 68 /D putdup 77 /M putpop%ADOEndSubsetFont
/GIBHKR+MyriadPro-Regular*1 [32{/.notdef}rp /space 17{/.notdef}rp /two /three /four /five /.notdef /seven 12{/.notdef}rp /D 8{/.notdef}rp /M 31{/.notdef}rp /m /n 145{/.notdef}rp]GIBHKR+MyriadPro-Regular nfGIBHKR+MyriadPro-Regular*1 [8 0 0 -8 0 0 ]msf262.258 128.47 mo(DMD)shgsave
302.364 56.8879 mo
342.631 56.8879 li
342.631 54.888 li
302.364 54.888 li
302.364 56.8879 li
clp
342.631 56.8877 mo
302.364 56.8877 li
302.364 54.888 li
342.631 54.888 li
342.631 56.8877 li
0 0 0 .558431 cmyk
f
grestore
341.734 96.2036 mo
342.234 96.2036 li
342.235 96.5887 342.084 96.9503 341.851 97.2538 cv
341.438 97.7868 340.784 98.2041 339.933 98.5824 cv
337.387 99.6992 332.967 100.405 327.901 100.41 cv
324.041 100.409 320.732 99.9581 318.349 99.233 cv
317.156 98.8689 316.194 98.4395 315.494 97.9339 cv
315.144 97.6802 314.858 97.4056 314.65 97.0953 cv
314.443 96.787 314.317 96.4331 314.317 96.0647 cv
314.316 95.6797 314.467 95.3178 314.701 95.0143 cv
315.114 94.4811 315.768 94.0636 316.618 93.6855 cv
319.164 92.5684 323.585 91.8628 328.651 91.8586 cv
332.512 91.8595 335.82 92.3103 338.204 93.0353 cv
339.396 93.3997 340.358 93.829 341.058 94.3344 cv
341.407 94.5884 341.693 94.8628 341.901 95.173 cv
342.109 95.4813 342.235 95.835 342.234 96.2036 cv
341.734 96.2036 li
341.234 96.2036 li
341.234 96.0605 341.19 95.9102 341.07 95.7286 cv
340.863 95.4122 340.402 95.0358 339.712 94.6904 cv
337.638 93.638 333.609 92.854 328.651 92.8587 cv
324.868 92.858 321.442 93.2715 318.998 93.927 cv
317.778 94.2528 316.803 94.6432 316.172 95.0444 cv
315.856 95.2438 315.629 95.4449 315.496 95.6213 cv
315.361 95.8 315.318 95.938 315.317 96.0647 cv
315.318 96.2078 315.362 96.3581 315.482 96.5398 cv
315.689 96.8561 316.15 97.2325 316.84 97.578 cv
318.914 98.6303 322.944 99.4145 327.901 99.4097 cv
331.684 99.4103 335.11 98.9966 337.554 98.3409 cv
338.774 98.0151 339.749 97.6245 340.38 97.2235 cv
340.696 97.0243 340.922 96.823 341.056 96.6468 cv
341.191 96.4679 341.234 96.3301 341.234 96.2036 cv
341.734 96.2036 li
f
347.606 135.731 mo
348.106 135.731 li
348.107 136.116 347.956 136.478 347.723 136.782 cv
347.31 137.315 346.656 137.732 345.805 138.11 cv
343.259 139.227 338.839 139.933 333.772 139.937 cv
329.915 139.937 326.425 139.521 323.861 138.835 cv
322.579 138.49 321.528 138.081 320.759 137.596 cv
320.375 137.352 320.058 137.088 319.823 136.782 cv
319.589 136.478 319.438 136.116 319.439 135.731 cv
319.438 135.346 319.589 134.985 319.823 134.681 cv
320.236 134.148 320.89 133.73 321.74 133.352 cv
324.286 132.235 328.707 131.529 333.772 131.525 cv
337.63 131.526 341.121 131.942 343.684 132.628 cv
344.967 132.973 346.018 133.381 346.787 133.866 cv
347.171 134.11 347.488 134.375 347.723 134.681 cv
347.956 134.985 348.107 135.346 348.106 135.731 cv
347.606 135.731 li
347.106 135.731 li
347.106 135.605 347.063 135.467 346.928 135.288 cv
346.696 134.977 346.169 134.602 345.402 134.267 cv
343.096 133.245 338.735 132.521 333.772 132.525 cv
329.989 132.525 326.564 132.938 324.12 133.594 cv
322.9 133.92 321.925 134.31 321.294 134.711 cv
320.978 134.91 320.751 135.111 320.618 135.288 cv
320.483 135.467 320.44 135.605 320.439 135.731 cv
320.44 135.858 320.483 135.996 320.618 136.175 cv
320.85 136.486 321.377 136.86 322.144 137.195 cv
324.45 138.218 328.811 138.942 333.772 138.937 cv
337.556 138.938 340.982 138.524 343.425 137.869 cv
344.646 137.543 345.621 137.152 346.252 136.751 cv
346.567 136.552 346.794 136.351 346.928 136.175 cv
347.063 135.996 347.106 135.858 347.106 135.731 cv
347.606 135.731 li
f
290.301 101.87 mo
286.593 101.87 li
286.592 98.3601 li
286.613 86.7014 li
312.817 56.8984 li
335.817 56.8984 li
335.817 92.4612 li
333.784 92.0801 331.353 91.8592 328.651 91.8586 cv
326.443 91.8605 324.358 91.9955 322.497 92.2398 cv
322.497 65.7313 li
290.301 101.87 li
.4 0 0 0 cmyk
f
286.88 105.71 mo
286.595 105.613 li
286.595 105.239 li
287.299 105.239 li
286.88 105.71 li
287.775 104.705 mo
286.595 104.705 li
286.595 104.705 li
287.775 104.705 li
287.775 104.705 li
.694118 .243137 .243137 .027451 cmyk
f
287.775 104.705 mo
286.595 104.705 li
286.593 101.87 li
290.301 101.87 li
287.775 104.705 li
.807843 .239216 .105882 .00392157 cmyk
f
287.299 105.239 mo
286.595 105.239 li
286.595 104.705 li
287.775 104.705 li
287.299 105.239 li
.627451 .0627451 0 0 cmyk
f
286.595 106.029 mo
286.595 105.613 li
286.88 105.71 li
286.595 106.029 li
.760784 .313725 .313725 .137255 cmyk
f
335.817 96.1305 mo
335.214 96.1305 li
333.808 96.1305 li
333.808 96.1301 li
333.765 96.1305 li
323.671 96.1305 li
322.497 96.1305 li
322.497 93.2491 li
324.34 93.0003 326.43 92.8587 328.643 92.8587 cv
328.645 92.8587 328.649 92.8587 328.651 92.8587 cv
328.666 92.8586 328.68 92.8586 328.695 92.8586 cv
331.404 92.8586 333.834 93.0942 335.817 93.48 cv
335.817 96.1305 li
.4 0 0 0 cmyk
f
286.592 98.3601 mo
286.587 86.7304 li
286.613 86.7014 li
286.592 98.3601 li
.639216 0 0 0 cmyk
f
335.817 93.48 mo
333.834 93.0942 331.404 92.8586 328.695 92.8586 cv
328.68 92.8586 328.666 92.8586 328.651 92.8587 cv
328.649 92.8587 328.645 92.8587 328.643 92.8587 cv
326.43 92.8587 324.34 93.0003 322.497 93.2491 cv
322.497 92.2398 li
324.358 91.9955 326.443 91.8605 328.651 91.8586 cv
331.353 91.8592 333.784 92.0801 335.817 92.4612 cv
335.817 93.48 li
.4 0 0 .6 cmyk
f
329.57 121.497 mo
327.845 114.082 li
329.596 106.211 li
331.321 113.627 li
329.57 121.497 li
.690196 .586667 0 0 cmyk
f
332.441 123.231 mo
316.4 123.231 li
316.4 122.231 li
332.441 122.231 li
332.441 123.231 li
0 0 0 1 cmyk
f
327.252 96.1305 mo
338.794 96.1305 li
333.151 121.497 li
327.252 96.1305 li
.861 .734 0 0 cmyk
f
326.196 121.497 mo
324.867 115.781 li
327.099 110.874 li
327.845 114.082 li
326.196 121.497 li
.690196 .586667 0 0 cmyk
f
327.845 114.082 mo
327.099 110.874 li
329.469 105.665 li
329.596 106.211 li
327.845 114.082 li
.828912 .704575 0 0 cmyk
f
329.596 106.211 mo
329.469 105.665 li
329.955 104.597 li
329.596 106.211 li
.862745 .733333 0 0 cmyk
f
322.285 104.678 mo
321.17 99.8851 li
321.532 99.9471 321.905 100.004 322.29 100.056 cv
322.285 104.678 li
322.291 99.0464 mo
321.816 98.9801 321.359 98.9058 320.923 98.8242 cv
320.297 96.1305 li
322.497 96.1305 li
322.497 96.2314 li
323.475 96.2314 li
322.294 96.243 li
322.291 99.0464 li
.690196 .586667 0 0 cmyk
f
322.29 100.056 mo
321.905 100.004 321.532 99.9471 321.17 99.8851 cv
320.923 98.8242 li
321.359 98.9058 321.816 98.9801 322.291 99.0464 cv
322.29 100.056 li
.690196 .588235 0 .2 cmyk
f
323.475 96.2314 mo
322.497 96.2314 li
322.497 96.1305 li
323.671 96.1305 li
323.694 96.2293 li
323.475 96.2314 li
.768197 .585621 0 0 cmyk
f
323.694 96.2293 mo
323.671 96.1305 li
327.252 96.1305 li
327.267 96.1942 li
323.694 96.2293 li
.846274 .70459 0 0 cmyk
f
327.267 96.1942 mo
327.252 96.1305 li
331.839 96.1305 li
331.835 96.1494 li
327.267 96.1942 li
.862745 .733333 0 0 cmyk
f
322.266 121.497 mo
322.285 104.678 li
324.867 115.781 li
322.266 121.497 li
.449412 0 .449412 0 cmyk
f
333.808 96.1305 mo
333.765 96.1305 li
333.808 96.1301 li
.611611 0 .450504 0 cmyk
f
329.955 104.597 mo
331.835 96.1494 li
333.765 96.1305 li
333.808 96.1305 li
329.955 104.597 li
.796078 .294118 .45098 0 cmyk
f
324.867 115.781 mo
322.285 104.678 li
322.29 100.056 li
323.033 100.156 323.818 100.237 324.64 100.296 cv
327.099 110.874 li
324.867 115.781 li
324.402 99.2758 mo
323.664 99.2168 322.959 99.1396 322.291 99.0464 cv
322.294 96.243 li
323.475 96.2314 li
323.694 96.2314 li
324.402 99.2758 li
.726413 .23491 .448135 0 cmyk
f
324.64 100.296 mo
323.818 100.237 323.033 100.156 322.29 100.056 cv
322.291 99.0464 li
322.959 99.1396 323.664 99.2168 324.402 99.2758 cv
324.64 100.296 li
.72549 .235294 .45098 .0784314 cmyk
f
323.694 96.2314 mo
323.475 96.2314 li
323.694 96.2293 li
323.694 96.2314 li
.758616 .235432 .45218 0 cmyk
f
327.099 110.874 mo
324.64 100.296 li
325.673 100.37 326.763 100.409 327.901 100.41 cv
328.017 100.41 328.132 100.409 328.247 100.408 cv
329.469 105.665 li
327.099 110.874 li
327.856 99.4097 mo
326.644 99.4097 325.488 99.3625 324.402 99.2758 cv
323.694 96.2314 li
327.276 96.2314 li
328.015 99.4096 li
327.98 99.4096 327.945 99.4097 327.91 99.4097 cv
327.907 99.4097 327.904 99.4097 327.901 99.4097 cv
327.886 99.4097 327.871 99.4097 327.856 99.4097 cv
.779731 .281784 .447766 0 cmyk
f
327.901 100.41 mo
326.763 100.409 325.673 100.37 324.64 100.296 cv
324.402 99.2758 li
325.488 99.3625 326.644 99.4097 327.856 99.4097 cv
327.871 99.4097 327.886 99.4097 327.901 99.4097 cv
327.904 99.4097 327.907 99.4097 327.91 99.4097 cv
327.945 99.4097 327.98 99.4096 328.015 99.4096 cv
328.247 100.408 li
328.132 100.409 328.017 100.41 327.901 100.41 cv
.780392 .282353 .45098 .0156863 cmyk
f
327.276 96.2314 mo
323.694 96.2314 li
323.694 96.2293 li
327.267 96.1942 li
327.276 96.2314 li
.789835 .284029 .447443 0 cmyk
f
329.469 105.665 mo
328.247 100.408 li
328.015 99.4096 li
327.276 96.2314 li
327.267 96.1942 li
331.835 96.1494 li
329.955 104.597 li
329.469 105.665 li
.796078 .294118 .45098 0 cmyk
f
345.404 122.731 mo
335.964 122.731 li
0 0 0 1 cmyk
@
337.651 148.415 mo
328.786 148.415 li
330.329 139.823 li
331.431 139.898 332.584 139.937 333.772 139.937 cv
334.601 139.937 335.412 139.917 336.201 139.88 cv
337.651 148.415 li
333.729 138.937 mo
332.619 138.937 331.539 138.901 330.506 138.833 cv
331.63 132.57 li
332.324 132.541 333.036 132.525 333.761 132.525 cv
333.764 132.525 333.769 132.525 333.772 132.525 cv
333.787 132.525 333.801 132.525 333.815 132.525 cv
334.198 132.525 334.578 132.53 334.953 132.538 cv
336.032 138.888 li
335.301 138.92 334.55 138.937 333.784 138.937 cv
333.78 138.937 333.776 138.937 333.772 138.937 cv
333.758 138.937 333.744 138.937 333.729 138.937 cv
331.811 131.563 mo
333.339 123.047 li
334.782 131.535 li
334.449 131.529 334.112 131.525 333.772 131.525 cv
333.107 131.526 332.452 131.539 331.811 131.563 cv
.690196 .586667 0 0 cmyk
f
333.772 139.937 mo
332.584 139.937 331.431 139.898 330.329 139.823 cv
330.506 138.833 li
331.539 138.901 332.619 138.937 333.729 138.937 cv
333.744 138.937 333.758 138.937 333.772 138.937 cv
333.776 138.937 333.78 138.937 333.784 138.937 cv
334.55 138.937 335.301 138.92 336.032 138.888 cv
336.201 139.88 li
335.412 139.917 334.601 139.937 333.772 139.937 cv
331.63 132.57 mo
331.811 131.563 li
332.452 131.539 333.107 131.526 333.772 131.525 cv
334.112 131.525 334.449 131.529 334.782 131.535 cv
334.953 132.538 li
334.578 132.53 334.198 132.525 333.815 132.525 cv
333.801 132.525 333.787 132.525 333.772 132.525 cv
333.769 132.525 333.764 132.525 333.761 132.525 cv
333.036 132.525 332.324 132.541 331.63 132.57 cv
.690196 .588235 0 .2 cmyk
f
59.901 59.023 mo
16.901 59.023 li
16.901 43.023 li
59.901 43.023 li
cp
1 1 0 0 cmyk
f
59.901 59.023 mo
16.901 59.023 li
16.901 43.023 li
59.901 43.023 li
cp
@
101.151 51.981 mo
59.9009 51.981 li
59.9009 50.064 li
101.151 50.064 li
101.151 51.981 li
.861 .734 0 0 cmyk
f
59.2979 60.751 mo
60.4009 59.5231 li
16.4009 59.5231 li
15.6929 60.8581 li
cp
1 1 .25 .25 cmyk
f
15.6929 60.8579 mo
16.4009 59.5229 li
16.4009 42.525 li
15.6929 43.2939 li
cp
.85 .5 0 0 cmyk
f
58.8589 84.113 mo
15.8589 84.113 li
15.8589 68.1131 li
58.8589 68.1131 li
58.8589 84.113 li
1 0 1 0 cmyk
f
58.8589 84.113 mo
58.8589 84.6129 li
15.359 84.6129 li
15.359 67.6132 li
59.359 67.6132 li
59.359 84.6129 li
58.8589 84.6129 li
58.8589 84.113 li
58.359 84.113 li
58.359 68.613 li
16.3591 68.613 li
16.3591 83.6131 li
58.8589 83.6131 li
58.8589 84.113 li
58.359 84.113 li
58.8589 84.113 li
f
59.359 77.0708 mo
59.359 75.1547 li
73.401 75.1547 li
73.401 77.0429 li
59.359 77.0708 li
74.4011 77.0409 mo
74.4011 75.1547 li
75.6511 75.1547 li
75.6511 77.0384 li
74.4011 77.0409 li
76.6509 77.0364 mo
76.6509 75.1547 li
100.221 75.1547 li
100.223 76.99 li
76.6509 77.0364 li
.449412 0 .449412 0 cmyk
f
73.401 77.0429 mo
73.401 75.1547 li
74.4011 75.1547 li
74.4011 77.0409 li
73.401 77.0429 li
75.6511 77.0384 mo
75.6511 75.1547 li
76.6509 75.1547 li
76.6509 77.0364 li
75.6511 77.0384 li
.45098 0 .45098 .321569 cmyk
f
100.223 76.99 mo
100.221 75.1547 li
100.223 75.1547 li
100.223 76.9896 li
.628589 0 .628589 0 cmyk
f
58.8591 77.0718 mo
58.8591 75.1547 li
59.359 75.1547 li
59.359 77.0708 li
58.8591 77.0718 li
.85098 0 .85098 0 cmyk
f
58.2559 85.8408 mo
59.3599 84.6129 li
15.3599 84.6129 li
14.4639 85.9479 li
cp
.75 0 1 0 cmyk
f
14.4634 85.9477 mo
15.3594 84.6127 li
15.3594 67.6147 li
14.4634 68.3247 li
cp
.5 0 1 0 cmyk
f
233.824 205.008 mo
233.824 206.008 li
202.25 206.008 li
202.25 173.434 li
234.824 173.434 li
234.824 206.008 li
233.824 206.008 li
233.824 205.008 li
232.824 205.008 li
232.824 175.434 li
204.25 175.434 li
204.25 204.008 li
233.824 204.008 li
233.824 205.008 li
232.824 205.008 li
233.824 205.008 li
0 0 0 .8 cmyk
f
244.177 203.555 mo
244.177 204.055 li
243.792 204.056 243.43 203.905 243.127 203.671 cv
242.594 203.258 242.176 202.604 241.798 201.754 cv
240.681 199.208 239.975 194.788 239.971 189.722 cv
239.972 185.864 240.388 182.373 241.074 179.81 cv
241.418 178.527 241.827 177.476 242.312 176.707 cv
242.556 176.323 242.82 176.006 243.127 175.771 cv
243.43 175.538 243.792 175.387 244.177 175.388 cv
244.562 175.387 244.924 175.538 245.227 175.771 cv
245.76 176.184 246.178 176.838 246.556 177.689 cv
247.673 180.235 248.379 184.655 248.383 189.722 cv
248.382 193.579 247.966 197.069 247.28 199.633 cv
246.936 200.916 246.527 201.966 246.042 202.735 cv
245.798 203.12 245.533 203.436 245.227 203.671 cv
244.924 203.905 244.562 204.056 244.177 204.055 cv
244.177 203.555 li
244.177 203.055 li
244.304 203.054 244.441 203.011 244.62 202.876 cv
244.932 202.644 245.306 202.117 245.641 201.35 cv
246.664 199.044 247.387 194.683 247.383 189.722 cv
247.384 185.938 246.97 182.512 246.314 180.069 cv
245.989 178.848 245.598 177.873 245.197 177.242 cv
244.998 176.927 244.797 176.7 244.62 176.566 cv
244.441 176.431 244.304 176.389 244.177 176.388 cv
244.05 176.389 243.913 176.431 243.734 176.566 cv
243.423 176.798 243.048 177.325 242.713 178.092 cv
241.69 180.398 240.967 184.759 240.971 189.722 cv
240.97 193.505 241.384 196.931 242.04 199.374 cv
242.365 200.594 242.756 201.569 243.157 202.2 cv
243.356 202.516 243.557 202.743 243.734 202.876 cv
243.913 203.011 244.05 203.054 244.177 203.055 cv
244.177 203.555 li
0 0 0 1 cmyk
f
92.2696 181.171 mo
92.7695 181.171 li
92.7703 181.556 92.6194 181.918 92.3859 182.221 cv
91.9731 182.754 91.3189 183.172 90.4687 183.55 cv
87.9225 184.667 83.5023 185.373 78.4365 185.377 cv
74.5794 185.376 71.0886 184.96 68.5251 184.275 cv
67.2422 183.93 66.1914 183.522 65.4221 183.036 cv
65.0377 182.792 64.7209 182.527 64.4862 182.221 cv
64.2524 181.918 64.1015 181.556 64.1026 181.171 cv
64.1015 180.786 64.2524 180.424 64.4862 180.12 cv
64.899 179.587 65.5532 179.17 66.4036 178.792 cv
68.95 177.675 73.3707 176.969 78.4365 176.965 cv
82.2936 176.966 85.7841 177.381 88.3474 178.067 cv
89.6303 178.412 90.6809 178.82 91.45 179.306 cv
91.8344 179.55 92.1511 179.814 92.3859 180.12 cv
92.6194 180.424 92.7703 180.786 92.7695 181.171 cv
92.2696 181.171 li
91.7695 181.171 li
91.7686 181.044 91.726 180.906 91.5912 180.727 cv
91.3591 180.416 90.8322 180.042 90.0653 179.707 cv
87.7591 178.684 83.3981 177.961 78.4365 177.965 cv
74.6536 177.964 71.2275 178.378 68.7839 179.033 cv
67.5632 179.359 66.5883 179.749 65.9573 180.151 cv
65.6415 180.35 65.4148 180.551 65.2809 180.727 cv
65.146 180.906 65.1033 181.044 65.1024 181.171 cv
65.1033 181.298 65.146 181.436 65.2809 181.614 cv
65.513 181.926 66.0399 182.301 66.807 182.635 cv
69.1134 183.658 73.4748 184.381 78.4365 184.377 cv
82.2194 184.378 85.6452 183.964 88.0886 183.309 cv
89.3091 182.983 90.284 182.592 90.9148 182.191 cv
91.2306 181.992 91.4573 181.791 91.5912 181.614 cv
91.726 181.436 91.7686 181.298 91.7695 181.171 cv
92.2696 181.171 li
f
201.092 213.055 mo
202.092 213.055 li
202.092 252.839 li
208.98 268.055 li
225.701 268.055 li
234.037 252.142 li
234.037 214.055 li
201.092 214.055 li
201.092 213.055 li
202.092 213.055 li
201.092 213.055 li
201.092 212.055 li
236.037 212.055 li
236.037 252.634 li
226.911 270.055 li
207.69 270.055 li
200.092 253.271 li
200.092 212.055 li
201.092 212.055 li
201.092 213.055 li
0 0 0 .8 cmyk
f
92.4449 174.398 mo
92.4449 175.398 li
60.871 175.398 li
60.871 142.824 li
93.445 142.824 li
93.445 175.398 li
92.4449 175.398 li
92.4449 174.398 li
91.4449 174.398 li
91.4449 144.824 li
62.8709 144.824 li
62.8709 173.398 li
92.4449 173.398 li
92.4449 174.398 li
91.4449 174.398 li
92.4449 174.398 li
f
gsave
319.236 205.634 mo
348.203 205.634 li
348.203 174.787 li
319.236 174.787 li
319.236 205.634 li
clp
320.698 205.634 mo
319.236 204.27 li
319.236 204.269 li
328.722 194.101 li
328.787 194.101 li
337.183 185.035 li
337.18 185.034 li
337.182 185.034 li
337.182 185.032 li
346.741 174.787 li
346.741 174.787 li
348.203 176.151 li
320.698 205.634 li
0 0 0 .558431 cmyk
f
grestore
328.786 185.049 mo
328.786 148.415 li
337.651 148.415 li
337.182 185.032 li
337.18 185.034 li
334.313 185.039 li
328.786 185.048 li
.690196 .586667 0 0 cmyk
f
337.18 185.034 mo
337.182 185.032 li
337.182 185.034 li
337.18 185.034 li
.690196 .586851 0 .110727 cmyk
f
224.571 194.537 mo
224.615 185.24 li
224.639 185.216 li
232.824 185.203 li
232.824 194.502 li
224.571 194.537 li
234.824 194.494 mo
234.824 185.199 li
240.172 185.191 li
240.042 186.613 239.971 188.136 239.971 189.722 cv
239.972 191.39 240.05 192.987 240.193 194.471 cv
234.824 194.494 li
241.197 194.467 mo
241.051 192.991 240.971 191.391 240.971 189.722 cv
240.969 188.133 241.043 186.607 241.176 185.189 cv
247.176 185.179 li
247.31 186.599 247.383 188.129 247.383 189.722 cv
247.384 191.38 247.304 192.972 247.159 194.442 cv
241.197 194.467 li
248.164 194.438 mo
248.306 192.963 248.382 191.376 248.383 189.722 cv
248.381 188.131 248.311 186.603 248.18 185.178 cv
328.786 185.048 li
328.786 185.049 li
334.313 185.039 li
337.183 185.035 li
328.722 194.101 li
248.164 194.438 li
.690196 .586667 0 0 cmyk
f
232.824 194.502 mo
232.824 185.203 li
234.824 185.199 li
234.824 194.494 li
232.824 194.502 li
.690196 .588235 0 .160784 cmyk
f
240.193 194.471 mo
240.05 192.987 239.972 191.39 239.971 189.722 cv
239.971 188.136 240.042 186.613 240.172 185.191 cv
241.176 185.189 li
241.043 186.607 240.969 188.133 240.971 189.722 cv
240.971 191.391 241.051 192.991 241.197 194.467 cv
240.193 194.471 li
247.159 194.442 mo
247.304 192.972 247.384 191.38 247.383 189.722 cv
247.383 188.129 247.31 186.599 247.176 185.179 cv
248.18 185.178 li
248.311 186.603 248.381 188.131 248.383 189.722 cv
248.382 191.376 248.306 192.963 248.164 194.438 cv
247.159 194.442 li
.690196 .588235 0 .2 cmyk
f
328.722 194.101 mo
337.18 185.035 li
337.183 185.035 li
328.787 194.101 li
328.722 194.101 li
.690196 .586851 0 .110727 cmyk
f
gsave
202.546 205.718 mo
234.248 205.718 li
234.248 174.27 li
202.546 174.27 li
202.546 205.718 li
clp
205.68 204.008 mo
204.25 204.008 li
204.25 202.609 li
213.649 193.293 li
213.685 196.073 li
205.68 204.008 li
224.614 185.24 mo
224.614 185.215 li
224.614 185.215 li
224.569 182.468 li
231.666 175.434 li
232.824 175.434 li
232.824 177.102 li
224.639 185.216 li
224.615 185.216 li
224.615 185.24 li
224.614 185.24 li
0 0 0 .558431 cmyk
f
203.954 205.718 mo
203.954 205.718 li
202.546 204.298 li
204.25 202.609 li
204.25 204.008 li
205.68 204.008 li
203.954 205.719 li
232.824 177.102 mo
232.824 175.434 li
231.666 175.434 li
232.84 174.27 li
234.248 175.691 li
232.824 177.102 li
0 0 0 .8 cmyk
f
224.615 185.24 mo
224.615 185.216 li
224.639 185.216 li
224.615 185.24 li
.210381 .177163 0 .557324 cmyk
f
grestore
gsave
61.1644 175.106 mo
93.1525 175.106 li
93.1525 143.118 li
61.1644 143.118 li
61.1644 175.106 li
clp
64.2863 173.398 mo
62.8709 173.398 li
62.8709 171.985 li
90.0317 144.824 li
91.4449 144.824 li
91.4449 146.239 li
80.9045 156.78 li
73.4723 164.199 li
73.4723 164.212 li
64.2863 173.398 li
0 0 0 .558431 cmyk
f
62.5788 175.106 mo
61.1644 173.691 li
62.8709 171.985 li
62.8709 173.398 li
64.2863 173.398 li
62.5788 175.106 li
91.4449 146.239 mo
91.4449 144.824 li
90.0317 144.824 li
91.7385 143.117 li
91.7391 143.118 li
93.1525 144.531 li
93.1525 144.532 li
91.4449 146.239 li
0 0 0 .8 cmyk
f
grestore
54.527 144.263 mo
54.527 143.763 li
54.912 143.762 55.2737 143.913 55.5774 144.146 cv
56.1104 144.559 56.5279 145.213 56.9062 146.064 cv
58.023 148.61 58.7287 153.03 58.7329 158.096 cv
58.7322 161.953 58.3164 165.444 57.6304 168.008 cv
57.2858 169.29 56.8776 170.341 56.392 171.11 cv
56.1479 171.495 55.8834 171.811 55.5774 172.046 cv
55.2737 172.28 54.912 172.431 54.527 172.43 cv
54.1419 172.431 53.7803 172.28 53.4768 172.046 cv
52.9438 171.633 52.5263 170.979 52.1479 170.129 cv
51.0311 167.583 50.3251 163.162 50.3209 158.096 cv
50.3215 154.239 50.7378 150.748 51.4238 148.185 cv
51.7686 146.902 52.1768 145.851 52.6622 145.082 cv
52.9063 144.698 53.1705 144.381 53.4768 144.146 cv
53.7803 143.913 54.1419 143.762 54.527 143.763 cv
54.527 144.263 li
54.527 144.763 li
54.4005 144.764 54.2627 144.806 54.0838 144.941 cv
53.7727 145.173 53.3979 145.7 53.0631 146.467 cv
52.0405 148.773 51.3167 153.134 51.3209 158.096 cv
51.3203 161.879 51.734 165.305 52.3897 167.749 cv
52.7155 168.969 53.1058 169.944 53.5071 170.575 cv
53.7063 170.891 53.9074 171.118 54.0838 171.251 cv
54.2627 171.386 54.4005 171.429 54.527 171.43 cv
54.6536 171.429 54.7915 171.386 54.9704 171.251 cv
55.2817 171.019 55.6562 170.493 55.9911 169.725 cv
57.0139 167.419 57.737 163.058 57.7328 158.096 cv
57.7337 154.313 57.32 150.887 56.6645 148.444 cv
56.3387 147.223 55.9483 146.248 55.5471 145.617 cv
55.3479 145.302 55.1468 145.075 54.9704 144.941 cv
54.7915 144.806 54.6536 144.764 54.527 144.763 cv
54.527 144.263 li
0 0 0 1 cmyk
f
216.674 286.12 mo
215.998 270.055 li
218.391 270.055 li
216.674 286.12 li
218.605 268.055 mo
215.914 268.055 li
213.645 214.055 li
224.377 214.055 li
218.605 268.055 li
224.487 212.055 mo
213.561 212.055 li
213.483 210.203 li
213.544 206.008 li
224.516 206.008 li
224.487 212.055 li
224.525 204.008 mo
213.573 204.008 li
213.686 196.194 li
213.686 196.194 li
213.686 196.194 li
222.789 187.049 li
224.614 185.24 li
224.525 204.008 li
.690196 .586667 0 0 cmyk
f
224.516 206.008 mo
213.544 206.008 li
213.573 204.008 li
224.525 204.008 li
224.516 206.008 li
.690196 .588235 0 .160784 cmyk
f
218.391 270.055 mo
215.998 270.055 li
215.914 268.055 li
218.605 268.055 li
218.391 270.055 li
224.377 214.055 mo
213.645 214.055 li
213.561 212.055 li
224.487 212.055 li
224.483 213.064 li
224.377 214.055 li
f
222.789 187.049 mo
224.614 185.216 li
224.614 185.24 li
222.789 187.049 li
.690196 .586851 0 .110727 cmyk
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: FAAAAA+MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginGIBHKR+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B89DB76243241956147685E9D04DE27F343A7EF0A25AE4387D3A3D08796B7514395B9CA8F4> |-/zero <1C60D8A8C9B7BA8F6239473D6D0952B7B5E4CF4EC97A525E022C9B4FC88EFB3F3BAD779956899C836BBD2FC8F5F391C07FB0B2C3B92A06F4A639C8E43BB10FDB531B59E83D98A9AB718650C50F38FC91524BAA33EC4FF9905D1A9C> |-/six <1C60D8A8C9B7BA8F6239473257AB127E7620F87AA168F1AECB0A4CE93CC295CEFD9192C2967A0DB83DCBD6BBAD18D6960D2101F671B2250912AB87B7A312023FCC73A003C62725D7FC83EAC1691C575B6AFB00517E51D41BA56D827F4B6519D801FB562E8DCF2E48521AD57F7C657FA7114264065AFF4ECE505E9E53891A0834E3BEC3F8A67BA299D28ECC> |-/A <1C60D8A8C9B7D7E88499B0B4629F6223175CD4E8063229FBCC9F00B932F15865B21E5E7BB034E6AF82883E05563056B289C39B2EA350305E00FB98125757C6B71D805070E392C2F5C67BAB2BDB26729DB33934727F6026751FF00CC19CB2FCE13DD0FF> |-/N <1C60D8A8C9B647206730D8F66F8AC61925B6B1318E1FB010B62374917FD833E1AD6BC7D55692C9AE2F77E568D5881F872B2DD35BA9F526AA31403949B904F2FBFFA219269CB793CC5D4E2B92EAFFDD1A748A3F84A703B249550493724F424782ACE69D75F53E9659B9B2838FB0059CC29141042064D2E7FC418574> |-/X <1C60D8A8C9B7E02AFD7F1EBE5CC834AB58337882CD546FA2822B617194C3C3B0F1C85FE77670696DC8830E884843CABEE53626330E6586822F35A7A4AC1DA8777CEA46FEAE7E909264C9F06B23B5A0F0E070770BBA1C71DE3C58ED4A404A1260C411> |-systemdict /gcheck known {setglobal} if end {end} ifendGIBHKR+MyriadPro-Regular /Encoding getdup 46 /period putdup 48 /zero putdup 54 /six putdup 65 /A putdup 78 /N putdup 88 /X putpop%ADOEndSubsetFont
/GIBHKR+MyriadPro-Regular*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /.notdef /two /three /four /five /six /seven 9{/.notdef}rp /A 2{/.notdef}rp /D 8{/.notdef}rp /M /N 9{/.notdef}rp /X 20{/.notdef}rp /m /n 145{/.notdef}rp]GIBHKR+MyriadPro-Regular nfGIBHKR+MyriadPro-Regular*1 [8 0 0 -8 0 0 ]msf69.2295 98.0775 mo(ND)[5.26404 0 ]xsh232.781 267.229 mo(40X )sh227.109 276.829 mo(0.65 NA)sh43.834 163.659 mo
20.209 163.659 li
20.209 152.534 li
43.834 152.534 li
cp
.75 1 0 0 cmyk
@
83.709 215.419 mo
72.584 215.419 li
72.584 191.794 li
83.709 191.794 li
cp
@
44.6161 160.171 mo
44.6161 160.671 li
43.835 160.671 li
43.3351 160.671 li
43.3351 155.421 li
44.6161 155.421 li
45.116 155.421 li
45.116 160.671 li
44.6161 160.671 li
44.6161 160.171 li
44.1159 160.171 li
44.1159 156.421 li
43.835 156.421 li
43.835 155.921 li
44.3349 155.921 li
44.3349 159.671 li
44.6161 159.671 li
44.6161 160.171 li
44.1159 160.171 li
44.6161 160.171 li
f
80.084 191.609 mo
80.084 192.109 li
75.0839 192.109 li
75.0839 190.11 li
80.5841 190.11 li
80.5841 192.109 li
80.084 192.109 li
80.084 191.609 li
79.584 191.609 li
79.584 191.11 li
76.084 191.11 li
76.084 191.609 li
75.5841 191.609 li
75.5841 191.109 li
80.084 191.109 li
80.084 191.609 li
79.584 191.609 li
80.084 191.609 li
f
59.5848 164.199 mo
58.4171 163.724 li
58.6205 161.999 58.7325 160.097 58.7329 158.096 cv
58.7312 156.113 58.622 154.228 58.4228 152.517 cv
59.5848 152.046 li
59.5846 164.199 li
59.5848 164.199 li
57.455 163.332 mo
51.396 160.867 li
51.3467 159.973 51.3208 159.046 51.3209 158.096 cv
51.3201 157.161 51.3452 156.246 51.3933 155.364 cv
57.4603 152.906 li
57.6358 154.504 57.7332 156.258 57.7328 158.096 cv
57.7344 159.951 57.6343 161.721 57.455 163.332 cv
50.3746 160.452 mo
45.116 158.312 li
45.116 157.906 li
50.3723 155.777 li
50.3386 156.531 50.321 157.306 50.3209 158.096 cv
50.3215 158.899 50.3399 159.686 50.3746 160.452 cv
0 .6 .6 0 cmyk
f
58.4171 163.724 mo
57.455 163.332 li
57.6343 161.721 57.7344 159.951 57.7328 158.096 cv
57.7332 156.258 57.6358 154.504 57.4603 152.906 cv
58.4228 152.517 li
58.622 154.228 58.7312 156.113 58.7329 158.096 cv
58.7325 160.097 58.6205 161.999 58.4171 163.724 cv
51.396 160.867 mo
50.3746 160.452 li
50.3399 159.686 50.3215 158.899 50.3209 158.096 cv
50.321 157.306 50.3386 156.531 50.3723 155.777 cv
51.3933 155.364 li
51.3452 156.246 51.3201 157.161 51.3209 158.096 cv
51.3208 159.046 51.3467 159.973 51.396 160.867 cv
0 .6 .6 .4 cmyk
f
45.116 158.312 mo
44.6157 158.109 li
45.116 157.906 li
45.116 158.312 li
.298039 1 .6 0 cmyk
f
70.5364 164.199 mo
62.8709 164.199 li
62.8709 152.117 li
82.1774 152.534 li
70.5364 164.199 li
60.871 164.199 mo
59.5846 164.199 li
59.5848 152.046 li
59.5846 152.046 li
60.871 152.074 li
60.871 164.199 li
0 .6 .6 0 cmyk
f
62.8709 164.199 mo
60.871 164.199 li
60.871 152.074 li
62.8709 152.117 li
62.8709 164.199 li
0 .6 .6 .321569 cmyk
f
59.5846 164.199 mo
59.5846 164.199 li
59.5846 152.046 li
59.5848 152.046 li
59.5848 164.199 li
0 .839216 .839216 0 cmyk
f
77.9474 190.11 mo
77.7086 190.11 li
76.3332 185.335 li
77.0194 185.362 77.7215 185.377 78.4365 185.377 cv
79.0239 185.376 79.6023 185.367 80.1705 185.348 cv
77.9474 190.11 li
78.3955 184.377 mo
77.5929 184.377 76.8062 184.358 76.0415 184.322 cv
74.2605 178.139 li
75.5723 178.026 76.9722 177.965 78.4249 177.965 cv
78.4286 177.965 78.4328 177.965 78.4365 177.965 cv
78.451 177.965 78.4651 177.965 78.4796 177.965 cv
80.2512 177.965 81.9453 178.058 83.4961 178.224 cv
80.6457 184.33 li
79.9295 184.361 79.1943 184.377 78.4451 184.377 cv
78.4424 184.377 78.4392 184.377 78.4365 184.377 cv
78.4225 184.377 78.4094 184.377 78.3955 184.377 cv
83.9428 177.267 mo
82.25 177.072 80.3902 176.965 78.4365 176.965 cv
76.8775 176.966 75.3794 177.034 73.9785 177.16 cv
73.4718 175.4 li
84.7879 175.456 li
83.9428 177.267 li
.6 0 .6 0 cmyk
f
78.4365 185.377 mo
77.7215 185.377 77.0194 185.362 76.3332 185.335 cv
76.0415 184.322 li
76.8062 184.358 77.5929 184.377 78.3955 184.377 cv
78.4094 184.377 78.4225 184.377 78.4365 184.377 cv
78.4392 184.377 78.4424 184.377 78.4451 184.377 cv
79.1943 184.377 79.9295 184.361 80.6457 184.33 cv
80.1705 185.348 li
79.6023 185.367 79.0239 185.376 78.4365 185.377 cv
83.4961 178.224 mo
81.9453 178.058 80.2512 177.965 78.4796 177.965 cv
78.4651 177.965 78.451 177.965 78.4365 177.965 cv
78.4328 177.965 78.4286 177.965 78.4249 177.965 cv
76.9722 177.965 75.5723 178.026 74.2605 178.139 cv
73.9785 177.16 li
75.3794 177.034 76.8775 176.966 78.4365 176.965 cv
80.3902 176.965 82.25 177.072 83.9428 177.267 cv
83.4961 178.224 li
.6 0 .6 .4 cmyk
f
77.7998 190.426 mo
77.7086 190.11 li
77.9474 190.11 li
77.7998 190.426 li
.898039 .4 .6 0 cmyk
f
84.7872 175.456 mo
73.4723 175.4 li
73.4723 175.398 li
84.7872 175.398 li
84.7872 175.456 li
84.7872 173.398 mo
73.4723 173.398 li
73.4723 164.212 li
80.9045 156.78 li
84.7872 152.904 li
84.7872 173.398 li
.6 0 .6 0 cmyk
f
84.7872 175.398 mo
73.4723 175.398 li
73.4723 173.398 li
84.7872 173.398 li
84.7872 175.398 li
.6 0 .6 .321569 cmyk
f
73.4723 164.212 mo
73.4723 164.199 li
80.9045 156.78 li
73.4723 164.212 li
.5994 0 .5994 .223914 cmyk
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: FAAAAA+MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginGIBHKR+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7BA8F425ECEA255C7F445C46B341EF282C71048D555A5D598E89496E7235E7E5E61E755DE1DD927709B69AF39C5FFA2F961FADB> |-/P <1C60D8A8C9B7876E235FC614E63EC6DDBF5153E7285DD594B4A59D9CFED19B0A38B3CB0F4F897304E6BAD55EEDCCDEBF2A9B8B5B52460C00D9A306CF6EA51A21B19E9B3BA70F64BDE9BAA61A839E8FB51C8743E8A82D68D8F927748ABF13844E9C386BBD03D70DAF9D> |-/T <1C60D8A8C9B7AA91799D50BEC147DC15659E7F5EC34F826A01358F7E6EB53E56E1831B0550D2FE4055F5> |-systemdict /gcheck known {setglobal} if end {end} ifendGIBHKR+MyriadPro-Regular /Encoding getdup 49 /one putdup 80 /P putdup 84 /T putpop%ADOEndSubsetFont
/GIBHKR+MyriadPro-Regular*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /seven 9{/.notdef}rp /A 2{/.notdef}rp /D 8{/.notdef}rp /M /N /.notdef /P 3{/.notdef}rp /T 3{/.notdef}rp /X 20{/.notdef}rp /m /n 145{/.notdef}rp]GIBHKR+MyriadPro-Regular nfGIBHKR+MyriadPro-Regular*1 [8 0 0 -8 0 0 ]msf21.1699 172.258 mo(PMT1)[4.15998 6.35201 3.97515 0 ]xshGIBHKR+MyriadPro-Regular*1 [0 -8 -8 0 0 0 ]msf68.2886 215.419 mo(PMT2)[-4.15997 -6.35199 -3.97516 0 ]ysh229.408 465.88 mo
228.408 465.88 li
228.408 437.114 li
221.61 426.207 li
204.706 426.207 li
196.463 437.636 li
196.463 464.88 li
229.408 464.88 li
229.408 465.88 li
228.408 465.88 li
229.408 465.88 li
229.408 466.88 li
194.463 466.88 li
194.463 436.99 li
203.682 424.207 li
222.72 424.207 li
230.408 436.542 li
230.408 466.88 li
229.408 466.88 li
229.408 465.88 li
0 0 0 .8 cmyk
f
0 0 0 1 cmyk
GIBHKR+MyriadPro-Regular*1 [8 0 0 -8 0 0 ]msf169.722 445.544 mo(10X)sh163.202 455.144 mo(0.25 NA)shgsave
197.328 501.126 mo
226.295 501.126 li
226.295 470.279 li
197.328 470.279 li
197.328 501.126 li
clp
198.79 501.125 mo
197.328 499.761 li
197.328 499.761 li
207.528 488.828 li
210.263 488.828 li
198.79 501.125 li
219.977 478.416 mo
219.996 475.464 li
224.833 470.279 li
226.295 471.643 li
226.295 471.644 li
219.977 478.416 li
0 0 0 .558431 cmyk
f
grestore
179.816 499.517 mo
179.816 500.017 li
179.431 500.017 179.069 499.867 178.765 499.633 cv
178.232 499.22 177.815 498.566 177.437 497.716 cv
176.32 495.169 175.614 490.749 175.61 485.683 cv
175.611 481.825 176.026 478.335 176.712 475.772 cv
177.057 474.489 177.465 473.438 177.951 472.669 cv
178.195 472.285 178.459 471.968 178.765 471.733 cv
179.069 471.5 179.431 471.349 179.816 471.35 cv
180.201 471.349 180.563 471.5 180.866 471.733 cv
181.4 472.146 181.817 472.8 182.195 473.651 cv
183.312 476.197 184.018 480.617 184.022 485.683 cv
184.021 489.54 183.605 493.031 182.919 495.594 cv
182.575 496.877 182.166 497.928 181.681 498.697 cv
181.437 499.082 181.173 499.398 180.866 499.633 cv
180.563 499.867 180.201 500.017 179.816 500.017 cv
179.816 499.517 li
179.816 499.017 li
179.943 499.016 180.08 498.973 180.259 498.838 cv
180.571 498.606 180.945 498.079 181.28 497.312 cv
182.303 495.006 183.026 490.645 183.022 485.683 cv
183.023 481.9 182.609 478.474 181.954 476.03 cv
181.628 474.81 181.237 473.835 180.836 473.204 cv
180.637 472.888 180.436 472.662 180.259 472.528 cv
180.08 472.393 179.943 472.35 179.816 472.35 cv
179.689 472.35 179.551 472.393 179.372 472.528 cv
179.061 472.76 178.686 473.287 178.352 474.054 cv
177.329 476.36 176.606 480.721 176.61 485.683 cv
176.609 489.466 177.023 492.892 177.678 495.336 cv
178.004 496.556 178.395 497.531 178.796 498.162 cv
178.995 498.478 179.196 498.704 179.372 498.838 cv
179.551 498.973 179.689 499.016 179.816 499.017 cv
179.816 499.517 li
f
165.749 494.017 mo
142.15 494.017 li
139.309 494.017 136.984 491.692 136.984 488.85 cv
136.984 480.683 li
136.984 477.841 139.309 475.517 142.15 475.517 cv
165.749 475.517 li
168.59 475.517 170.915 477.841 170.915 480.683 cv
170.915 488.85 li
170.915 491.692 168.59 494.017 165.749 494.017 cv
cp
.75 1 0 0 cmyk
@
174.059 484.767 mo
174.059 487.804 173.355 490.267 172.487 490.267 cv
171.62 490.267 170.916 487.804 170.916 484.767 cv
170.916 481.729 171.62 479.267 172.487 479.267 cv
173.355 479.267 174.059 481.729 174.059 484.767 cv
.746 .985 .01 .002 cmyk
f
211.538 488.828 mo
210.263 488.828 li
219.977 478.416 li
219.968 479.772 li
211.538 488.828 li
207.528 488.828 mo
183.927 488.828 li
183.989 487.816 184.022 486.764 184.022 485.683 cv
184.02 483.693 183.91 481.802 183.71 480.086 cv
211.971 480.183 li
212.281 466.88 li
220.051 466.88 li
219.996 475.464 li
207.528 488.828 li
182.925 488.828 mo
181.323 488.828 li
176.61 485.677 li
176.609 484.856 176.629 484.051 176.666 483.269 cv
181.229 480.078 li
182.702 480.083 li
182.907 481.788 183.022 483.686 183.022 485.683 cv
183.023 486.764 182.989 487.818 182.925 488.828 cv
175.614 485.012 mo
174.878 484.52 li
175.637 483.989 li
175.626 484.326 175.619 484.667 175.614 485.012 cv
220.063 464.88 mo
212.328 464.88 li
212.696 449.046 li
213.936 426.207 li
219.083 426.207 li
220.166 448.801 li
220.063 464.88 li
218.987 424.207 mo
214.044 424.207 li
216.668 375.858 li
218.987 424.207 li
.517647 .44 0 0 cmyk
f
220.051 466.88 mo
212.281 466.88 li
212.328 464.88 li
220.063 464.88 li
220.051 466.88 li
219.083 426.207 mo
213.936 426.207 li
214.044 424.207 li
218.987 424.207 li
219.083 426.207 li
.517647 .439216 0 .321569 cmyk
f
210.263 488.828 mo
207.528 488.828 li
219.996 475.464 li
219.977 478.416 li
210.263 488.828 li
.516724 .440938 0 .223914 cmyk
f
183.927 488.828 mo
182.925 488.828 li
182.989 487.818 183.023 486.764 183.022 485.683 cv
183.022 483.686 182.907 481.788 182.702 480.083 cv
183.71 480.086 li
183.91 481.802 184.02 483.693 184.022 485.683 cv
184.022 486.764 183.989 487.816 183.927 488.828 cv
176.61 485.677 mo
175.614 485.012 li
175.619 484.667 175.626 484.326 175.637 483.989 cv
176.666 483.269 li
176.629 484.051 176.609 484.856 176.61 485.677 cv
.517647 .439216 0 .4 cmyk
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: FAAAAA+MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginGIBHKR+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/C <1C60D8A8C9B7F7BFE3B180C56AF03E84FDFE1B891BF0BDDE2A383D526FA5F5DFDA781369FECA62B706458FA8E5D416C9F1A54D53D39B454D4B4A5AA674C37D8866FD97E642C991F09AC3F4EB6888A09F29DD6765382F269ACB77ACC8CCEE228E09F4DDA531160B9495579459312C02> |-/O <1C60D8A8C9B624F9257693AA048B36DADFC211B8894F7756BF33A04DC83C0B4C52C95D9CA2F8E3A6F92259B8EFC855E76BA25786D3A63D8F17EAD5862D556BB80BAD93C174B7B09C35FAA86BAE6F39D6EA2536F89B8D1AF08D0CC0EEA8CAA25E3645138071> |-/S <1C60D8A8C9B7AED8026F44F98B5D343CF5F718671081699D2B46DCF54CF76FF9B03E38534A56DDD76042189F93F8B774AE25457E79E0931E7CC91B3416B8D2743A464B4F7D3888B59520A4D7BED8CEC539F5E5E499CAD80C04BFC86A41D5A6CBC9CE2E30F7E0C1B9BCAFAE809AF1F5D7B9CCA4394DD69583644C37B0A21F2A0B6101430602AFDF4CB529AFA5EE04> |-systemdict /gcheck known {setglobal} if end {end} ifendGIBHKR+MyriadPro-Regular /Encoding getdup 67 /C putdup 79 /O putdup 83 /S putpop%ADOEndSubsetFont
/GIBHKR+MyriadPro-Regular*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /seven 9{/.notdef}rp /A /.notdef /C /D 8{/.notdef}rp /M /N /O /P 2{/.notdef}rp /S /T 3{/.notdef}rp /X 20{/.notdef}rp /m /n 145{/.notdef}rp]GIBHKR+MyriadPro-Regular nfGIBHKR+MyriadPro-Regular*1 [8 0 0 -8 0 0 ]msf140.261 506.714 mo(CMOS)sh242.678 505.616 mo
242.678 511.616 li
236.678 511.616 li
.487 .442 .42 .065 cmyk
@
[12.871 12.871 ] 0 dsh
223.808 511.616 mo
127.276 511.616 li
@
[] 0 dsh
120.84 511.616 mo
114.84 511.616 li
114.84 505.616 li
@
[11.284 11.284 ] 0 dsh
114.84 494.333 mo
114.84 432.272 li
@
[] 0 dsh
114.84 426.63 mo
114.84 420.63 li
120.84 420.63 li
@
[12.871 12.871 ] 0 dsh
133.711 420.63 mo
230.243 420.63 li
@
[] 0 dsh
236.678 420.63 mo
242.678 420.63 li
242.678 426.63 li
@
[11.284 11.284 ] 0 dsh
242.678 437.914 mo
242.678 499.975 li
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: FAAAAA+MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginGIBHKR+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenleft <1C60D8A8C9B84E0A9BE0F5E7F6AA80EB6F9C55A29BCD0A78FDE2EC81535B0D09BBC78AC2BA9C07B9D73B61D64C4620A3AEABD78638094F1483737E> |-/parenright <1C60D8A8C9B84E0A9BE0F5DB50450E7143AED3F02065BA0D25AF71E0BCF32D4511B91D5597E045F9FD9A2805B5D6939BFA0E875F4D520B550E8B48> |-/hyphen <1C60D8A8C9B8391507657C5BAF19A31D4BBDD7E17920BDF55F2EA39E0E> |-/colon <1C60D8A8C9B89DB76243278294073DF27A9ADD8222B5097AC6A3E22E587D3574F5072250914DDCC5E04E3EDB44D54B18B83B1EE44F01C7874CE8FA1E1AF1563D3F6642E27731D7977655D045> |-/R <1C60D8A8C9B7818197CA8C10BDEF079227EB9AB9E6BB1BEBF94303949A9D57DC48BE0CBABA6B2F38795EB0B14AF8016F1F5E72EA92249DAC1B3C3DF395AC3F2C437EECDF2E212D25ADD95C1165C0D3093ED6DD657D8595753AC4F714ACD0CC3DE31498EBF4AEAD79663C716613A4CC76F86E7772DA8716237A83> |-/a <1C60D8A8C9B75946235635433B29C4699E5BB968A8BA3D0F55A80D871529080759C0CDF379D5184F9A3784D6112A1855FA838838A79A40DD8E07761F331C19B53C7606AF4EA6D9A7EAC88C9EB5B9FA25429E627C2F8212354B31EFF6364651E800F137946FD4AD5A8AE5B9B862128451BA473B4ED4014A7282C197B458EF6D0953A59D2ACEC98F551B66786C4D40133930952374B3C1A5A8C8798787EF5202E8F3ADE313D6302E5C519AA42A989B817E6D8192CF5EF2CD6CD4984E7982> |-/b <1C60D8A8C9B7E2CE70CA6E765DDA192DA64FC714614EAF23EFFC73F2CF8FD4BBDD6A61C7FE92AF61D1BFC11D63548D1609F9F85A0D680385CBE8C84A668BFA6146323D9D2541EC558B240DCF187D91C1135ACA399AB1FAE34E71AB6B7E411A298572092FCAA6A83A1E8FFCA5A4BF27E564A90D232452C7B04D4AB6E60AB12852CDB4D1F8562087142C004A8A50BD905407E2D3718EDD0BE48734D3D4332C529D958B185D3DD09AF29F738FA257B40FB967F3AA407DC947E49A2DCEA8> |-/d <1C60D8A8C9B7E7C1D822193538A56B13640F1C3EE80C415BBD7C96E2BF73396DB0D9C9230D7704B1D4903E1B0E823160B234020A503047A686661C34B5004CDCF7754772CF263A11D6B8FC7868BB12CD6A915ACD880C8B0638C394417FA37BE535ADC2EFE334704B66B55FC93ABE48255DC988A5DFABA294BF5BF2E02BE2314DCE6531FAA5DCB4D56DF6C62A6139D41B024DA04272B4B444C44FEBCD2F65888A63654699808BEDAA> |-/e <1C60D8A8C9B7A66F849A7DACE33AE03A5167970A4DE9C90504F4520F0891C1CEFDC5EC433B4601849E9654689D7448590A637F83BA4F01959F755A2F630819E1906BD0F4301719375E5DFA3A56016CFFB8EE2D259D14AD43BDDC106E233AD7F63594F85F5BF67F34F4> |-/g <1C60D8A8C9B7ECD94DE1A189191AD5F2D9264E9E45AEA34722A859C7504E8D97FB0852E8940544E35015B96B3C7AA54938A54723C0E4A71029E5594A50991BABBD94FDBC8D1E5DDED1F363991C7609EC867CCC25A521EF6A413502066DB09479E8F4B993E7F844D779A9AFB8AB9687200FE387E3551F1773DE5D9F10DA80D59E08BEE08403E910634E27946219DA1BBF443E80E9984193EB84E7D437F4095A5144CA76F8FF03D6A699455EF07F603D9FCA60043DFAA7AFC2989812BB08CB6F7DC24FB5126C6BA75AEB70AE20AF4CB666DA1ED7DC913A5745B8A3C5FC8F54> |-/i <1C60D8A8C9B88055FF27B3934D040E8DA53B043AB8CFF68E8D519FEAB9D5A4874DC9B90E63751BC12355D9D8276E2A66CDDB9CE6DD75534C5A550BE990A2B15CF4B9FA0C60C03D9F761CF6CBFF51A513DE> |-/l <1C60D8A8C9B87EB6C12D27FEBAAD9108B57B5CEF2AA76DC2FD884A8623> |-/o <1C60D8A8C9B7967683396363C51B2F1979461F3A00FDA36B3FB5488A82D64C89239EA1345F90503AC4C4937CA1D31AE0456BBFC2CD7E6DF92400B629A703DCCA1CE977B1CE09DA127A889A27E67B6982945251> |-/p <1C60D8A8C9B7E2CE2B5D9AEC775B38F2FC9D79EBC145C31F687483AFB9425A746B3BD7EE9055225E02124098D25B9CF96FA1051D1E04801504B9A2644D4EDA37278A874E72EE68CB4BF43DAEF5F603031626DA7EA34D8AEBCA2BE067F349B81CB3CF23097AE4AA47ED040466C2627C304F1CEA4C41EB090E70EFAF813E729DF2CD046B5547886AEE74294DF2AF6781AD20571E13346A26CAD62FB20DB9FC6337027CFBBA> |-/r <1C60D8A8C9B825FA276057E42F8B6B56BE61CF56C49E848F1F8C0DBB4CC355A060580D0A93A5AC675863E967C6888348BB6A0307CAE2C7E5A0C04CCE8153CABABF82A896EFF75F39B554C74CA1E2126AA0E73BE8B772EBBEE30A71972C630D7D24526AEEFC04035142C31FA6B3B108962236> |-/s <1C60D8A8C9B70FAD6EE207EDD4A39945302A2E564F23C4D27749C61E21753BE88CFF7A0956D53F7567F17B33997DFB279D2DA3FF33E69440E3AF5B718BD5672EE12CCB4611CEF40CED8D19E55F6899503A963AB3F9097F71464F7FF3D8B745212EC94C43D9C54742872717> |-/t <1C60D8A8C9B821B35FABC50DF2817A1BBC93B89A8B6DB7012C573A5B06A78E6721B35869D6CEA1BEC8F4D7ADE4AD26D55A0B6AD62D85D42D1321EDA432B8F1448E7C88822F3224E1F6F992B7D2C5602E3B1569A5778D> |-/u <1C60D8A8C9B794D34CED683BC0F75FB25BE8ECA5D4F8D235649E81E6A62DD6E8467166462C4D4F8F41F04B52D63863D672C5433416D6DF2E3C32BCEEA94FF3BC9046373D2B57D2890F7578E8913662C9F65FD95A5790251E118509816817E1CD6A7C5BE0B48DC194> |-/v <1C60D8A8C9B75A17982D11DC3FC677436DFDC6EA949B3A8A476902498B78CD729866CE567C88B5C34208EAE301B621840AC4E9FB5564F4B9810C75BCD81668335F45F1BB1571F13F2D708D47> |-systemdict /gcheck known {setglobal} if end {end} ifendGIBHKR+MyriadPro-Regular /Encoding getdup 40 /parenleft putdup 41 /parenright putdup 45 /hyphen putdup 58 /colon putdup 82 /R putdup 97 /a putdup 98 /b putdup 100 /d putdup 101 /e putdup 103 /g putdup 105 /i putdup 108 /l putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 118 /v putpop%ADOEndSubsetFont
/GIBHKR+MyriadPro-Regular*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven 2{/.notdef}rp /colon 6{/.notdef}rp /A /.notdef /C /D 8{/.notdef}rp /M /N /O /P /.notdef /R /S /T 3{/.notdef}rp /X 8{/.notdef}rp /a /b /.notdef /d /e /.notdef /g /.notdef /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v 137{/.notdef}rp]GIBHKR+MyriadPro-Regular nfGIBHKR+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf250.595 480.523 mo(Calibration Module)[6.87602 5.78394 2.83191 2.80792 6.828 3.86395 5.73593 3.97192 2.80792 6.58795 6.65991 2.54407 9.72003 6.58795 6.76794 6.61194 2.83191 0 ]xsh250.595 494.923 mo(\(Removeable: not present during in-vivo imaging\))[3.40796 6.50392 6.01208 10.008 6.50397 5.65204 6.01208 5.78394 6.828 2.83191 6.01208 2.48401 2.54407 6.65991 6.58795 3.97192 2.54407 6.828 3.80392 6.01208 4.75195 6.01208 6.61072 3.97192 2.54407 6.76794 6.61194 3.97195 2.80792 6.65991 6.70807 2.54407 2.80792 6.65991 3.62408 5.77203 2.80792 5.65204 6.58795 2.54407 2.80792 10.008 5.78394 6.63605 2.80792 6.65991 6.70807 0 ]xsh217.755 375.858 mo
215.563 375.858 li
215.563 285.525 li
217.755 285.525 li
cp
.861 .734 0 0 cmyk
f
[] 0 dsh
215.151 285.524 mo
215.151 315.259 li
1 1 .25 .25 cmyk
@
218.251 285.524 mo
218.251 315.259 li
@
317.893 248.001 mo
317.893 228.813 333.223 213.258 352.135 213.258 cv
371.046 213.258 386.376 228.813 386.376 248.001 cv
386.376 267.189 371.046 282.745 352.135 282.745 cv
333.223 282.745 317.893 267.189 317.893 248.001 cv
0 0 0 .4 cmyk
ef
2 lw
317.893 248.001 mo
317.893 228.813 333.223 213.258 352.135 213.258 cv
371.046 213.258 386.376 228.813 386.376 248.001 cv
386.376 267.189 371.046 282.745 352.135 282.745 cv
333.223 282.745 317.893 267.189 317.893 248.001 cv
cp
1 1 0 0 cmyk
@
343.534 230.801 mo
339.234 230.801 li
339.234 226.501 li
343.534 226.501 li
cp
0 0 0 .9 cmyk
ef
347.834 230.801 mo
343.534 230.801 li
343.534 226.501 li
347.834 226.501 li
cp
0 0 0 .4 cmyk
ef
343.534 235.101 mo
339.234 235.101 li
339.234 230.801 li
343.534 230.801 li
cp
0 0 0 .7 cmyk
ef
347.834 235.101 mo
343.534 235.101 li
343.534 230.801 li
347.834 230.801 li
cp
0 0 0 .8 cmyk
ef
352.135 226.501 mo
356.435 226.501 li
356.435 230.801 li
352.135 230.801 li
cp
0 0 0 .9 cmyk
ef
352.135 230.801 mo
356.435 230.801 li
356.435 235.101 li
352.135 235.101 li
cp
0 0 0 .4 cmyk
ef
347.834 226.501 mo
352.135 226.501 li
352.135 230.801 li
347.834 230.801 li
cp
0 0 0 .7 cmyk
ef
347.834 230.801 mo
352.135 230.801 li
352.135 235.101 li
347.834 235.101 li
cp
0 0 0 .8 cmyk
ef
360.734 230.801 mo
365.034 230.801 li
365.034 235.101 li
360.734 235.101 li
cp
0 0 0 .3 cmyk
ef
356.435 230.801 mo
360.735 230.801 li
360.735 235.101 li
356.435 235.101 li
cp
0 0 0 .9 cmyk
ef
360.734 226.501 mo
365.034 226.501 li
365.034 230.801 li
360.734 230.801 li
cp
0 0 0 .8 cmyk
ef
356.435 226.501 mo
360.735 226.501 li
360.735 230.801 li
356.435 230.801 li
cp
ef
334.935 226.501 mo
339.235 226.501 li
339.235 230.801 li
334.935 230.801 li
cp
0 0 0 .3 cmyk
ef
334.935 230.801 mo
339.235 230.801 li
339.235 235.101 li
334.935 235.101 li
cp
0 0 0 .9 cmyk
ef
330.635 226.501 mo
334.935 226.501 li
334.935 230.801 li
330.635 230.801 li
cp
0 0 0 .8 cmyk
ef
330.635 230.801 mo
334.935 230.801 li
334.935 235.101 li
330.635 235.101 li
cp
0 0 0 .3 cmyk
ef
369.334 230.801 mo
365.034 230.801 li
365.034 226.501 li
369.334 226.501 li
cp
0 0 0 .9 cmyk
ef
373.635 230.801 mo
369.334 230.801 li
369.334 226.501 li
373.635 226.501 li
cp
0 0 0 .7 cmyk
ef
369.334 235.101 mo
365.034 235.101 li
365.034 230.801 li
369.334 230.801 li
cp
ef
373.635 235.101 mo
369.334 235.101 li
369.334 230.801 li
373.635 230.801 li
cp
0 0 0 .8 cmyk
ef
360.734 239.401 mo
365.034 239.401 li
365.034 243.701 li
360.734 243.701 li
cp
0 0 0 .9 cmyk
ef
356.435 239.401 mo
360.735 239.401 li
360.735 243.701 li
356.435 243.701 li
cp
0 0 0 .4 cmyk
ef
360.734 235.101 mo
365.034 235.101 li
365.034 239.401 li
360.734 239.401 li
cp
0 0 0 .7 cmyk
ef
356.435 235.101 mo
360.735 235.101 li
360.735 239.401 li
356.435 239.401 li
cp
0 0 0 .8 cmyk
ef
352.135 243.701 mo
347.834 243.701 li
347.834 239.401 li
352.135 239.401 li
cp
0 0 0 .9 cmyk
ef
352.135 239.401 mo
347.834 239.401 li
347.834 235.101 li
352.135 235.101 li
cp
0 0 0 .4 cmyk
ef
356.435 243.701 mo
352.135 243.701 li
352.135 239.401 li
356.435 239.401 li
cp
0 0 0 .7 cmyk
ef
356.435 239.401 mo
352.135 239.401 li
352.135 235.101 li
356.435 235.101 li
cp
0 0 0 .8 cmyk
ef
343.534 239.401 mo
339.234 239.401 li
339.234 235.101 li
343.534 235.101 li
cp
0 0 0 .3 cmyk
ef
347.834 239.401 mo
343.534 239.401 li
343.534 235.101 li
347.834 235.101 li
cp
0 0 0 .9 cmyk
ef
343.534 243.701 mo
339.234 243.701 li
339.234 239.401 li
343.534 239.401 li
cp
0 0 0 .8 cmyk
ef
347.834 243.701 mo
343.534 243.701 li
343.534 239.401 li
347.834 239.401 li
cp
ef
369.334 243.701 mo
365.034 243.701 li
365.034 239.401 li
369.334 239.401 li
cp
0 0 0 .3 cmyk
ef
369.334 239.401 mo
365.034 239.401 li
365.034 235.101 li
369.334 235.101 li
cp
0 0 0 .9 cmyk
ef
373.635 243.701 mo
369.334 243.701 li
369.334 239.401 li
373.635 239.401 li
cp
0 0 0 .8 cmyk
ef
373.635 239.401 mo
369.334 239.401 li
369.334 235.101 li
373.635 235.101 li
cp
0 0 0 .3 cmyk
ef
334.935 239.401 mo
339.235 239.401 li
339.235 243.701 li
334.935 243.701 li
cp
0 0 0 .9 cmyk
ef
330.635 239.401 mo
334.935 239.401 li
334.935 243.701 li
330.635 243.701 li
cp
0 0 0 .1 cmyk
ef
334.935 235.101 mo
339.235 235.101 li
339.235 239.401 li
334.935 239.401 li
cp
0 0 0 .7 cmyk
ef
330.635 235.101 mo
334.935 235.101 li
334.935 239.401 li
330.635 239.401 li
cp
0 0 0 .8 cmyk
ef
334.935 243.701 mo
339.235 243.701 li
339.235 248.001 li
334.935 248.001 li
cp
0 0 0 .3 cmyk
ef
334.935 248.001 mo
339.235 248.001 li
339.235 252.301 li
334.935 252.301 li
cp
0 0 0 .9 cmyk
ef
330.635 243.701 mo
334.935 243.701 li
334.935 248.001 li
330.635 248.001 li
cp
0 0 0 .8 cmyk
ef
330.635 248.001 mo
334.935 248.001 li
334.935 252.301 li
330.635 252.301 li
cp
ef
343.534 243.582 mo
347.834 243.582 li
347.834 247.882 li
343.534 247.882 li
cp
0 0 0 .3 cmyk
ef
343.534 247.882 mo
347.834 247.882 li
347.834 252.182 li
343.534 252.182 li
cp
0 0 0 .9 cmyk
ef
339.234 243.582 mo
343.534 243.582 li
343.534 247.882 li
339.234 247.882 li
cp
0 0 0 .8 cmyk
ef
339.234 247.882 mo
343.534 247.882 li
343.534 252.182 li
339.234 252.182 li
cp
ef
352.135 243.582 mo
356.435 243.582 li
356.435 247.882 li
352.135 247.882 li
cp
0 0 0 .3 cmyk
ef
352.135 247.882 mo
356.435 247.882 li
356.435 252.182 li
352.135 252.182 li
cp
0 0 0 .9 cmyk
ef
347.834 243.582 mo
352.135 243.582 li
352.135 247.882 li
347.834 247.882 li
cp
0 0 0 .8 cmyk
ef
347.834 247.882 mo
352.135 247.882 li
352.135 252.182 li
347.834 252.182 li
cp
ef
360.734 243.701 mo
365.034 243.701 li
365.034 248.001 li
360.734 248.001 li
cp
0 0 0 .3 cmyk
ef
360.734 248.001 mo
365.034 248.001 li
365.034 252.301 li
360.734 252.301 li
cp
0 0 0 .9 cmyk
ef
356.435 243.701 mo
360.735 243.701 li
360.735 248.001 li
356.435 248.001 li
cp
0 0 0 .3 cmyk
ef
356.435 248.001 mo
360.735 248.001 li
360.735 252.301 li
356.435 252.301 li
cp
0 0 0 .5 cmyk
ef
369.334 248.001 mo
365.034 248.001 li
365.034 243.701 li
369.334 243.701 li
cp
0 0 0 .9 cmyk
ef
373.635 248.001 mo
369.334 248.001 li
369.334 243.701 li
373.635 243.701 li
cp
0 0 0 .6 cmyk
ef
369.334 252.301 mo
365.034 252.301 li
365.034 248.001 li
369.334 248.001 li
cp
0 0 0 .7 cmyk
ef
373.635 252.301 mo
369.334 252.301 li
369.334 248.001 li
373.635 248.001 li
cp
0 0 0 .8 cmyk
ef
334.935 252.301 mo
339.235 252.301 li
339.235 256.601 li
334.935 256.601 li
cp
0 0 0 .3 cmyk
ef
334.935 256.601 mo
339.235 256.601 li
339.235 260.901 li
334.935 260.901 li
cp
0 0 0 .9 cmyk
ef
330.635 252.301 mo
334.935 252.301 li
334.935 256.601 li
330.635 256.601 li
cp
0 0 0 .3 cmyk
ef
330.635 256.601 mo
334.935 256.601 li
334.935 260.901 li
330.635 260.901 li
cp
0 0 0 .5 cmyk
ef
343.534 252.182 mo
347.834 252.182 li
347.834 256.482 li
343.534 256.482 li
cp
0 0 0 .3 cmyk
ef
343.534 256.482 mo
347.834 256.482 li
347.834 260.782 li
343.534 260.782 li
cp
0 0 0 .9 cmyk
ef
339.234 252.182 mo
343.534 252.182 li
343.534 256.482 li
339.234 256.482 li
cp
0 0 0 .8 cmyk
ef
339.234 256.482 mo
343.534 256.482 li
343.534 260.782 li
339.234 260.782 li
cp
0 0 0 .3 cmyk
ef
352.135 252.182 mo
356.435 252.182 li
356.435 256.482 li
352.135 256.482 li
cp
0 0 0 .9 cmyk
ef
352.135 256.482 mo
356.435 256.482 li
356.435 260.782 li
352.135 260.782 li
cp
0 0 0 .4 cmyk
ef
347.834 252.182 mo
352.135 252.182 li
352.135 256.482 li
347.834 256.482 li
cp
0 0 0 .7 cmyk
ef
347.834 256.482 mo
352.135 256.482 li
352.135 260.782 li
347.834 260.782 li
cp
0 0 0 .8 cmyk
ef
360.734 256.601 mo
356.434 256.601 li
356.434 252.301 li
360.734 252.301 li
cp
0 0 0 .3 cmyk
ef
365.034 256.601 mo
360.734 256.601 li
360.734 252.301 li
365.034 252.301 li
cp
0 0 0 .9 cmyk
ef
360.734 260.901 mo
356.434 260.901 li
356.434 256.601 li
360.734 256.601 li
cp
0 0 0 .8 cmyk
ef
365.034 260.901 mo
360.734 260.901 li
360.734 256.601 li
365.034 256.601 li
cp
0 0 0 .3 cmyk
ef
369.334 256.601 mo
365.034 256.601 li
365.034 252.301 li
369.334 252.301 li
cp
ef
373.635 256.601 mo
369.334 256.601 li
369.334 252.301 li
373.635 252.301 li
cp
0 0 0 .9 cmyk
ef
369.334 260.901 mo
365.034 260.901 li
365.034 256.601 li
369.334 256.601 li
cp
0 0 0 .8 cmyk
ef
373.635 260.901 mo
369.334 260.901 li
369.334 256.601 li
373.635 256.601 li
cp
ef
343.534 265.082 mo
339.234 265.082 li
339.234 260.782 li
343.534 260.782 li
cp
0 0 0 .9 cmyk
ef
347.834 265.082 mo
343.534 265.082 li
343.534 260.782 li
347.834 260.782 li
cp
0 0 0 .4 cmyk
ef
343.534 269.382 mo
339.234 269.382 li
339.234 265.082 li
343.534 265.082 li
cp
0 0 0 .7 cmyk
ef
347.834 269.382 mo
343.534 269.382 li
343.534 265.082 li
347.834 265.082 li
cp
0 0 0 .8 cmyk
ef
352.135 260.782 mo
356.435 260.782 li
356.435 265.082 li
352.135 265.082 li
cp
0 0 0 .9 cmyk
ef
352.135 265.082 mo
356.435 265.082 li
356.435 269.382 li
352.135 269.382 li
cp
0 0 0 .4 cmyk
ef
347.834 260.782 mo
352.135 260.782 li
352.135 265.082 li
347.834 265.082 li
cp
0 0 0 .7 cmyk
ef
347.834 265.082 mo
352.135 265.082 li
352.135 269.382 li
347.834 269.382 li
cp
0 0 0 .8 cmyk
ef
360.734 265.082 mo
365.034 265.082 li
365.034 269.382 li
360.734 269.382 li
cp
0 0 0 .3 cmyk
ef
356.435 265.082 mo
360.735 265.082 li
360.735 269.382 li
356.435 269.382 li
cp
0 0 0 .9 cmyk
ef
360.734 260.782 mo
365.034 260.782 li
365.034 265.082 li
360.734 265.082 li
cp
0 0 0 .8 cmyk
ef
356.435 260.782 mo
360.735 260.782 li
360.735 265.082 li
356.435 265.082 li
cp
ef
334.935 260.782 mo
339.235 260.782 li
339.235 265.082 li
334.935 265.082 li
cp
0 0 0 .3 cmyk
ef
334.935 265.082 mo
339.235 265.082 li
339.235 269.382 li
334.935 269.382 li
cp
0 0 0 .9 cmyk
ef
330.635 260.782 mo
334.935 260.782 li
334.935 265.082 li
330.635 265.082 li
cp
0 0 0 .8 cmyk
ef
330.635 265.082 mo
334.935 265.082 li
334.935 269.382 li
330.635 269.382 li
cp
0 0 0 .3 cmyk
ef
369.334 265.082 mo
365.034 265.082 li
365.034 260.782 li
369.334 260.782 li
cp
0 0 0 .9 cmyk
ef
373.635 265.082 mo
369.334 265.082 li
369.334 260.782 li
373.635 260.782 li
cp
0 0 0 .3 cmyk
ef
369.334 269.382 mo
365.034 269.382 li
365.034 265.082 li
369.334 265.082 li
cp
0 0 0 .7 cmyk
ef
373.635 269.382 mo
369.334 269.382 li
369.334 265.082 li
373.635 265.082 li
cp
0 0 0 .8 cmyk
ef
1 lw
213.517 389.657 mo
213.333 389.25 li
212.438 388.729 li
211.082 388.259 li
209.415 387.49 li
208.561 386.917 li
207.662 385.495 li
206.808 384.495 li
206.195 383.137 li
205.833 382.37 li
205.121 382.257 li
204.697 381.781 li
204.007 381 li
203.251 379.611 li
202.649 378.346 li
202.348 376.86 li
202.308 376.484 li
202.011 375.899 li
202.14 374.936 li
202.243 374.592 li
201.542 374.146 li
201.287 373.509 li
201.231 372.992 li
201.434 372.282 li
202.026 371.72 li
203.08 371.131 li
203.838 370.812 li
204.334 371.091 li
205.915 370.635 li
206.996 370.281 li
208.055 370.166 li
210.036 369.952 li
212.062 369.733 li
213.951 369.529 li
215.731 369.621 li
216.698 369.944 li
217.875 370.054 li
219.522 370.636 li
220.985 370.81 li
222.039 371.076 li
223.139 371.337 li
223.745 371.638 li
224.741 371.906 li
225.879 371.783 li
226.825 371.587 li
227.959 370.995 li
228.622 370.313 li
229.361 369.482 li
230.222 368.498 li
230.895 367.908 li
231.468 367.237 li
232.434 366.803 li
233.846 366.651 li
235.576 366.464 li
236.805 366.754 li
237.7 367.361 li
238.473 368.122 li
238.593 369.236 li
238.279 370.161 li
237.985 370.85 li
237.965 371.403 237.813 371.834 237.625 371.861 cv
237.423 371.89 237.118 371.461 236.963 370.773 cv
236.678 370.835 236.393 370.897 236.108 370.959 cv
235.475 371.496 li
235.425 371.576 235.355 371.685 235.271 371.813 cv
234.954 372.296 234.913 372.318 234.923 372.354 cv
235.002 372.63 237.503 371.691 240.213 371.811 cv
242.308 371.904 242.265 372.529 244.582 372.602 cv
246.796 372.672 247.172 372.112 248.518 372.521 cv
250.151 373.017 250.14 374.005 251.822 374.92 cv
253.556 375.865 254.556 375.352 257.429 375.693 cv
260.447 376.05 260.105 376.706 263.233 377.247 cv
267.177 377.93 268.022 376.939 272.195 377.772 cv
273.642 378.06 274.706 378.412 276.032 378.85 cv
278.628 379.708 280.405 380.295 282.417 381.605 cv
284.232 382.788 285.394 384.01 286.907 385.599 cv
287.642 386.372 288.84 387.641 290.146 389.498 cv
291.528 391.462 293.026 393.592 293.853 396.678 cv
294.228 398.078 294.771 400.102 294.503 402.694 cv
294.257 405.083 293.434 406.88 294.369 407.803 cv
294.617 408.049 295.175 408.27 296.29 408.71 cv
296.946 408.969 297.1 408.985 297.998 409.331 cv
298.757 409.623 299.328 409.875 299.653 410.019 cv
300.838 410.544 300.825 410.607 301.575 410.926 cv
302.689 411.399 302.817 411.3 304.037 411.774 cv
304.526 411.965 305.088 412.236 306.211 412.778 cv
307.607 413.451 308.305 413.787 308.913 414.157 cv
309.459 414.49 310.216 414.954 311.087 415.719 cv
311.742 416.291 312.173 416.781 312.868 417.57 cv
313.586 418.384 313.946 418.792 314.268 419.276 cv
314.633 419.823 315.319 420.874 315.64 422.409 cv
315.786 423.105 315.802 423.646 315.812 424.001 cv
315.831 424.726 315.853 425.978 315.322 427.336 cv
315.285 427.428 315.326 427.319 314.152 429.444 cv
313.746 430.177 313.609 430.43 313.323 430.772 cv
313.166 430.959 312.699 431.49 311.873 431.981 cv
310.983 432.511 310.399 432.565 309.356 432.873 cv
308.764 433.047 309.068 432.996 306.271 434.135 cv
303.961 435.076 303.35 435.275 302.519 435.407 cv
301.729 435.532 301.788 435.43 300.956 435.576 cv
299.557 435.822 299.208 436.143 297.886 436.403 cv
296.87 436.603 296.983 436.431 295.783 436.631 cv
294.43 436.855 294.107 437.103 292.885 437.378 cv
292.024 437.57 292.098 437.467 289.641 437.728 cv
286.85 438.025 286.927 438.14 285.796 438.143 cv
284.079 438.148 283.937 437.883 282.933 438.082 cv
282.505 438.167 281.715 438.377 281.057 438.161 cv
280.887 438.104 280.692 438.01 280.37 437.987 cv
279.97 437.96 279.785 438.073 279.636 437.942 cv
279.487 437.813 279.454 437.512 279.569 437.331 cv
279.726 437.083 280.105 437.136 280.578 437.097 cv
281.335 437.037 281.42 436.818 282.287 436.603 cv
283.267 436.36 283.368 436.588 284.456 436.43 cv
285.256 436.315 285.249 436.185 286.986 435.662 cv
287.729 435.438 288.438 435.224 289.35 435.035 cv
290.639 434.766 290.705 434.884 292.1 434.614 cv
293.415 434.359 293.41 434.244 294.65 434.028 cv
295.665 433.852 295.718 433.921 296.867 433.727 cv
298.091 433.52 298.991 433.281 299.183 433.229 cv
299.989 433.011 300.02 432.954 301.767 432.392 cv
302.766 432.071 303.732 431.776 303.884 431.73 cv
305.765 431.156 305.915 431.152 306.408 430.9 cv
307.173 430.508 306.964 430.439 308.164 429.72 cv
309.223 429.085 309.525 429.055 310.04 428.526 cv
310.268 428.293 310.493 427.967 310.943 427.313 cv
311.425 426.614 311.666 426.263 311.772 425.985 cv
312.125 425.052 311.968 424.182 311.908 423.866 cv
311.798 423.297 311.6 422.904 311.395 422.497 cv
311.104 421.918 310.809 421.533 310.239 420.795 cv
309.804 420.233 309.586 419.951 309.329 419.686 cv
308.751 419.093 308.48 419.004 307.401 418.16 cv
306.378 417.361 306.576 417.404 306.067 417.066 cv
305.248 416.522 305.015 416.595 303.819 415.947 cv
303.057 415.534 303.205 415.533 302.258 415.001 cv
301.693 414.683 300.996 414.295 300.077 413.936 cv
299.275 413.624 299.362 413.746 298.501 413.425 cv
297.487 413.047 297.35 412.871 295.951 412.277 cv
295.496 412.084 295.597 412.139 294.485 411.692 cv
292.32 410.822 292.406 410.801 292.197 410.763 cv
290.941 410.536 290.356 411.742 287.857 413.485 cv
286.006 414.776 286.18 414.217 283.003 416.179 cv
281.9 416.86 281.066 417.429 279.65 417.988 cv
279.276 418.135 278.407 418.461 277.322 418.7 cv
275.399 419.124 273.849 419.044 271.823 418.885 cv
264.233 418.29 263.033 417.61 262.35 417.146 cv
261.258 416.405 260.519 415.557 260.063 414.952 cv
1 /0 /CSD get_res sepcs
1 sep
@
221.097 394.028 mo
221.162 394.631 li
221.732 396.071 li
222.714 397.044 li
224.088 397.835 li
225.307 398.031 li
226.354 397.918 li
226.739 397.219 li
226.669 396.57 li
226.609 396.013 li
226.22 395.398 li
225.847 394.5 li
225.514 393.55 li
225.368 392.205 li
225.173 390.396 li
225.33 389.722 li
@
232.573 401.562 mo
231.972 401.339 231.449 401.239 231.064 401.19 cv
230.781 401.155 230.49 401.155 229.906 401.155 cv
229.365 401.155 229.214 401.179 229.082 401.298 cv
228.833 401.524 228.846 401.93 228.851 402.071 cv
228.861 402.357 228.959 402.576 229.023 402.694 cv
@
232.877 402.437 mo
232.643 402.328 232.291 402.192 231.846 402.121 cv
231.14 402.008 230.59 402.122 230.383 402.172 cv
229.919 402.284 229.541 402.376 229.236 402.724 cv
229.183 402.784 228.742 403.286 228.877 403.778 cv
228.983 404.161 229.326 404.126 229.816 404.692 cv
230.204 405.14 230.34 405.567 230.431 405.534 cv
230.548 405.492 230.269 404.812 230.536 404.561 cv
230.713 404.394 231.071 404.474 231.435 404.624 cv
@
205.247 376.238 mo
203.538 377.071 201.141 378.489 198.783 380.847 cv
196.902 382.727 195.633 384.619 194.798 386.098 cv
@
205.862 378.627 mo
204.889 379.232 202.676 380.794 201.24 383.765 cv
200.075 386.176 199.966 388.388 199.99 389.539 cv
@
205.717 377.278 mo
204.275 377.917 201.784 379.25 199.517 381.859 cv
197.545 384.128 196.557 386.424 196.061 387.871 cv
@
206.087 379.057 mo
205.763 379.314 203.891 380.85 203.632 383.597 cv
203.388 386.188 204.756 387.997 205.039 388.355 cv
@
223.248 363.561 mo
220.942 364.285 218.289 365.328 215.481 366.856 cv
213.96 367.684 211.853 368.821 210.639 369.667 cv
@
209.646 369.774 mo
210.11 368.828 210.883 367.323 211.579 366.277 cv
213.126 363.953 214.818 362.211 216.27 360.95 cv
@
208.391 369.91 mo
208.867 368.758 209.334 367.525 209.777 366.213 cv
210.425 364.295 210.932 362.47 211.331 360.77 cv
@
217.994 362.612 mo
217.168 363.276 216.334 363.97 215.493 364.696 cv
213.527 366.394 211.729 368.092 210.087 369.758 cv
@
259.4 411.072 mo
259.535 411.9 259.663 412.564 259.752 413.005 cv
259.943 413.952 260.09 414.548 260.009 415.386 cv
259.935 416.164 259.735 416.411 259.56 416.53 cv
259.319 416.693 259.062 416.654 258.71 416.621 cv
257.877 416.544 257.063 416.469 256.35 416.657 cv
256.079 416.729 255.275 416.942 254.878 417.619 cv
254.637 418.028 254.776 418.211 254.491 418.683 cv
254.42 418.801 254.06 419.396 253.373 419.607 cv
253.064 419.702 252.71 419.647 252.004 419.536 cv
251.398 419.441 251.148 419.325 250.965 419.21 cv
250.728 419.061 250.572 418.892 250.487 418.8 cv
250.241 418.53 250.119 418.396 250.148 418.277 cv
250.265 417.803 252.017 417.84 251.541 417.907 cv
251.541 417.907 252.35 417.921 252.958 417.754 cv
253.256 417.672 253.663 417.503 254.107 417.119 cv
@
254.864 415.504 mo
254.779 415.648 254.521 416.039 254.013 416.253 cv
253.874 416.312 253.475 416.473 253.022 416.36 cv
252.501 416.23 252.484 415.881 252.015 415.666 cv
251.388 415.378 250.677 415.664 250.174 415.865 cv
249.312 416.211 249.319 416.555 248.615 416.691 cv
247.954 416.817 247.374 416.624 247.168 416.555 cv
246.764 416.421 246.464 416.228 246.028 415.948 cv
245.872 415.849 245.678 415.707 245.292 415.423 cv
244.635 414.94 244.614 414.898 244.62 414.859 cv
244.674 414.503 246.941 414.49 246.965 414.679 cv
246.979 414.786 246.278 414.963 246.28 414.972 cv
246.283 414.982 247.168 414.533 248.303 414.462 cv
248.931 414.422 249.068 414.534 249.664 414.46 cv
250.296 414.382 250.795 414.175 251.12 414.011 cv
@
250.17 412.508 mo
249.948 412.662 249.651 412.82 249.28 412.896 cv
248.558 413.045 247.948 412.807 247.833 412.76 cv
247.298 412.543 247.213 412.286 246.928 412.347 cv
246.928 412.347 246.781 412.379 246.212 413.008 cv
245.887 413.272 245.421 413.58 245.11 413.42 cv
244.802 413.261 244.792 412.72 244.749 412.729 cv
244.7 412.738 244.629 413.438 245.003 413.742 cv
245.217 413.918 245.445 413.853 246.01 413.891 cv
246.465 413.921 246.829 413.997 247.056 414.053 cv
@
225.749 393.831 mo
227.064 394.98 228.925 396.335 229.702 396.863 cv
230.857 397.647 231.992 398.309 233.451 399.637 cv
234.205 400.324 234.88 401.036 234.785 401.163 cv
234.744 401.218 234.581 401.126 233.807 400.841 cv
232.865 400.494 232.947 400.572 232.66 400.43 cv
232.202 400.203 232.051 400.033 231.669 400.003 cv
231.509 399.99 231.286 399.976 231.105 400.117 cv
230.885 400.289 230.807 400.63 230.885 400.996 cv
@
254.595 412.001 mo
253.285 411.571 252.21 411.174 251.444 410.879 cv
247.684 409.434 245.804 408.711 244.913 408.01 cv
244.308 407.534 243.528 406.811 242.424 406.803 cv
241.869 406.799 241.733 406.98 240.868 406.971 cv
240.289 406.965 239.575 406.958 238.882 406.544 cv
238.543 406.343 238.585 406.268 237.966 405.842 cv
237.422 405.467 237.15 405.279 236.849 405.214 cv
236.396 405.116 236.015 405.242 235.253 405.494 cv
234.438 405.763 234.504 405.881 234.043 405.945 cv
233.372 406.039 233.022 405.817 232.747 406.085 cv
232.568 406.26 232.533 406.532 232.504 406.753 cv
232.444 407.223 232.592 407.529 232.538 407.551 cv
232.486 407.572 232.322 407.282 231.888 406.392 cv
231.407 405.404 231.341 405.213 231.423 404.999 cv
231.533 404.713 231.833 404.58 232.149 404.439 cv
232.357 404.348 232.534 404.303 233.279 404.211 cv
233.839 404.141 234.247 404.104 234.834 404.043 cv
235.145 404.01 235.398 403.982 235.56 403.964 cv
@
213.517 389.657 mo
214.269 389.845 215.394 390.045 215.833 390.052 cv
216.723 390.066 217.49 390.079 218.234 389.646 cv
218.934 389.239 219.328 388.604 219.413 388.673 cv
219.478 388.724 219.191 389.037 219.144 389.593 cv
219.11 389.999 219.246 390.033 219.245 390.521 cv
219.243 391.108 219.046 391.199 219.132 391.613 cv
219.182 391.851 219.291 392.009 219.508 392.323 cv
219.783 392.719 219.955 392.969 220.264 393.133 cv
220.647 393.337 220.784 393.165 221.442 393.381 cv
221.739 393.478 221.947 393.59 222.12 393.683 cv
222.462 393.867 222.587 393.986 223.217 394.456 cv
223.833 394.917 223.819 394.883 224.218 395.193 cv
224.582 395.476 224.875 395.724 225.077 395.9 cv
@
211.003 381.053 mo
210.94 381.236 210.674 381.287 210.553 381.31 cv
210.363 381.347 210.211 381.314 210.026 381.275 cv
209.857 381.238 209.71 381.207 209.554 381.117 cv
209.225 380.928 209.081 380.612 209.032 380.501 cv
208.918 380.242 208.964 380.144 208.92 379.47 cv
208.872 378.719 208.792 378.485 208.899 378.429 cv
209.025 378.364 209.318 378.592 209.446 378.857 cv
209.512 378.993 209.529 379.168 209.563 379.516 cv
209.586 379.75 209.581 379.85 209.64 380.018 cv
209.696 380.18 209.744 380.316 209.859 380.366 cv
210.029 380.438 210.149 380.239 210.397 380.284 cv
210.53 380.309 210.616 380.39 210.713 380.482 cv
210.793 380.556 211.081 380.827 211.003 381.053 cv
.367 .938 .785 .582 cmyk
f
.5 lw
211.003 381.053 mo
210.94 381.236 210.674 381.287 210.553 381.31 cv
210.363 381.347 210.211 381.314 210.026 381.275 cv
209.857 381.238 209.71 381.207 209.554 381.117 cv
209.225 380.928 209.081 380.612 209.032 380.501 cv
208.918 380.242 208.964 380.144 208.92 379.47 cv
208.872 378.719 208.792 378.485 208.899 378.429 cv
209.025 378.364 209.318 378.592 209.446 378.857 cv
209.512 378.993 209.529 379.168 209.563 379.516 cv
209.586 379.75 209.581 379.85 209.64 380.018 cv
209.696 380.18 209.744 380.316 209.859 380.366 cv
210.029 380.438 210.149 380.239 210.397 380.284 cv
210.53 380.309 210.616 380.39 210.713 380.482 cv
210.793 380.556 211.081 380.827 211.003 381.053 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
211.992 381.78 mo
211.193 380.916 li
210.242 379.906 li
209.35 378.704 li
.367 .938 .785 .582 cmyk
f
211.992 381.78 mo
211.193 380.916 li
210.242 379.906 li
209.35 378.704 li
1 /0 /CSD get_res sepcs
1 sep
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: FAAAAA+MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginGIBHKR+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/f_f <1C60D8A8C9B7F44A9B78E03EE45F2B2984722BF1168F3CDD5F206452B36B6B6D8940466ECD12F13DDFB8898BCBCC655260BA4532AECE9117631ECE35EADBA36A2D141816DED0FA62F98B601C46EBE2F2A03FCC0E006BA2E9F5773F2BC4A399D01A925E2FFDB35F0850F92C1C42DC718B62F2F719D8A9B99848BDEB4528D49FE7FFFF8F592FB2202D4BF19B93861DDEDC89284A792CF8E7032CBF52CA1572EFF51AD3B0BBBE> |-/B <1C60D8A8C9B79D2DDA73CBA562CD775BD8708DCD8E9BDBAA2B04F229B401DEE6F3B16867C2DF5ADCE1003CD3347893BC921649BA15F586CE896AA4574C760FC8E6103F6E803B90F385A0C480DB58BCBE731BDB2E07BC90ABF0D34F2A76BE68E603CE526C97809060252D094726469AFC1EBB9A96BC6EF2899E99E4F5DB78806C2904DB0391B53A557D2D0810C07323B9E1172D4C9C1C76664A570F8B40F0C97E620BA6C7D2A77D969C62FB9AD1905E1BB7E1B20BAB18A4402CB21DF7B3B6CBAF50B782> |-/E <1C60D8A8C9B7AFA9BC4F00998616708AD319D68861297151CC95B7F0DB510272712476AFC1F2C943C567A57033FD1283345EB0696AEA3E2C01AFF042> |-/c <1C60D8A8C9B77BBBDC3E0FE76B551D0A83C57AF160CCFFDAD04ED1BC9C857824C5D2B529D52FE463A93EC53B358141F6EED9D8424AE5C5437D71AE2A700C140AC6F47A146152237D6C7AD4A89BE54FF3BB17> |-/h <1C60D8A8C9B790A816BA887E1EEB5E8F3559B4B8B5AF3C1F8CE7A16D3E22CB112738E5F8A1CE5D2620C4575F3210C0FAB8897CBBEEEBEDB653A75B1382B689444B1091E64895264926A7E71A69D151CC5CB184DF1BCC2A12C3> |-/x <1C60D8A8C9B74CDDCE74E258E27BD7DEC2AC84271E6C98FD20D770EC885A525E4B13092058B38B9B747AE3A87B933BF37DF3F8E7EFA8C4210149FC385EC70F16C2002D34A7ABEA15A278EE67C471DDDC14F1EC07F268C4F538F0F4A7CE565CD5EA> |-systemdict /gcheck known {setglobal} if end {end} ifendGIBHKR+MyriadPro-Regular /Encoding getdup 33 /f_f putdup 66 /B putdup 69 /E putdup 99 /c putdup 104 /h putdup 120 /x putpop%ADOEndSubsetFont
/GIBHKR+MyriadPro-Regular*1 [32{/.notdef}rp /space /f_f 6{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven 2{/.notdef}rp /colon 6{/.notdef}rp /A /B /C /D /E 7{/.notdef}rp /M /N /O /P /.notdef /R /S /T 3{/.notdef}rp /X 8{/.notdef}rp /a /b /c /d /e /.notdef /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v /.notdef /x 135{/.notdef}rp]GIBHKR+MyriadPro-Regular nfGIBHKR+MyriadPro-Regular*1 [8 0 0 -8 0 0 ]msf213.45 71.4183 mo(Beam Expander)[4.36806 4.00806 3.85596 6.672 1.69604 3.93604 3.70398 4.552 3.85596 4.43994 4.51195 4.00806 0 ]xsh92.8502 37.4023 mo(Dichr)sh110.61 37.4023 mo(oic)sh350.354 126.042 mo(Pinhole)[4.12799 1.87195 4.43994 4.43994 4.39197 1.88794 0 ]xsh344.274 79.1544 mo(Di!r)sh358.714 79.1544 mo(action Orders)[3.85596 3.68799 2.64795 1.87195 4.39197 4.43994 1.69604 5.51196 2.53677 4.51196 4.00806 2.61597 0 ]xsh1.001 lw
8 ml
367.527 83.021 mo
340.042 110.506 li
.746 .676 .668 .898 cmyk
@
343.094 111.673 mo
336.768 113.78 li
338.875 107.454 li
cp
ef
0 0 0 1 cmyk
%ADOBeginSubsetFont: FAAAAA+MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginGIBHKR+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/f_i <1C60D8A8C9B7B07F53A1558F68652DF6013355F9F1E87F51401AE8ECD01A640086BEE1033CF3BB3831C899F6AF52CD0D02B6946DDDE924F27473B8E54A3ED8BEE9B02A2E6BFE94F31C79E2E1614FBCE3CB362A12E60E538207D3> |-/eight <1C60D8A8C9B7BA8F623D810BCFAA507145907C5CE267E1350D60B99FB83360B9E418EEF33F40B734B75BFBE6DAE00350080324D22E09819157F56C3498805EEE190EF947AB83476F1D4FC339843D8C045234EE3B827FB17C588192D89FFB06D6D03AC8113F28483BF637C5F5F907CA05174518198A496FB11E55DF17FFA613836880E923CA4F1CD03C2C1F01E8FAB822761BA89069A0E246AA0C0A767C75D6F77380EE9D70FDB4339BAA9BBC908F597DF575A207C1A2AF7628FEDCC33DB1F6B809> |-/F <1C60D8A8C9B7544E530E823999841DA2F8EC66E8BCF65E1A153B8F64C14E4D433BE34E80499C2222430927749B4F85A3CF0F> |-/G <1C60D8A8C9B67B1690716FF04D0147EA5B51F2B65610FAF234C3B18546B21D3F6F92D294E6EC2B21999B1FED2DAC6EDC52B42B78221AD7265CB9722E26890713820AC3CF72AA36DA53BE7D477EB132919417E817793987155D1BFBFA170ADE07C15A513B743AB17B84741CBB0BB1F3B8087B3CA8CD5F587C0628B9BEC5ACA38B81696B9E718212159FC34AA218A60D02D05E5A350CADBB646ECC> |-systemdict /gcheck known {setglobal} if end {end} ifendGIBHKR+MyriadPro-Regular /Encoding getdup 34 /f_i putdup 56 /eight putdup 70 /F putdup 71 /G putpop%ADOEndSubsetFont
/GIBHKR+MyriadPro-Regular*1 [32{/.notdef}rp /space /f_f /f_i 5{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight /.notdef /colon 6{/.notdef}rp /A /B /C /D /E /F /G 5{/.notdef}rp /M /N /O /P /.notdef /R /S /T 3{/.notdef}rp /X 8{/.notdef}rp /a /b /c /d /e /.notdef /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v /.notdef /x 135{/.notdef}rp]GIBHKR+MyriadPro-Regular nfGIBHKR+MyriadPro-Regular*1 [8 0 0 -8 0 0 ]msf221.534 299.488 mo(28G )sh221.534 309.088 mo(cannula)sh223.246 350.872 mo(  MMF)sh223.246 360.472 mo(120um "ber)sh302.484 196.038 mo
322.752 216.306 li
.746 .676 .668 .898 cmyk
@
324.474 211.805 mo
327.581 221.135 li
318.251 218.026 li
cp
ef
0 0 0 1 cmyk
GIBHKR+MyriadPro-Regular*1 [10 0 0 -10 0 0 ]msf391.24 219.992 mo(2D phase)sh391.24 231.992 mo(modula)sh423.359 231.992 mo(tion)sh391.24 243.992 mo(pattern)[5.69 4.77994 3.30994 3.24994 5.01007 3.30997 0 ]xsh1 lw
302.484 189.633 mo
302.484 192.172 301.514 194.231 300.317 194.231 cv
299.121 194.231 298.151 192.172 298.151 189.633 cv
298.151 187.093 299.121 185.035 300.317 185.035 cv
301.514 185.035 302.484 187.093 302.484 189.633 cv
cp
1 1 0 0 cmyk
@
0 0 0 1 cmyk
GIBHKR+MyriadPro-Regular*1 [8 0 0 -8 0 0 ]msf240.017 211.806 mo(Tube)[3.61595 4.40796 4.552 0 ]xsh240.017 221.406 mo(lens)sh1.001 lw
309.699 285.502 mo
322.932 259.602 li
.746 .676 .668 .898 cmyk
@
318.107 259.376 mo
326.086 253.431 li
325.942 263.38 li
cp
ef
0 0 0 1 cmyk
%ADOBeginSubsetFont: FAAAAA+MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginGIBHKR+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/f <1C60D8A8C9B8469EE0EEFD5AEC6CA97A72064EDB5F8138E6D1529C05D71AD800DE9767801FDF375EF8CD5D17CF8177ABFE55C13157A524A3264793E34DF67E6CC595BF4246BA776AF32A10AFD87F61B0A56EEC2C24F2F2> |-systemdict /gcheck known {setglobal} if end {end} ifendGIBHKR+MyriadPro-Regular /Encoding getdup 102 /f putpop%ADOEndSubsetFont
/GIBHKR+MyriadPro-Regular*1 [32{/.notdef}rp /space /f_f /f_i 5{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight /.notdef /colon 6{/.notdef}rp /A /B /C /D /E /F /G 5{/.notdef}rp /M /N /O /P /.notdef /R /S /T 3{/.notdef}rp /X 8{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v /.notdef /x 135{/.notdef}rp]GIBHKR+MyriadPro-Regular nfGIBHKR+MyriadPro-Regular*1 [10 0 0 -10 0 0 ]msf264.59 279.736 mo(reference)[3.16995 5.01007 2.79007 5.01007 3.16998 5.01007 5.54993 4.41995 0 ]xsh264.59 291.736 mo(beam)sh264.59 303.736 mo(\("x)sh277.14 303.736 mo(ed phase\))sh94.7339 494.865 mo
121.741 494.865 li
121.741 469.73 li
94.7339 469.73 li
cp
/1 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 0 524.436 ]ct
[27.0069 0 0 25.1351 94.7339 29.5706 ]ct
snap_to_device
<<
/T 1
/W 299 
/H 275 
/M[299 0 0 -275 0 275 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
JcUH(k5kS_ScR=Ao`G-rrs&H+rr`9&rWE0'quc]qf`?[*VZHGlrri?+rWW<(rrW0%rri6%r;uluLB2u-
q#U-irri?+rWW<(rrW0%rri6%p]@f'JcXF'rW;isrrrB)r!!*-rt#):rs&B)rs8W.rWN6'rWN6*rri<)
rri?(quZ6dJcVhOrW;isrrrB)r!!*-rt#):rs&B)!XK&8!!W?)rr`6'rs&K+rWW<)rr`0#RfS3DrW;ru
rWE!"rs&K.rWN6'rWN6-rs\l:rseu6rWN6)qum$%rWW<,rri<+q?Hs&rr`0&rrURKJcXI(p]CEsq?6g&
rs/N+rr`6'rsA]6rXSr;rs8T,rrr<'rr`6(rs/Q,rWi9(rri?(r!!*%rW.TOZiTt)r;us#rri?(rWW6*
rXAf5rs&H*r!!$$rW`B0rs/H+qucj"rsJc3rWW<+rs/N-r<3*.rso&5rWN6&YlXCrrrADequcp#r;us#
rri?(rWW6*rXAf5rs&H*r!!$$rW`B0rs/H+qucj"rsJc3rWW<+rs/N-r<3*.rso&5rWN6&h>tRrrrBh8
h#[HUrWN-$rri?(rW`B+rri6(rrr6(rW`B-rWW<)rrrB)rrr<)q??m'rX&N2rXAf1r!NH/rri?.":5;<
"U4l1rrrB(rrW3&P6%lgr;us$qucs%rr`6)rrrE*r!*0)q?R!(rs/N,!!E?+"U4l.rrr<)q??m'rX&N2
rXAf1r!NH/rri<-rs/Q-rWiH,rWE0%rr^%;K)krS!!E-%qucs(rs8T/r<3*+rsSi2rWW<,r!<<-rW`B/
r!!*.rt#):rs/Q4rXo/>rWrN2rt#)?rri?.rX/Z0rsAZ3rrrE,rWiH+rWiH-rrrB(rrhlnZiQp&rr`0%
qucs(rs8T/r<3*+rsSi2rWW<,r!<<-rW`B/r!!*.rt#):rs/Q4rXo/>rWrN2rt#)?rri?.rX/Z0rsAZ3
rrrE,rWiH+rWiH-rrrB(rrgaNJcYcMp]CHurWrE*rs&K.rX/Z5r!<<2rsJ`5rsA]2rX]#BrX8`2rri<*
rseuErX]#4rsJ`@rtGAArsA]:rX/Z5rs&B+rri<.rt#,GrYGM>rWiH1rs8T,rs&K*quVWScN3eBrri<,
r!!*)rs/N1rsS`1rs\o7rX8`4rs8T7rtGA>rs/Q,rW`B3rtkYFrrrE0rYGMIrsf/A#mh.SrX/Z5rs&B+
rri<.rt#,GrYGM>rWiH1rs8T,rs&K*quX5+U&k#jrri<,r!!*)rs/N1rsSc2":,DE$4?b?rsA]2rX]#B
rX8`2rri<*rseuErX]#4rsJ`@rtGAArsA]:rX/Z5rs&B+rri<.rt#,GrYGM>rWiH1rs8T,rs&K*quYgX
JcYiOrW<$!rW<*%rrrB(rri?*rX&T/rX&N2rX/Z5rsJ`2rsAN/rsAZ9rs\l6rsSi5rWN6*rs/N/r<iN3
rsJ`5rt>>ArWrN4rsSf4rs/Q3q@*?=rtkY@rX&W4rWW<,rri<&q?)r_d/j4Jr;lm!rr`9)rWE0'rrrB.
rs&H/r<rT3rsSi6rWrN1q?m6/rXf)<rX/Z5rsAZ-rs&K.rWrK1!"/]5rsJ`5rt>>ArWrN4rsSf4rs/Q3
q@*?=rtkY@r<iN-rs/Q,rW;ou_#^S;quZm#quZm#rW;oup]UR*":>JE$jlq?rrrE6rX]#:rt>;ArsA]5
rX&T1rX/Z2rsJ`3r<WB-rs\oArY>GHrX8`:rtGAIrs/Q1rWrN5rt#)=rt58?r!<96r<N<2rso&5rWE0'
rs8T/rs&H(o)XFDr;lftrr`0#rr`6%q?-KqrXJl7rs\l5rrrE6rX]#:rt>;ArsA]5rX&T1rX/Z2rsJ`3
r<WB-rs\oArY>GHrX8`:rtGAIrs/Q1rWrN5rt#)=rt58?rWrN0rXo)6rXJl;rs&H)rri?-rWiH-rW8bo
ciNtEq?-Wsqucm#rX8`8rX8`7q@!<3rWiH/rs&H*rs&K/rXSr8q?d-*rrrE0r!360rX]#CrXSl5rX/Z/
rs&H/rtk\DrXJl9rt#)?rsSf:q?[**rri<'rrr<)rri6'rr^[MUB12mq?-Wsqucm#rX8`8rX8`7q@!<3
rWiH/rs&H*rs&K/rXSr8q?d-*rrrE0r!360rX]#CrXSl5rX/Z/rs&H/rtk\DrXJl9rt#)?rsSf:q?[**
rri<'rrr<)rri6'rr`9%JcYTHq?$["rW`B*o`G'rrX/Z7rXAf?ruh:brtGDBrXJl8rs\l7rs8W8rYkeL
rX/Z3rsSf8rsA]4rXAf6rs8T/rs\l<rt>><r!WN.rX&T5rsJc7!"Af4rXSrDrY,;Irser6rs&K2r!36+
rWiH+rWrN1rs8T+`W?)>m/b?1q?$["rW`B*o`G'rrX/Z7rXAf?ruh:brtGDBrXJl8rs\l7rs8W8rYkeL
rX&W3!XT5BrXJl6rsJ`6rsJc3rWiH3rXf)BrsAT2rrrB.rs\o7rXA`3rXSrDrY,;Irser6rs&K2r!36+
rWiH+rWrN1rs8T+h#ZdArrBY3quZWqr!*'$rrW3&rWN9/!X];CrW`B/rWrN8s!%FRrsJc9rX]#:r!<-'
rs8T.rs8N3rsJc:rY#5>rsSf3rtkYFrs\o8rX]#Art#)<rttbIrYYYFrsAZ?rtPG:rsSi<rXJl5rsJ`1
rsel6!XAr;rsJc0rs&H*q?"S9_?'Q9p]LEuqucs#rr`6(rsJc6rW`B/rWrN8s!%FRrsJc9rX]#:r!<-'
rs8T.rs8N3rsJc:rY#5>rsSf3rtkYFrs\o8rX]#Art#)<rttbIrYYYFrsAZ?rtPG:rsSi<rXJl5rsJ`1
rsel6rs/N1rrrE,rWN'!nH#'ZrW<*#rrVuurrW*#rrrE)rWN6'r!36-rsJ`/rsSf:rso&<r!`T2rWiH2
rs/N4rsJc8rX/Z1r!N?0rt##9rtGDJrXAf<rXo/=rtGABrs\oIrYGMFru:qTrso&<rX]#:rW`B/rtbSN
rs\o4rWrN3rt,/?rs\l9rrrE*rWW<,rri<+rr\qqliI(errN-$q#gWuqucs&rr`6'rr`0(rs8W3rWW<0
rX]#=rsel7rs8T/rsSi3rXJl7rser7rs/H/r!WN8r!`T=rtbSBrt,2B";)%N',1?Urs\oIrYGMFru:qT
rso&<rX]#:rW`B/rtbSNrs\o4rWrN3rt,/?rs\l9rrrE*rWW<,rri<+rr^OI^B+<8rrN-$q#gWuqucs&
rr`6'rr`0(rs8W3rWW<0rX]#=rsel7rs8W0":#;B#7(5;rsJc8rX/Z1r!N?0rt##9rtGDJrXAf<rXo/=
rtGABrs\oIrYGMFru:qTrso&<rX]#:rW`B/rtbSNrs\o4rWrN3rt,/?rs\l9rrrE*rWW<,rri<+rr`-!
Q3$pcqucs#rW3$#rW<-%rW<!"rrW0%rs&K.rWN6)r!365rYPSDr!EB.r!*0+rri<.rtPJLrW`B/rXSr7
rs8T3rs\o;rY#5NrtYMBrso#?rs8W2rWiH1rser@rso&8rX8`1rsS`1rX/c:%1`FLrXf)>rsJ`2rs\o:
r\sikrWiH-rs/N2rseu5rWrN-rrT5%kQ1V`qucs#rW3$#rWE*#qucs#rWE0)rs/N+rrr<*rt,/Grsel4
rs/H+rs/Q,rX/Z>rtkY=rsAZ7rsA]2rX8`7rso#@!ZW0p!#>JBrso#?rs8W2rWiH1rser@rso&8rX8`1
rsS`1rX8`8rt#)?rso&9rWrN4rserdrtPG;rs&K.rX8`8rs/N/rrrE(fE&bgrrW*$rrW$!quZ]srWN6*
r!!*'rs8T2rs&K4rY5AArYG\I%L`aNrs/Q1rsJ`3rs8N/rt>5<rt55Ks!%IYrX]#:rt#):rs8N/rs&H+
rs8N1rt58IrXSr=rso#7rs&K0rWrN.rXSrBrser8r<iN3rt#,8rYPSIrWW<,rsJ`3rso&7rWN6)rr\Sg
rrW*$rrW$!!!<*#q?-^"rs&B)rri?-rX/Z0rserArserDrso&;rWiH0rsJ`3rs8N/rt>5<rt55Ks!%IY
rX]#:rt#):rs8N/rs&H+rs8N1rt58IrXSr=rso#7rs&K0rWrN.rXSrBrser8r<iN3rt#,8rYPSIrWW<,
rsJ`3rso&7rWN6)rr]S.jT5AarWW<,rr`*%rWW3&rrrE.rWiH0rs8T.rri?*rX8`4rsSf5rs/N0rs\oK
r"&f9rXSr4r!EB.rsJ`;rso#>rsel2rsSi;rXAf;rsJ`6rser7rs\o:rX/Z5rso#=rtGDPrZ;(Qrt>;@
rs/H1r!NH.rs\l7rs8W.rWN62rX/Z5rs8T.rri?*rWN6)rr`0#jT2jlrri<)rs/Q+q?Hp&qum$'rs8T/
rsA]2rW`B*rrrB0rsA]5rX/Z1rX&T5ruV(Krs\l:rs&B-rs/Q2rXo/?rXf)=r!360rt#);rt#,:rXAf9
rX/Z6rser7rsSi:rX]#BruD"ZrtGDFrXSr5r!`K1rs&K3rX8`3rrrB)rso#8rsSi4rrrT1"9\l3rWN6)
rr`0#ScSimr!!$+rWN6*rsAZ/r!36-rsSf4rsJc7rX&T8rs/N0rseu9rX&T1rY#/KrX]#FrsJ`0r<3*'
rs8N1rsAZ=rt5)3rsJ`5rs\f2rs&H.rseu?rX&T/rs/N-rt58Arsf/A%1NgYrY#5>rX/Z2rsAZ4rseu<
rYYYLrsAZ0r!WN3rt>;:rri?(rWN6)rrW0%r;sh:hZ<`Yr!!$+rWN6*rsAZ/r!36-rsSf4rsJc7rX&T8
rs/N0rseu9rX&T1rY#/KrX]#FrsJ`0r<3*'rs8N1rsAZ=!"f2Cq?Hs,rX8`7r!<<,rWrN5rt55:rs&K.
rW`B7rt#)=rseu=rY#5>rX/Z2rsAZ4rseu<rYYYLrsAZ0r!WN3rt>;:rri?(rWN6)rrW0%r;uEg[fQC.
rr`9*rXAf7rsJ`8rsA]/rWiH/rWiH/rsJ`1rrrE1rZ;(fq[*B3#mpS<rsAZ8rt>>ArYGMGrtkYErs8W/
rWrN2rso#;rt>;ArsS`0rsA]7rX8`3rs&H-rsSf3rsSi5rX8`8rs\l6rs/Q0rXJl7rsSfDrtkYDrs/Q3
rYb_QrsJ`6rsA]7rWN?1$4d(GrsA]6r!W?(q?-a!rWCRLf)bdNrr`9*rXAf7rsJ`8rsA]/rWiH/rWiH/
rsJ`1rrrE1rZ;(fq?m6/rX/Z3rX]#Arso#Drt58IrXSr6rs&H.rsJc9rXJl?rX]#:r!36.rser8rs8W/
rWiH2rWrN3rsAZ4rseu:rX/Z1rs8T5rsJc6rYb_PrXJl4rsSfDrttbCrXAf5rser2rsJ`8rsA]6r!W?(
q?-a!rWE0$XTAD'rri<&rs&K,rWrN1ru:qMrs&K.rX/Z5rWrN5rsAZ.rsJcGrZ2"Nrs/N/rso&>rXSr4
rWW<-rsJ`Hs!7UerYPSCrsJ`1rsA]9rXf)GrY5AJrsJ`>s!7U\rY,;=rt,/8rs\l9rtYPOrYtkHrs/N/
rsA]2rXSlQrX/Z:rZ;(Lrs\l=rseu:rYPSHrt,/<rs8?(rsA]2rW`B-rri<)rr`9&rWW<)rW9A+rrN*$
rri<&rs&K,rWrN1ru:qMrs&K.rX/Z5rWrN5rsAZ.rsJcGrZ2"Nrs/N/rso&>rXSr4rWW<-rsJ`Hs!7Ue
rYPSCrsJ`1rsA]9rXf)GrY5AJrsJ`>s!7U\rY,;=rt,/8rs\o:":Z(\)&`Dmrseu5rWrN1rs8T6r?_FM
rt,/Nrso&;rXo/>rs\lCrt58BrXAf4pBU^)rs8T.rs/Q,rWW<(rrW0'rri<&hZ;.+rWE0'rW<*(rrrB-
rsA]ErY#58rs/N1rsSf3rseu7rWW</ruD"Yrt589rWrN6rt#)=rs&H+rs8W3rZ;(bruh=X";_IT$4?b;
rsA]9rXf)GrY5AJrsJ`>s!7U\rY,;=rt,/8rs\l9rtYPOrYtkHrs/N/rsA]2rXSlQrX/Z:rZ;(Lrs\l=
rseu:rYPSHrt,/<rs8?(rsA]2rW`B-rri<)!!<9)!Wr?)rri<&Z2st,rWiH3rWN6*rrrB7rtGD?q?R!*
rso#=!"f8E$k3+Crs\o?rWrN/rsAZ:r=/`6rs8N1rs\lPrt>>@rXAf<rsJ`1r<WB2rt55?rt#,IrYPSH
rser<rso&>rWrN:rXo/Hrt#)9rrrE,rX8`<rsAZ:ruqD&rXJl=rY#>G&eG$Sr!r`8rZ_@Rrser8rt#)9
rrrE-rWN6*rsJ`1rrr<'r<<0*rrrB)rrTh6q#UKsrWiH3rWN6*rrrB7rtGD?q?R!*rso#=rt58>rX8`7
rt>;:rs/Q1rXo)<rX8`3r!WN5rZqLVrser9rt,2;rWiB-rXAf=rXSr=ru(ePrt58?rXT&?%M&OMrWrN:
rXo/Hrt#)9rrrE,rX8`<rsAZ:ruqD&rXJl=rY,;Ert,)<rs\lNrt,2>rX8`:rX/Z/rs/N+rs&K1rWiH,
quls%rWiH,rWN6&klK'1rrW3'rXo/ErWW<.rs8T>r=/`7rseu7rWrN3rX]#Mrt557r<WB3rsJc3r!NH5
rWiH/r!NQ4#nHtFrsel4rtPJDrXSr:rsJ`8r!360rtbSBrs&K>rX&T7rt557rs\l4rsJc9rX\r2rWiH4
rsS`8rsSf3rsJ`8rseu:rX8`5rs/N?rt589rWrN9rWrN/rrrB,rsA]7rW`B+rs8T/rs&3#rs&K)\,lU2
rri<5rtPG9rsA]2rYGGArX8o=%1*=Hrs8W4rX]#Mrt557r<WB3rsJc3r!NH5rWiH/r!WN2rXSr;r!EB;
rt#)=rs\o7rXSi2rsSiBrXAf2rtkY@rso&@rW`B2rWrN2rso#=r<<0*rseu9r"&f8rWrN2rXSr;rs\l7
rsJc2rYYYIrs/N/rt559rs/Q-rWiH0rser3rrrE.rWiH-pB:L#rrU1@p&Y-or<*$,rs\l7rs/Q,rWiH3
rser8r<`B*rX8`;rs&H-rseu:rWiH/r!NH-rs\].rt58IrWiH/rrrB,rseu<rX8`:rs\lBrsAZ5rt58A
rX8`4rso#Dr=8f5rsJ`6r=])Ars\f/rsJc2rX&T4rrrB+rs\l>rso&8rXA`2rX8`8rs&H+rso#;rsAT.
rsJc<rXJl9rsJ`3rsSi1r!*'&rri<&p&W89rW<$#rX8`7rX8`2rri<+rs\o:rX8Z2r!!'-rt,27rWiH4
rs\l3rs8N0rrrE2r!33+rt58IrWiH/rrrB,rseu<rX8`:rs\lBrsAZ5rt58ArX8`4rso#Dr=8f5rsJ`6
r=])Ars\f/rsJc2rX&T4rrrB+rs\l>rso&8rXA`2rX8`8rs&H+rso#;rsAW/":#8@&J>!Ors\o7rX&T4
rrr<)r!!*'rW9k9rrW0&r<<0+rt#)?rs&B.rs&K2rYGMFrt#)6rrrB0rso&:rXAf6rs/H1rsSf9rs\o3
rX&T6rX&N3rW`B+rs8T?rtYGBrs\f7rs&H/rt#,FrX]#7rsSf<rsel2rs8T3rttYFrs\o4rWrN8rs/Q6
":bhK"pY&5rtbSDrsJZ1rso&7r!N?-rsJ`5rs\o4rX/Z3rt>;KrttY=rs8W.rX/Z1q??j#rrUXMn,`Oj
rWN0'rWrN7rXf)6r!NH.rsSfArt,2@rWiH,rX8`9rsSf7rsJc2r!`T5rXSr:rs&H/rser6r=&Z0rrrE.
rYPSLr"&f9r!iZ1rWrQ8!Y6%^rX]#7rsSf<rsel2rs8T3rttYFrs\o4rWrN8rs/N5rs\o3rX&T?rXSr8
r!EB5rs8N0r!<<0rX8`7rs/N1rsA]<rYb_Qr!36-rrrB/rs/B(rW<3'!Wg1>rr`6)rrrE/rYkeLrWrN.
rsSf5rsSi8r"8r9rW`B-rYYYVs!%FRrso&9rXAf6rs/N/!"&c7#mpSJrtYMBrs\o;rXf)7rs8T4rsSi6
q@!94rser;rt,2HrXJl6rtPGErs8W.rWiH,rY#5irtGA=rt58?rX8`=rser;rtbVArWiH1rX8`7rsJ`5
rt58BrX/Z/rs/N2rWiH.rs8W5rXJl;rs8T1rsSi3rW`B*rs&H.rsSf0rri?'rWE0%huVj=rr`6)rrrE/
rYkeLrWrN.rsSf5rsSi8r"8r9rW`B-rYYYVs!%FRrso&9rXAf6rs/N/rsJc4rYYYMrXJl9rso#>rs/Q0
rXAf7rsJ`5r<rT7rser;rt,2HrXJl6rtPGErs8W.rWiH,rY#5irtGA=rt58?rX8`=rser;rtbVArWiH1
rX8`7rsJ`5rt58BrX/Z/rs/N2r!36-rs\l9rso&7rX&T4rs/N-rri?+rWrN3rWW<)rrW0%rrU%<rri<,
rs/Q2r!<9,rs&K0rX]#FrsSf5rs/H1rsAZ;s!%IhrXSr5rsJ`3rsSi=rYb_Drso#Ert55<rso&ErX8`0
rs\l;rso&8rXo/Mrt#)6rtGAGrsA]2rX/Z1rs8T.r<`H/rs/N7rso&8rWW62rXf)7rsAZ1r=T#8r!36.
rs/N/rs/QArYkeHrsAZ7rsSf5rs8W4rY,;ErsAZ3rsSi5rWN6,rsJ`7rs/N/r<*$%rr^+=rri<,rs/Q2
r!<9,rs&K0rX]#FrsSf5rs/H1rsAZ;s!%IhrXSr5rsJ`3rsSi=rYb_Drso#Ert55<rso&ErX8`0rs\l;
rso&8rXo/Mrt#)6rtGAGrsA]2rX/Z1rs8T.r<`H/rs/Q8":u%Q#mpS7r=Al=rs/Q1rWrH7rX&K-rsA]1
rWrN/ru(eSrso&8rXSr9rX/Z2rsSf>rt>><rX/Z5rsAZ-rs8W3rXJl4rWrH)rWN6'kQ0E=rri<,rs/Q2
r!<9,rs&K0rX]#FrsSf5rs/H1rsAZ;s!%IhrXSr5rsJ`3rsSi=rYb_Drso#Ert55<rso&ErX8`0rs\o<
":ktP#mpSCruD%LrWiH:rY5A=rs8T2rs/Q0rW`<-rWrN/rXf)>rsAZ.r=Al=rs/Q1rWrH7rX&K-rsA]1
rWrN/ru(eSrso&8rXSr9rX/Z2rsSf>rt>><rX/Z5rsAZ-!!iW3$4?bArs/N/r<*$%rr^:BquZm%r!*0,
rW`3*rs8T9rtYPTrY>GHrtbSFrsAZ<!"]2C#mpS9rs&B-rsJZ>rsJc0rW`B/rX8`=rttYAr"K)=rt>;k
s#']krtPGQrtPJLrY,;?rrrB3s!@[[rXf)>rX&T9rsJ`5rsA]/rX8`9rs8T/rs&K4rX/Z3rX&]8$k<.E
rs/Q1rXf)Crt,/8rs/N/rs&K1rXAf;r!36-rsJ`/rt,2>rXSr4rWiH,rs8T.rri?'aT;>A!WiN/r!*0,
rW`3*rs8T9rtYPTrY>GHrtbSFrsAZ<rt,2:rWiH-r!EB1r"f;>rrrB+rsAZ4rt>>Kr!WE9rs\o?r]1!9
r##GJrZ2"QrtkYJrs\o2rXJuU,o$CprXf)>rX&T9rsJ`5rsA]/rX8`9rs8T/rs&K4rX/Z3rX/Z6r!iZ2
rsAZ9rtGDDrWrN/rWrN.rsJ`6rt##4rs8W3rWW<5rser;rs&H-rrrE.rW`B*rrV`lg&_3Uqum$)rWW<-
rsJ`1rs&H3rs\o>rY#5KrtPA>rs&H2rsAZ3rs&K.rX&T5r!iT4rYGMErso#Hs#9p&":u+V&JtH`rt##D
rtGDJrZ_@TrserDrso#7rtPJOrW`B-rsJ`Es!ds_rXf)9rXJl7r!EB1rsSf0rs&K0rXSr7rs8T5ruV.r
s!7UZrZ;(ZrtPGKr<`H+r!36*rs8T3rtGDJrX8`;r!360rt,/8rsJ`3rs/Q1rW`B-rri<'c2mqIqum$)
rWW<-rsJ`1rs&H3rs\o>rY#5KrtPA>!X8i;rs\o6rX/Z0rs/N0rs\f7r<rT?rt#,>rYkeqrZqLTrt55H
rt##DrtGDJrZ_@TrserDrso#7rtPJOrW`B-rsJ`Es!ds_rXf)9rXJl7r!EB1rsSf0rs&K0rXSr7rs8T5
ruV.rs!7UZrZ;(ZrtPGKr<`H+r!36*rs8T3rtGDJrX8`;r!360rt,/8rsJ`3rs/Q1rW`B-rri<'ciO.J
rs/N7rseu=rX8`4rs\]1rs/Q<rYPSCrtkY=rsJZ4r!r`1rs8T7rsJc=rXJl3rt,/DrsJc2rXo/KrXo/8
r!r`5rt>;Brso&LrZM4QrsAZ8rtPGIrso&:rWrN1rsJ`9rt58>rWrN8rX]#=rsSf2r=/`3rs/H4rtk\@
rXJl?r[\!urt55=ru1nWrY#59rsAZ1q?R$)rWrN2rs\lCr>#;@q?[*+rXAf6rrrB/rso&7quZm!e,fRN
rs/N7rseu=rX8`4rs\]1rs/Q<rYPSCrtkY=rsJZ4r!r`1rs8T7rsJc=rXJl3rt,/DrsJc2rXo/KrXo/8
r!r`5rt>;Brso&LrZM4QrsAZ8rtPGIrso&:rWrN1rsJ`9rt58>rWrN8rX]#=rsSf2r=/`3rs/H4rtk\@
rXJl?r[\!urt55=ru1nWrY#59rsAZ1q?R$)rs/`5$471MrYPMJrXJ]0rs/N3rsJc0rX/Z8rs8N(dK0@L
rs8T2rsA]:rXSrDr!<3*rt>>KrXf)>ruD"Ert,2@rX&T4rX/Z7rt,/:rsA]4rWiH6rt55;rs\o>rXf)B
rX&T0rserCrso&<rX/Z<s!@Xmrtk\DrX]#;rX8`<rso#6rtk\IrX]#Brt559rtbSFrso&>rYGMJrsSf4
rs&K?rttqW(`3borXf)9rXAf5rsJ`;rselArsJc4rY#5ErXJl7rtkYBrs/Q:rY>GLrs\lDrs\o2rW`B.
q?R!.rtk\@rWN0$g]@3OrrW3+rX/Z3rt,/>rtbM<r!367rtt_Hrso&KrX&T9rt#)8rsSf5rseu>rX/Z3
rsJ`1rt#,ArX/Z6rt55Art>;;rs/Q5rYGMDrser7rt>>Xr[@d_rs\l;rs\l7!"f8E%M&IDrtk\IrX]#B
rt559rtbSFrso&>rYGMJrsSf4rs&K?rYb_Qrt#)?rsAZ5rsA]4rXo/>r"f;>rsAZ;rtGA@rsJcBrX8`2
rt>;Grtk\DrYYYDrrrB+rs8H+rX8iE(C1!HrWN0$e,fROrs&H/r=f/;rtbV<rW`B-rX8`ArserMrso&>
rW`B5rser9rsSf7rsA]2rXAf9rsSfCrs\o7rXAi6!XT5BrYPSOrX8Z1rYPSLrt55<rsJc<rY#5<r!EB2
rX&T3rs8T3rt>>DrYPS>rso#7rt,/=rt,2Fr!WN9rX8`1rt,/Jrt58?rXo/CrY5ADr"f;BrsAZ1rsA]4
rYGVL',(<Xrt#,BrY5A>rso#>rt>>:rY,;DrsAZ5rsJ`0rs/H-rs\o=rW`<(klL,Orr`9*rX&N:rX/Z@
rrrB+rs/N2rtbVDrZM4Nrt#)5rt#,=rXAf7rXAf5rs8T4rseu9rYYYDrsJ`7rsA]5rYPSOrX8Z1rYPSL
rt55<rsJc<rY#5<r!EB2rX&T3rs8T3rt>>DrYPS>rso#7rt,/=rt,2Fr!WN9rX8`1rt,/Jrt58?rXo/C
rY5ADr"f;BrsAZ1rsA]4rYPSJrY#5Art>;FrsJc9rXf)Brs/N:rt58;rXAf6rW`B-r!<<2rt,/6r<1UN
rr`9*rX&N:rX/Z@rrrB+rs/N2rtbVDrZM4Nrt#)5rt#,=rXAf7rXAf5rs8T4rseu9rYYYDrsJ`7rsA]5
rYPSOrX8Z1rYPSLrt55<rsJc<rY#5<r!EB2rX&T3rs8T3rt>>DrYPS>rso#7rt,/=rt,2Fr!WN9rX8`1
rt,/Jrt58?rXo/CrY5ADr"f;BrsAZ1rsA]4rYPSJrY#5Art>;FrsJc9rXf)Brs/N:rt58;rXAf6rW`B-
r!<<2rt,/6r<1^QrWE0)rs8T:ruM+TrWrN5rs&H/rs&H/rsel:r<`H9rtPJCrZ;(LrX8`:r!`T3ruD"P
rs&K4rX\r;rYPSBrWN61r"&f8rsJ`5rs/Q5rXo/=rt>;?rt#)@rsSi4r"8rCrYYYDrtkY@r<NH1"pXu2
rsA]9rXo/7rs/N/rsA]Ar]'ourY#5GrtkY?rs&K.rWW<-rso#?rsSf9rseu5rX&N4rY,;>rsAZ1rsJc;
rXJl6rWW<+rr`6)rs/H.r<<0%oE"+UrWE0)rs8T:ruM+TrWrN5rs&H/rs&H/rsel:r<`H9rtPJCrZ;(L
rX8`:r!`T3ruD"Prs&K4rX\r;rYPSBrWN61r"&f8rsJc6":GG>%1W:Krs\o?rXJl<rXo/<rs8N7rtPGL
rs\oDrX&K.rs&B,rsA]9rXo/7rs/N/rsA]Ar]'ourY#5GrtkY?rs&K.rWW<-rso#?rsSf9rseu5rX&N4
rY,;>rsAZ1!"&c7&.ngMrsAZ.rs&K*rW`B-r!E<*rW:jUrrW0&rs/Q.rXf);rsAZ5rsJc2rWrN.rWrH-
rW`B/rsnr;rtGAQrtkY?!"T,A%1W:BrsA]4rWrN3rt5/6rs8T7rsAZ1r<rT0rt#,<rX8`4r!iZ6ruV.T
rs/N2rseu5rX&T:rs\l7rt,2[rYYYCrZ2"VrsAT3rso#@r<`H2rso&;rYtk_rYYbJ%hJ^PrXAf1rs&H*
rrrE8rYGMMrX]#6rs&H/rt,2;r!<<3rX&T0rsJ`/rs&H-rr`9(rWE0'rs/N3rs/Q-rWN6&h?!WXrWN6+
rs&H6!"/i9#mpS>rsJc2rWrN.rWrH-rW`B/rsnr;rtGAQrtkY?rt#,=rWrN1rsJ`2rsSi=r!36-rX]#8
rWrH1rWiH6rs\l7rsAT4rsSiJrYGM=rX8`8rs/N0rt58>rX/c=&1RZ0rYYYCrZ2"VrsAT3rso#@r<`H2
rso&;rYtk_rYb_Hrt,/<rrrE,rWN6)rt>;HrtkYFrs/Q.rX&T9rsJZ0rser6rs/Q2rWW<+rWiH*rri<'
rri?,rXAf3rrrB)rrW0#irT/]rrrB+rsJc3rYGMCrs\l3rsSiCrX/Z3rWrN,rs/N0rtPJLrXo/=rsSf:
rs8T6rt>>@rWW<+rs/N/rsJc4rWW<-rs&H2rsJ`6":GS`,q8jCrsJZ>rsA]:rYkeIruh:WrsAZ/rt>>A
rX&T?ruM(TrseuCrXf):rYtkOrs\l<rsA]6rZ;(Pr!WN3rsSf4rt>;Brsel<rs&B'rri?0rYGMMrX/Z/
rso#:r<`H1rsSiDr!<<*r!!'&rs&K4rWW<(rs&H.rsJc2rWW6%iW9&\rrrB+rsJc3rYGMCrs\l3rsSiC
rX/Z3rWrN,rs/N0rtPJLrXf8A$k!FRrt#,8rXSr@rser2rs&K.rWrN2rsAZ.rs8W/rXAf6rXAf7s!@Xn
rsJZ>rsA]:rYkeIruh:WrsAZ/rt>>ArX&T?ruM(TrseuCrXf):rYtkOrs\l<rsA]6rZ;(Pr!WN3rsSf4
rt>;Brsel<rs&B'rri?0rYGMMrX/Z/rso#:r<`H1rsSiDr!<<*r!!'&rs&K4rWW<(rs&H.rsJc2rWW6%
iW9&\rsAZ0rs8W/rX&T3rso#5rsAT6q?[*/rX&T6rsSfCrt#,=rWrN4rWrN1rs8N-rsAZ3rsSi6rXAf1
rsSf4rt#)?rso&Hr]'obrsAZ3rs&K2rXf)6rs\l7rsAZ0rt>>NrYPSDrtbSOrt,2;rYGM=rX8`9rs8T1
rsJc2rZ(q\rt,/;rso&:rWiH3rX]#Crt559rrrE*rWE0(rs/N5rtkYJrsSi5rXA`3rW`B+rtPG<r<<*'
rWiH/rt,/<rs8W-rWrN.rs8T-rs&K+iW9&\rsAZ0rs8W/rX&T3rso#5rsAT6q?[*/rX&T6rsSfCrt#,=
rWrN4rWrN1rs8N-rsAZ3rsSi6rXAf1rsSf4rt#)?rso&Hr]'obrsAZ3rs&K2rXf)6rs\l7rsAZ0rt>>N
rYPSDrtbSOrt,2;rYGM=rX8`9rs8T1rsJc2rZ(q\rt,/;rso&:rWiH3rX]#Crt559rrrE*rWE0(rs/N5
rtkYJrsSi5rsSl9r<`H-rrrE:rWrH+r!*-*rs8W9rXAf4rri<,rs&K/rWW<+rrh<^rr`0(rs&K,rW`B0
rser=rs/QCrXf)5rWiH-rsJZ-rsJ`;rsA]2r"Au4rs/Q0rXAf4rt,/HrsJc3rX&T/rsJ`8rser;rtYP>
rW`B2rsS`2r!<<4rtYMDrs\f3rtkYJrseu5rXSr@rtGAHrsJ`0rsA]6rW`B/rser;rsJc:rs])?%Ls0e
rYPSBrW`B2rt55?rr`9*rWiH9rsSf4rsSf8rt58?rYb_@rrr<'r!361rs/H+rWrN3rs&H+p]pg-rX8`4
rrh?_!W`B*r!36+rrrB+rsJc8rXf)7ru:qKrrrB,rs&K1r!!*-rXo/:rs8N8rWW<,rs8T4rs8W9rYYYB
rs8T1rs&K1rXSr;rXSrCrs8T.rs\o8r!E9,rso&DrX]#;r<WN3(Dm&arseu5rXSr@rtGAHrsJ`0rsA]6
rW`B/rser;rsJc:rXJl;rtPGKrsSf1rs\o>rXSr1rs&H-rt>>>rX&T4rXJl>rserFrs/Q-qulp&rs\o4
r!*-+rsSi2rWW9+qZm-0rX8`4rrhEarW<*'rs/H-rs/H.rso#:rtk\LrX/Z1rX&T.rsJ`3rrrE*r!36.
rXA]0rs8W7rXf)6rso#Drs\o8rXJo5!XAo6rX8`:rX8`;rser6rt,2CrXJl;r!*0.rsSfIrt>5:rs\l2
rsSi=rWiH3rsSf4rs/N9rsJc:rX&T7rs\l7rs8W0rWrN2r"B#:rX&N6rY#59rs8N1rs&H5!YuO[rs\o>
rs\l@rtG56rri<-rtGD@rWiH3rXSr@rsAZ/rs\f7rs8W5rWiH,rri<&o)\OcrW<*'rs/H-rs/H.rso#:
rtk\LrX/Z1rX&T.rsJ`3rrrE*r!36.rXA]0rs8W7rXf)6rso#Drs\o8rXSr5rs&H1rt#):rt,2>rX&T9
rt>;?rsnr2rsJc6rZ;(Pr!NH4rW`B1rt558rs\o8rX&T0rY#5<rt#)8rso&;rX8`3rs/N/rsJZ:rsJ`3
r=Al?rs/Q0r!WN/rX]#ErXAf=rs\l@rtG56rri<-rtGD@rWiH3rXSr@rsAZ/rs\f7rs8W5rWiH,rri<&
kQ1YarrrE-r!<<-r!EB5rXAfCrtPG>rs/N0rrrE0rX&T.rri6)rsAZ5r!36-rso#>rs&K5rYGMBrsSf9
rs/Q.rX8`:rX8`;rser6rt,2CrXJl;r!*0.rsSfIrt>5:rs\l2rsSi=rWiH3rsSf4rs/N9rsJc:rX&T7
rs\l7rs8W0rWrN2r"B#:rX&N6rY#59rs8N1rs&H5rtbSBrt58>rY5AGq?R$'rX&T<rs\l3rs\l:rt>><
rW`B2r!iZ3rs\l3rrrE*rW;9arW<**rsAZ9rseu:rWrN1rsSf=ru(hDrWrN.rWN6-rt55@rsA].rWW<>
ru:kCrWrN4rtbSCrs&K2rY#5HrsAZ6rso&7rY,;SrY,;Jrt>;AruD%Sr!36*rWiH9rt,/9rso#Drso&5
rXJl;r"]5Ir!r`9rt>MK%hB3_rXJl9rtPGLrt>>@rWiH2rs8T6rsAZ.rsSi6rXAf:rt>/<rXJl@rY#5:
rsSf0rs8W2rWiH2rso#7rtk\Eq$I'/rser6rso&:rXAf6rs&H+rri?+rWN6&r;l<erW<**rsAZ9rseu:
rWrN1rsSf=ru(hDrWrN.rWN6-rt55@rsA].rWW<>ru:kCrWrN4rtbSCrs&K2rY#5HrsAZ6rso&7rY,;S
rY,;Jrt>;AruD%Srs/N.rrrB,rt>>CrX&T7rYGMDrs&H3rsnrArtbMBrser@rt#,@rXJl9rtPGLrt>>@
rWiH2rs8T6rsAZ.rsSi6rXAf:rt>/<rXJl@rY#5:rsSf0rs8W2rWiH2rso#7!#G\Q%1W+>rsSi9rX&T7
rsSf7rsJc1rWW<)rs&H*rrVNfrrW0%rs&K2rXA`3rWW<0rsAZ7rsSi4rX&T.q?['/r<E6-rtYPHrXSr=
rX/]5!"/W3rso&GrYPSErt#)@ruD%KrZ2"SrXJl<rsJ`3r=&T?q?d00rX&T4rX]#:rsAZSs"aTjrYGMI
rt55;rt>;TrtGDCrXf)8r!iZ=ruh:Zrs\o?r!NE-!YH"Ur=Ju@rtGADr<WB2rso#?rs\o7rX8Z1rX/Z5
rtG56rXf)>rW`B.rt55<rs8W/rWr?(rri?,rWW<'liI+frWE0)rsSf7r<`H,!"/i9#mpS@rsSi4rX&T.
q?['/r<E6-rtYPHrXSr=rX8`5r!WN7rtt_Orso&>rXo/Mrso#KrtbSCrt#,:rX&N3r"o29rsSf4rsSf:
rsSi5r[Rq'rtkYM!YZ4Z!"o2;rt>;TrtGDCrXf)8r!iZ=ruh:Zrs\o?r!NE-rt5/?rt58ErXo)7rXAf:
rXo/=rsJ`5r<WB0rsSi?q?R!2rso#4rs8W:rX8`3rs&H.q?7!)":#/8rrrE(mfEChqucs'rs/N6rsA]2
rWiH,rs&H1rt#,CrXo/?rXo/9rrrB+rs/Q.rXo/JrtbS=rs\l5rsJc3rXJlCrt>;>rt58?rX/Z;ruD"Y
rt>;>":,8<#6t,2rt#)Art,2;rY#5>rsJ`6rserDrt58:rYb_Trso#7rsSiFrZ;(Or!<</rXAf6rs/N3
rseuSr\FKdrs&H0rs8T/r<`H7rseu5rXAf<r!NH3rXAf;rsAZ1rs\o6rWrN3rs\l2q?m6=rXAf3r!<<-
rsJ`@rseu5rWN6/rs\l1rr_]jrW<!"rs&K.rX]#8rs8T/rrrE,rX8`:rtGADrso#?rs8W.rW`B-rs&H7
";r'm('jjErs\l5rsJc3rXJlCrt>;>rt58?rX/Z;ruD"Yrt>;>rs8W0r!*03rY#5BrsJ`<rs\o7rXAf9
rYPSHrs8TAru:tJrX&T4ru1kXrt5/7rsAZ5rsJc2rXAf9s!@Y"rt>>9rX/Z2rWiB.rXf)=rs/N3rt,)8
rsSf7rt#,9rWrN4rsAZ1rsSi8rW`3+rtkYCrs/H-rs/Q2rYGMCrs/N+rsSi8rWW<(mfEChrrrB,rs8W2
rX/T7rX8`1rsJ`3ruD%brZ2"PrYtkLrsJ`2rs\f7rtGDArXSrHrXJl9rs&H/rsSi2rXSr6rserDrso&D
rXSr4rWiH9rso#=rsA]4rXJl6rt>;Prt#,6rXSr9rY#5ArsSf9rs8W8rY#5>ruh:UrtGAIrsSi2rWiH0
rsSf3rsSiGrYYYFrs/N0r!iZ2rsAZBrtYPDrX]#DrtGA=r!<<1rso#3r<WB-rsel0rsSiCr!*'+rs&H.
rso&FrYb_KrsAZ/rsA]7rWiH-rWD]lrW<*'rWiH/rsAZ3r=Al8rs&K1rX&TEs!@XbrtGANrt58<rWrN4
r!iZ>rser;ru1kGrs\o3rX&T4rs&H4rs8W6rYPSErtYMCrs&H-rt>>ArX]#8rsJ`7rsA]<rZ;(Mrs&H4
rsSf=rt#,;rXSr6rt#)Ars\oMrY>GHrYGMArs&H-rsA]5rWrN3ru:qSrso&6rX&K3rs/Q1rYb_Nrso#=
rtYPIrX/Q/rsSi:rriB+r<WB-rsel0rsSiCr!*'+rs&H.rso&FrYb_KrsAZ/rsA]7rWiH-rWDcnrrW0'
rsJK)rso&:rX&T/rs\l3rtPJGrYtkQrXSr:rt#)6rs\o=r#G_DrYYYcrY#5:rsSf9rt>>:rX8`2rtkYp
rtkS>rt#)Frso&?rYGMHrsAZ6rsSiNrYkeNrs/N-rrrB/rt58=rXAf:rsJ`5rt58<rY#5Nr[\!`rtt_@
rs&K1rYGMErseu6":,5;'GUNfrtGAPrtGDBrZ_@YrsnrDrt,/:rs8T-rs/Q0rX&T3rs\l3rso&8rWW<,
rsJ`2rsAZ/rseu6rX&T9rso#@rtPJGrX&T0rso#7rrrB(oE"snrWW</rs&9'rso&:rX&T/rs\l3rtPJG
rYtkQrXSr:rt#)6rs\o=r#G_DrYYYcrY#5:rsSf9rt>>:rX8`2rtkYprtkS>rt#)Frso&?rYGMHrsAZ6
rsSiNrYkeNrs/N-rrrB/!"f8E$OcqBrso&9rX8`<rsJ`<ruD"grtYPNrWrN.rsJ`@rt#,=rWrN/rtPGR
rtGAPrtGDBrZ_@YrsnrDrt,/:rs8T-rs/Q0rX&T3rs\l3rso&8rWW<,rsJ`2rsAZ/rseu6rWrW;&.S[M
rY#5Frt>;;rs/Q6rX&T.rWDcnrr`6(r!EB-r!362rs8T2rsA]4rX8`8rtt_\rser6r<iN0rs&K2rY#5<
rser>rtGA=rt,2?rX/ZBrsel7rsSf:!"K&?&eb0Prso#=ruM+PrY5AArt,/;r<`H/rso&@rWrN8rY5A@
rt#);rt58<rX&T9rtGA=rtYMOr>>MErs\f<rsJZ<rs/Q5rY#5?rY>GOrt,/Ert#,=rXf)ArtPG@!X]8=
rs&K6rser;r<N<+r<`H/rsSi3rX&T3rWrN7rsSf4rs8W.rXAf?rt>;9rsA]5rW`B+rWDorr;lp#rWW3+
rs&B+rseu6rX/Z3rsJ`5rseuFrZqLQrX&N1rWrN.rsSf=rsJc8rXo/DrX/Z:rso#8rttbFr!`T5rX]#=
rt>;>rso#=ruM+PrY5AArt,/;r<`H/rso&@rWrN8rY5A@rt#);rt58<rX&T9rtGA=rtYMOr>>MErs\f<
rsJZ<rs/Q5rY#5?rY>GOrt,/Ert#,=rXf)ArtPG@rsJ`0rt#,=rXSl3rW`<-rWrN3rs/N0rsJ`2rt#,;
rX&T1rrrB1rtGDFrWiH0rsSf1rrrB(oE"sorWW3+rs&B+rseu6rX/Z3rsJ`5rseuFrZqLQrX&N1rWrN.
rsSf=rsJc8rXo/DrX/Z:rso#8rttbFr!`T5rX]#=rt>;>rso#=ruM+PrY5AArt,/;r<`H/rso&@rWrN8
rY5A@rt#);rt58<rX&T9rtGA=rtYMOr>>MErs\f<rsJZ<rs/Q5rY#5?rY>GOrt,/Ert#,=rXf)ArtPG@
rsJ`0rt#,=rXSl3rW`<-rWrN3rs/N0rsJ`2rt#,;rX&T1rrrB1rtGDFrWiH0rsSf1rrrB(oE"sprWW3.
rsA]9rX&T1rsSf;rsSi>r!r`4rX&T7rX&T6rsJ`8rsJc4rWiH>rsAZ8rt>;Irt>>BrXo/Crser5rt>>>
rX/ZHrtt_Hrs/N0rt,2>rY#5:rtPGArtPJ<rX&T@ruM"IrY#5;rs&H0rtGDVrX]#Frser<rs\oF";qRT
',1?`rsA];rWiH,rs/N6rs\o7rXAfArYGMPrtPGCrt,2JrXSr=rtt_ZrsJ`2rt,29rX8`;rsSf1rrr<+
rsA]/r!33.rs8W/rX&N,r!r`8rX/Z6rsSf3rsAZ,!!2`nrri<)r!`T3rt#)8rs8W4rXf);rt>5>rs8T1
rso#7rseu8rXSr8rsAZ0rtk\ArX]#ArYPSIrt#)@rt>>@rWrN:rsSf5ruV1WrXf)7rX&T9rser?rs8W=
rs])?'GLcWrX&T@ruM"IrY#5;rs&H0rtGDVrX]#Frser<rs\lErsSi?rYkeCrt558rrrE-rX]#;rsJ`6
rtYMKru1nOrX]#?ru(eGrt#,HrZ_@LrWrN8rs8T3rt,2<rW`B+r!39/!XT#6r!33.rs8W/rX&N,r!r`8
rX/Z6rsSf3rsAZ,p&Y0prri<+rsAZ/rs8W0rW`B+rs/N<rttbErY,;GpB^d?rt,/>rrrE4rXAf5rs/N0
rser9!"T,A&.ngSrsJc2rXAfArtkYErtk\Nr"/i@rseuHr"/l:rXJlOrso#7rseu<rX8`<rY>GKrt,/G
s#9s'rXJlGrtGAArs8TArt,)=rsSi=rWrN9ru1kCrsJcBrXSi8!Yc=`!#>JLrt>5;rs/Q2rYkeIrWiH3
rs&H4rt58=rWiH+rrrB.rs8W.rX/Z;rWrN-r!WN2rsJ`Crt589rX/Z7rsS`-rW;corrW3'rWiH0rW`B.
rs/N-rrrE-rY5DM!Z2=SrY,;GpB^d?rt,/>rrrE4rXAf5rs/N0rser9rt#,@rY,;=rs/N3rtYPMrXSrE
rtbMDrY,;@ru1eHrs\l9s!%IQrX&T6rso#9rt55FrtbVGrYPSns!7RQ!ZDsj!#,>Ars8TArt,)=rsSi=
rWrN9ru1kCrsJcBrXSi8rtPJJrYPSIr!WN0rsJ`Drt#)6rs\o3rXSr?rsSf2rri?*rX&T1rrrB/rt559
rrr<.rsA]4rYb_Jrs/N1":YeJ$O$D2rW;corrW3+rY#5BrX&T.r!36+rt,/Xrt,29rY>GDrs/H.rX]#O
rtkY?rsJcArWrN8rs8T5rs/N:rt>>]rYPSQru:qPrt>>ArYYYKrsJ`8s!7Rl":l"S&./@Crt>>DrXf)E
rs\l1rt,2:rY,;>rXAf9qA9/?rWrN4rt#)=rs8T4rt>>FrXf)?rt>;ArseuDrX/Z3r!36+rWrN:ruD"U
r=&Z4r<<00ruD"Irso&9rYPSErt#)6rrrE,r!N?4rser2rri?.rWrN;rs8T:rso&9rWiH-rsAZ-rrVcm
rrW3+rY#5BrX&T.r!36+rt,/Xrt,29rY>GDrs/H.rX]#OrtkY?rsJcArWiW<&-rONrseu5rY,;Es!n!a
ru1nVrY>GGrso#FrtGD>rXSrRr[@dWrt,/9rt>>DrXf)Ers\l1rt,2:rY,;>rXAf9qA9/?rWrN4rt#)=
rs8T4rt>>FrXf)?rt>;ArseuDrX/Z3r!36+rWrN:ruD"Ur=&Z4r<<00ruD"Irso&9rYPSErt#)6rrrE,
r!N?4rser2rri?.rWrN;rs8T:rso&9rWiH-rsAZ-rrViorrW3'rso#?rs8T/rri?.rWrN1r!NB-rYPSF
r!36/rXJl>ruD"FrsSi3rW`B4rtbSCrs/N2rt,2GrX/ZErtkYErt,2>r\sibrtbSKrt#)GrsSi6rYGMF
rsAZ8rs\o3rWiH3ru(eIrs\lDrso&7r"&f:rXf)<rt#):rs8T9rsA]@rXJl=rsSf;rtk\=rWrN-r!<<-
rW`B5rt,/:rrrE8rXSl5rX8`ErXSr@ruD"Mrt,2CrX&T1rsJ`8rttbKrXJc0rsSi:rX&T@rsAZ9rt#,<
rX8Z0rWN6&o`>'orri?3rXo/9rWiH+rsAZ1rsAT1r<N<<rt##4rsJ`7rt58NrX/Z5rs/N-rso&ErXJl4
rX8`;rtbS@ru:tSrXSr>rserdrsSiBrY>GDrYYYCrsJ`@rt,2:rX]#;rs&H-rs\oFrXf)<rYYYFrs8N5
rser=rs\o<rX8`3rXo/:rtbSCrt,2<rXf)GrrrB-rrr<+rs/N-rt#,@rX/Z/rt>;@r<`H2ru1kHrt>>O
rt,AG&.fHerX&T1rsJ`8rttbKrXJc0rsSi:rX&T@rsAZ9rt#,<rX8Z0rWN6&o`>'prs&K1rXJl3rWW<)
rs8T/r<`H1rs8W3rXAf7rsAK+rsJc;rWW</rtkYHrs\oArXo/CrX8`4rs&H3s!IaarXf):rs\l;rs/Q@
rYGMErY>GArt#):rs\o7rWrN,rs8T<s"FBgrX8`<r]'p0rtPGDru1nSrX8`4rs&H-rt#):rsA]6rX&T7
rtbSNru(hDrsJl9',19Orser7rso&>rWrN.rser5rs\o?rX&T=rXJl8rs\l9rso&IrXf)Art>;CrtYG<
rsSf7rsA]2rX/Z=rsAZ5rt,2HrXo/8rr`0%rW;iqrr`9*rsJ`7rs&K,"9eo2#RLD7r<`H1rs8W3rXAf7
rsAK+rsJc;rWW</rtkYHrs\oArXo/CrX8`4rs&H3s!IaarXf):rs\l;rs/Q@rYGMErY>GArt#):rs\o7
rWrN,rs8T<s"FBgrX8`<r\sm0!\G*#rXf)Jrtt_CrsA]0rWiH6rX8`4rs\l5rso&ErYYYQrsJ`5rtG;<
rser7rso&>rWrN.rser5rs\o?rX&T=rXJl8rs\l9rso&IrXf)Art>;CrtYG<rsSf7rsA]2rX&]?'+"XF
rXAf<rtkYHrs/Q+qum!#p]:BtrrrE0rXAf9q?Hp%rs/Q5rX8`4rs\f2rsSf1rrrB2rs/Q3rWiH1rtGAC
rs/Q0rXf)MrY#5;rs/N1s!7U^rXA`8rX8c6!X]PQrXo/8rXSr8ruV.QrsJc0rXJl6rs8T9s#C$!rXeu<
s!%IZrX/ZNrt>;8rsAT/rt#)9rt,)=rt58>rYb_Frt55Erseu7rYPSFrWW<.rs&H/rrrE1rX&T;rt55;
!XoJFrsSi3rso#=rs/<-rW`B4rsSf7s#C!(rsJZ0rt58ArX/Z@ru1kQrs8W,rWW3&rrW#trri?*rsJ`6
rsef/rWN6+rser8rsA]6r!<<1rW`B+rXJl4rsSf2rsJc>rXf)7rs8T8ruM(OrsA]1rX/ZNru(eEr=8f8
rsJc=rXo/8rXSr8ruV.QrsJc0rXJl6rs8T9s#C$!rXeu<s!%IZrX/ZNrt>;8rsAT/rt#)9rt,)=rt58>
rYb_Frt55Erseu7rYPSFrWW<.rs&H/rrrE1rX&T;rt55;rs\l7rs/Q6rX]#6p^I-+rso&:rXAfdr[%RO
r!<<7rt#)9rtbVQrYPS?rr`6(qum$$q>pU!rrrE0rXAf9q?Hp%rs/Q5rX8`4rs\f2rsSf1rrrB2rs/Q3
rWiH1rtGACrs/Q0rXf)MrY#5;rs/N1s!7U^rXA`8rXAf6rt>;Crs/N5rsJcIrY,;=rrrB2rsA]2rXo/i
ruM(Mr"&fOrtkYAs!7UWrW`B/r!<<5rX/Z:r"&f>rs\lErseu?rY5AArsAZ@rt#)4rsA]0rX&T.rsSf4
rt>>DrX/Z6rX8`2rso#=rs/<-rW`B4rsSf7s#C!(rsJZ0rt58ArX/Z@ru1kQrs8W,rWW3&rrW#trr`9(
rtPGKrs\l3rri?,rX/Z2rser8rt58>rWiH-rso#5rs\f3rs8T:rso&5rX&T4rs\l5rt#)=rseu7rY5A`
ru1kArseu@r#YkVrY587rsJc;rY,;@rsJ`@rtGDKrY#5Ars\l4ru(eQrsJc4rY5A@r!EB=s!7RPrs8W6
":YqT'GUNWrsJc8rXo/Aru1krru1nHrX8`8rWrN1rt#)BrtkSDs!%I^rYb_DrXAfCrt,/:rsA]5rXJl5
rserBruV1QrX/ZLrYkeJrser9rrrE1rWrH1rXJl9rs/N-qZ?m%!Wr9#rr`9(rtPGKrs\l3rri?,rX/Z2
rser8rt58>rWiH-rso#5rs\f3rs8T:rso&5rX&T4rs\l5rt#)=rseu7rY5A`ru1kArseu@r#YkVrY587
rsJc;rY,;@rsJcA";VXa(Dm&`rt#,<rWrNArYYYBrsAZ=rs\f3rtbV[rXAf4rXJl>rtPGCrsJc8rXo/A
ru1krru1nHrX8`8rWrN1rt#)BrtkSDs!%I^rYb_DrXAfCrt,/:rsA]5rXJl5rserB!$21_&eb0Ns!%F\
rt,2>rXAf1rsSf3r<rT6rs\o4rW`3$rrW*!rs&K1ru(eDrs&H-rrrE2rX]#:rs&H*rs/Q4rWrN/rser7
rtGA>ru:tTrYGM?rsSf@ruD%GrXSrPrX/]1!X98MrYYYRrso#ArttbGrZ;(frtt_UrsAZ1rrrE-rYPSM
ru:qKrtGDKrYGMCrt#)=rsSf;rt>>@rYkeIrtbSOrseu?rX8`/rWrN9rsJ`2rsA]<rX/Z:r!r`Cr!NH0
rXAo:$Q&aXs#C#krX&T?rtGABrt,/=rtbVDrXo/:rs&H.rs/Q;r\a]qrsAZCrser8rtbV?rX/Z5rs/N/
rseu7rWrN@rt55;rs&H+rri?'quQg%rsJcDrX8`1rWiH,rs\l;rsSi2rWE3+!XB,BrWrN/rser7rtGA>
ru:tTrYGM?rsSf@ruD%GrXSrPrX8`1rt>;Jru1nIrY,;Krso#Ls![marZ2"FrWrN-rs/N>rtbVRrXf)C
rtkYMrseu=rXSr9rXf)BrserGrt#,FrYYbH%1rRPrX8`/rWrN9rsJ`2rsA]<rX/Z:r!r`Cr!NH0rXJl8
r"oAmrt>;;rtbVJrX]#?rXJlCrser>rsA]0rWrN/rtGAhruD%FrYkeGrX8`Ars8T2rsSi3rWrN5rsAZ1
";hsf&ISOFrs&H+rri?'quQg.rttbRrY#59rW`B+rt,/=rs/Q+rWN60ru:qKq?d08rXJl9rt>;Brs8W6
rZ(qLrso#Frser6rs/Q=rZqL]rs8T;s"FBarXJl?rso#BrtkYC";;FW$m>Qms!%ISrXAf7rsJ`1rs\oD
rYkeMrYPSDrsAZCrs\o6rYtk]rt#)6r!iT0rX&T9ru:qFrso&?rXSr>rtkYCrs&H7r<`H4s!n$VrWiH0
rsJQ0rs8W@rY#5;rt#)=rsA]5rYYS?rYb_FrWiH4rs8T.rt,28rX/Z;rs&H-rt>>=rWN6+rXJf.rW<*#
rt#,Hru(eKrs/N-rrrE6rXJl4rr`6'rs\oHrXeo4rtGA@rs\o?rXf)8rserI":u+S%N,3_rser6rs/Q=
rZqL]rs8T;s"FBarXJl?rso#BrtkYCrtGD@rZM4brt,/<rsSi6rWiH3rtkYQrtGAJrseu7rYkeFrsAZD
s!%IRrWi?1r<N<.rt,2LrX8`9rt,/>rt,2HrXAf2rXo)8rXJlWrsSf2rsA]4q$[3.rtkYIrsA]9rXSr7
rsSfCr<`H@rser4rseu6rW`B6rs/N1rt588rWiH9rsJ`.rs/N4r<*$#rrN-;rtGD?rWrN2r!363rWrN-
rri<-rsS`7rrrE.rY#5IrY,;?rsJ`6rseuDrZ(qPrtt_Trs\l=rtG;Qru(h@rXAfFrt55Es!7UYrXf)A
rX&T:rs\l2rtk\`rX/Z3rt>;<rt58;rYkeLrXo/=rso#;rsJc6rXAf@ruM(Jru:qJrsSi3rYGMKrtt_D
rt#,irY>GFrtGA=rs/N3rsJc3rXJl<rrrB/rs/QAr[@dWrX8`1rser4rt#,>rXAf;rsJ`>rsel4rs&H1
rrrE.rWW<<rso#4rseu>rXf);rrr<&rWrN,r!!*%ru(hMrsSf3rsJZ/rso#6rrrE*rX&T4r!r`1rs8T:
rtkYJrs\o7rXAf9rtbSRrtPJMrZ(qHrXo/Dr#l"Wrs&H2ru1nLrY5AXrtPGDrt55:rt58>rW`B=s![jR
rsA]<rX/Z;rsAZCrt>;Crs\o;rXJl7rsSf7rtPJRrXJlHrX]#:rs/N=rtYPNrXAf;s#L&nrt58ErX/Z1
rXAf6rs8T5rt#,5rX/Z1ru(eart#):rs&K4rs&Z3%hB-[rXAf;rsJ`>rsel4rs&H1rrrE.rWW<<rso#4
rsel;rsSi1qucp(rri6'rrW3>rt58<rWN-,rs8W.rWiH,rs&H.rrrE*rWW<+rt#)ArsSf?rs\o6rXSr5
rsSfbruh=VrXSr8rX]#EruM"HrsS`6rtPGQs"OHirWrN6rY#5<rt55CrtYPSrX/Z3rs\l4rtYPErXf)V
r\"-VrY5AArt,/Tr=])Jrtt_Rrtk\?rX]#Hrt>;>rttbms!\("+sI9urWW</rWiH-rs\l4rsA]5rWrN,
rt#)As!7Rirt58>q@!9:rsA]2rXo/<rs&H/rs/N1rs&K3rX]#8rsJ`/rs/Q9rYPSArs/N+rr`6-rs8N+
rrW3>rt58<rWN0-":GJ@"U4l1rrrE,rWrN-rri<)rs&K6rY#5=rY5A@rsAZ7rs/Q3r\sj"rtYMCrsJ`9
rtbVTr!iZ6r!iZ?rZ2"mrtt_@rso#@rsJc<rY#5GruM(GrsA]6rWrN=rt#)?s!I^t!"/]4rY5AArt,/T
r=])Jrtt_Rrtk\?rX]#Hrt>;>rttbmr[Ijkrs8T-rsJ`1rs&K3rWrN1rsSf3rri?4rY#5Vr[%RVrs\`3
rY5A=rs8T9rsSi2rX&T0rX/Z0rs\l;!XT/?!"/]/rs/Q9rYPSArs/N+rr`6-rs8N+rrW35rs\o:rW`9.
rs8W5rX8Z3rW`B-q??m,rYPS@rX8`3rsJ`9rsSi<rY5ANrt55:rs/H.q@*B9rXSr>s!n!a!$VIg',1?M
rsSf;rt#,:rYkeGrs/N-rs8W5rXSrLrsSf8ru:qOrt>>CrY5AEs!dq*s!n$YrYb_Or[\")s!%@Mrs\l7
rsA]6rWrN6rs/N-rt55Cr<`H-rsA]6rWN6)qud'3%hemTrsSi8rX8`7rt55Ors&K=rYYYArs&H*rso#;
rso&Dr[\!Wr!NH.r!<<,rtGA9rsJ`7rs&B(rrW35rs\o:rW`9.rs8W5rX8Z3rW`B-q??m,rYPS@rX8`3
rsJ`9rsSi<rY5ANrt55:rs/H.q@*B9rXSr>s!n!as!%IVrWiH2rXf)?rsJ`Drseu5rW`B.rs\l:ruV1J
rXJlHrY5AFrt,/Drt58[r\jd+rso#GrtbSas"j[!r!iZ7rX8`4rs\l4rso&6rW`B7rY#/9rW`B/rs\l0
rrr<'rt#)ArsSi8rX8`7rt55Ors&K=rYYYArs&H*rso#;rso&Dr[\!Wr!NH.r!<<,rtGA9rsJ`7rs&B(
rrW35rs\o:rW`9.rs8W5rX8Z3rW`B-q??m,rYPS@rX8`3rsJ`9rsSi<rY5ANrt55:rs/H.q@*B9rXSr>
s!n!as!%IVrWiH2rXf)?rsJ`Drseu5rW`B.rs\l:ruV1JrXJlHrY5AFrt,/Drt58[r\jd+rso#GrtbSa
s"j[!r!iZ7rX8`4rs\l4rso&6rW`B7rY#/9rW`B/rs\l0rrr<'rt#)ArsSi8rX8`7rt55Ors&K=rYYYA
rs&H*rso#;rso&Dr[\!Wr!NH.r!<<,rtGA9rsJ`7rs&B(rrW31rsJc7rWrN/rWN6.rso#:rsJc3rX/Z2
rs/N-rri?,rXAf4rXo/CrsAZ0rsA]9rYGMErsSf3rs\lAruD%LrXSr;ru:qYs![mcrXAfVrtkYKrtt_]
s!%ILrXo/>r!EB>ruh:Lrt>>ArXf)UrXSr=rsJ`0rsJc7rXSrXrtPGCs!@[j!$qL]rXAf@rt>;>rsSi9
rXAf4rs/N,rtG;Crt556rs8W4rX&T/rs/N/rso#Grseu5rX&T9rtGAHrs8W:rXJl8rs/N*q@!<Ar[%RV
rs\l5rs8W5rX/Z1ruh:NrsSf2!!WK/"U4l-rrW31rsJc7rWrN/rWN6.rso#:rsJc3rX/Z2rs/N-rri?,
rXAf4rXo/CrsAZ0rsA]9rYGMErsSf3rs\lAruD%LrXSr;ru:qYs![mcrXAfVrtkYKrtt_]s!%ILrXo/>
r<WT5(De2:rXAf>rso#>s!@XSrt#,:rW`B0rs\l:s!n$_rX]#TrZqF\rXAf@rt>;>rsSi9rXAf4rs/N,
rtG;Crt556rs8W4rX&T/rs/N/rso#Grseu5rX&T9rtGAHrs8W:rXAi8!Xf5<rWE!)ru1k_rt58>rX&T1
rs\l6rs/QHrXSr9rWiH-rrrB(rrW3-rsSi3rX&T/rWW<4rtGA>rrrE.rXSr8rt>;ArrrE,rX/ZArZM4O
rsSf0rt#,GrX/Z1rser>rtbSD!#PbS&eb0RrsA]6rX/Z:rsSf4rt#,=rXAf@rXJlGrsSfArs8W2rW`B/
rt#):rs\o7rXf)Gr!iZ:rX/Z;rt,/BruM+UrWrN:rXf)>rt55<rtbVFrX8`9rserCrt>>>r"&c7!Y,\P
!"o2?rsA];rYGMErsAZ3rso#Grseu5rX&T6rt55;rsAT+rt#,ArWW<+rX8Z2rYPSHrtYMErs\o:rXAf1
rso#8rs&H)rrrE,rWN6&rsJc6rs/N0rs&H+rt#,CrX8`0rs8T6!"&c7&eb0SrrrE,rX/ZArZM4OrsSf0
rt#,GrX/Z1rser>rtbSDrttbKrXSr7rs\l6rt,2<rX&T8rser9rtPGAru1nFrYGM>rsAZ/rsA]9rX8`7
rsJ`:rtkSBrt#)9rt58BrXo8Q*>\\lrWrN:rXf)>rt55<rtbVFrX8`9rserCrt>>>r"&c7rso&@rXSr7
rt55Grt#,9rX/Z8rYb_Frs/N0rseu?rX/Z3qum$1rt556rs&H1r<`H>rt58GrXf)<rser9"9er=%LW4C
rs&H)rrrE,rWN6&rsJc9rs&B,rX&T6rs\l2r<N</rsSiCrX]#6rtkYOrser9rsSi5rWrN>rso#7rsSiT
rYtkCrXf);rtkYArsA]JrY,;Xrt,/Crt,2:rX8`ArX8oA&I]'TrsJc2rsAZ8ru:tNrWW<.rserArtGA?
rseu6r!iZ7rY#58rt,/<rser?rtPJ?r!363rXAf3rsSf:rsSiCrXf)Ar"B#erYGM@rtGACrt>>ArX&T6
rWiH5rrr</rsSf2rs&B'rs/Q5rX&T1rX8Z2rX]#Is!dpcru(hIrX/Z2rs/N-rsAZ0rrrE,qucs+rso&5
r!<9.rseu:rW`<+rX/Z5rtkYFrs/Q?rYYYErXAf7rsAZ1rtbVErWr]8$RdDBru:tDrXf);rtkYArsA]J
rY,;Xrt,/Crt,2:rX8`ArXAf=rs\l6rs/Q1rX]#Jrt>;7rsA]7rY5AGrXAf9rs8N3rs\l>rs&K7rXAf9
rY#5FrsJZ/rso#:rs/Q3rX]#:rtkYGrt5/As#'ckrsJc>rXf)Brso#7rser4rso&4r!`T5rWiH-qucs(
rser6rs8T3r<`H6ru1ndrYkeSrt#)9rs8W0rW`B/rWiH,rs&B'rs/Q.rr`6-rsAZ4rseu<rWW<.rsSf3
rsSi9rX/Z7rtt_LruM(OrsJc6rX&T6rsJ`9rt>>krXf)<rY,;Brso#5rsA]>rXAf@rt#)Crt#,>rXAf3
rW`B.rs/N0rt#,=rXf)Frt#)8rs8W9rZ(qUrYYYHr!EB.rt,/Yrs\o@rXo/fr[@dSrser4rsJc8rX/ZB
rt##7rs\l:rsJ``ruh=irX8`2rser4rtG;=rt#)<rsJc0rX8`?rt,/9rrrE*rW`B*rs\l4r!36)rs8T6
rtGDBrX]#=rs\l3rsSi4rX&T1rW`B)rrrB)rr`9+rs&K*rX/Z3rX8`8rso#3rsA]5rWrN3rser7rseuF
rY5AQrY#5<rsSf4rseu8rX]#As#Buhrs\l?rt#,>rWiH0rtPG@rtPJDrY5ACrso#:rs/N-rs8W0rX&T8
rser=rtbVFrX&T1rt,/Lru(eQrt,)7rs/Q8r[IjUrtGADs#'d(rsSi9rWiH1rser7rttbHr!NH4rXSr8
r\jd!s![jSrs/Q5rWiH:r!`T9rXJl7rrrE1":GnX&.ngIrrrE*rW`B*rs\l4r!36)rs8T6rtGDBrX]#=
rs\l3rsSi4rX&T1rW`B)rrrB)rr`9)rri6'r!WN2rt55=rsJc0rXSl9rX8`DrtYMDrtbSMrtG;;rs8W5
rXJlBr"&f9rXf)<rso#9rt,2:rW`B2rt55KrrrE-rX8`>rWrN.rrrB2ru:turX/Z3rt#)=rt>>DrY,;M
rYGMCrt,/Ar<`H8rseu<rWrN7rY#5Fru1kArsSi=rX/ZBrt#,6rW`B3rX8`7rY,;>ru(eUrsJc;rXJlM
rtGABrsJ`>rso&<rXSrBrt55?rttb>rX/T.rWW<.rX8`2rs8T4rsA]2rX/Z/rs&H-rsA]5rXAf5rWW<.
rser3rrW3(rri6'r<i`9#mh1UrXAf6rrrB3r=/`6ru(hOrX]#ErYPSJr!NH0rs\l9rtYGBrs\l<rs\o;
rX8`;rsAZ/rs\o>rYke?rs/N2rtGA;rs&K,rXJlHs#L&crsA]9rXSr@rt55Dru1kP!"Au=&.ngQr<`H8
rseu<rWrN7rY#5Fru1kArsSi=rX/ZBrt##3rser8rs\l?rsSiErZ(qFrt,/=ruh=TrX]#9rY5ABrser;
rtPJFrXSrFrrrB/r<E6)rsAZ4rs/Q0rX8i7#m^M:rX/Z/rs&H-rsA]5rXAf5rWW<.rser3rrW3)rri?.
rWrN2rXJl4rt5/;rt#)Crso&;rWrNFs!@XVrs\l6rs8N6rs\o=rXSrDrtPGGrtYMDrt>>Mr!`T7rYb_J
r!rc4!XAu:rX8`BrX]#;rs/N2rt#,DrXAf4rsJ`9r>,A@rt#)IrsSi6rXJl;rtkYFru:tQrXAf3rYPSS
rs\l2rttbMrYb_Krt556rsSi;rXf):rWN6-rtGA^rtbVErX&T3rs\l=!XAr?rso&;rtYMDru(hIrY#5[
rs8T<rsSi0rW`B.rXo/>r!!*0rsJ`9r<E6-rrrE/rWrN3rXSrErs\l2rri?+rri?.rWrN2rXJl4rt5/;
rt#)Crso&;rWrNFs!@XVrs\l6rs8N6rs\o=rXSrDrtPGGrtYMDrt>>Mr!`T7rYb_Jr"&f4rs8T3rtkYF
rs\o4rX8`:rtPG@rs8W3rX\rCrXAf;rYkeErsJ`7rso&FrX]#JrtYMArs/N>ruD%IrW`B>rtPGMrt>>D
rWW<0rt#)?rsJ`.rsA]=r[\!arso#7rsJc7rXo/8rXSr:rtYMDru(hIrY#5[rs8T<rsSi0rW`B.rXo/>
r!!*0rsJ`9r<E6-rrrE/rWrN3rXSrErs\l2rri?+rri?.rWrN2rXJl4rt5/;rt#)Crso&;rWrNFs!@XV
rs\l6rs8N6rs\o=rXSrDrtPGGrtYMDrt>>Mr!`T7rYb_Jr"&f4rs8T3rtkYFrs\o4rX8`:rtPG@rs8W3
rX\rCrXAf;rYkeErsJ`7rso&FrX]#JrtYMArs/N>ruD%IrW`B>rtPGMrt>>DrWW<0rt#)?rsJ`.rsA]=
r[\!arso#7rsJc7rXo/8rXSr:rtYMDru(hIrY#5[rs8T<rsSi0rW`B.rXo/>r!!*0rsJ`9r<E6-rrrE/
rWrN3rXSrErs\l2rri?+rsA]:rXAf2rX8`7rsSf2rso&BrY#5>rsJ`.s![n-r!!')rrrE.rXSr7rserH
ru1nLrX/Z@rX/Z;ruD"Lrso&ArZM4Mr!WN5rsAZ;rso#9rs\f0rtk\Sr[%LPrX8`;rtbS@ruM(Lrs/Q7
rXf)GruV.QruM+KrX/Z5ruM:a)&X)$rX/ZCrtkYArtPJNrWiH/rtbSHrsJ`7rsA]<rYPS[rs&H-rs\o8
rY#5@rY#58rsSf8rt##6ru(_BrsJc0rWrN/rYtkNrs&H*rtbM>rs8N1rsA]8rX/Z7rXJo6rWrK2r<E9.
rt,/<rs&H1rs\o8rWiH5rtGAErs\o7rWN6Ls#Ku\rWiH,rs8T6rsA]7rYtkUrt55;rtbS@rt58NrXf)>
rt>;Rrsel6rs\o6rY#5@rX8`7r!*0;ru:ta!%%RQrX8`;rtbS@ruM(Lrs/Q7rXf)GruV.QruM+KrX/Z5
rZ;(WrtGA=ru(hQrX/Z>ru(e@rs8W?rY#5<rXJl6rt>;Is!7UKrWiH3rsSf=rso#@rs&K2rXJl<r!EB@
r!NK3!X])7rWrN/rYtkNrs&H*rtbM>rs8N1rsA]8rX/Z7rXSl4rX8`1rso&6rso#8rs/H1rrr<*r!EB4
rri<)rs\o:rWiH+rW`B-rs&H0rso&8rXAf6rsAZ9rt>;=!"&c7%hJXJrt>>FrXJl3ru1kIru(hFrYGMF
rXJl7rsAZ3rseu?rY>G>rs8T7rsSi3rWrNDrYPSCs"XKas#9s-rX8`;rtbSHrser;rsA]7rWiH3rsnr6
rtbSGrtbVWrXf)<rY,D@$7,ZurX]#;rsJ`3rt>>>rYGMIrY#5>rs&H5rs/Q.rX8`Erser4r<`H;rtt_l
s#9rcrW`B5rsAZ.rs&B.rs\o?rWrN3rX&T;r!EB-rso&6rso#8rs/H1rrr<*r!<?4!Y#88rWW<1rser4
rri<*rs/Q.rX/Z8rsAZ5rsJc4rXf)BrX8`5rt#);rt>>FrXJl3ru1kIru(hFrYGMFrXJl7rsAZ3rseu?
rY>G>rs8T7rsSi3rWrNDrYPSCs"XKas#9s-rX/c=&/G6]rY#5?rXSr7rser4rs\o;r!NH>rXo/Gruh:P
rs\l@rsJcPrX]#;rsJ`3rt>>>rYGMIrY#5>rs&H5rs/Q.rX8`Erser4r<`H;rtt_ls#9rcrW`B5rsAZ.
rs&B.":P\O&d\LCrsSf4rt>59rs&K5rrrE-rWrN.rX&T/rr`6*rrrE0rXf)Brs&B,rs/N0rrrB.rsJc6
rYYYIrs/N/rrrE/rY#5ArX/Z6rt>;9rsA]2rWiB1rY#5CrtkYFru(eAr=/f6rsA]1rsAZ9rs/Q-rXSrA
rt55ArtPGErsJc@rXo/<r!EB3rsJ`<rtbS>rso&?rX8Z9rYtkOrt,/RrsSi;r$)+OrrrE.rW`B+rs/N-
r<`H-rt,/?rso&;rYGM?rs/N6s!%IMrW`B.rsAZ:rtPG^s""*[rX/Z8rsel1r!WN?rsJ`@rt55<rso&4
rX8`2rso&4rs/N/rs&H/rs&K*rWiH,rsJ`:rt>>9r!<<-rX&T.rX&T3rsSfCrt589rWiW1"UPJJrt>>B
rX/Z6rt>;9rsA]2rWiB1rY#5CrtkYFru(eAr=8f5rs/Q1rXf)7rrrB3rtGDErXf)DrXo/;rtYMFrsS`2
rs\o7rY#5HrWrN6rt,/;r=JrIrtPJErZ_@Mrt#)Qs!%FRrrrE.rW`B+rs/N-r<`H-rt,/?rso&;rYGM?
rs/N6s!%IMrW`B.rsAZ:rtPG^s""*[rX/Z8rsel1r!WN?rsJ`@rt55<rso&4rX8Z0rri6(r!<<-rri<,
rs/Q6r!WN3r!*')rt#)6rt#,BrY5ACrrrB3r<E67rtkYDrs8W4rW`B)rs&H*rs/Q0rYPSQrtt_Frser3
rsA]<rYkeZrs\lGrso&7rX&TDruD"KruV.Srs\oBrZqLSrser7rt>>@r[@dVrX8`<rtkYArtPJCrYtkO
rsJ`Drseu>rY5ATrXo/7r!<<*rsSf8rs8W@rWiH0rX8`5rtkYOrt>>?rXo/Frso#:rseu=rY5AArX/ZH
rtYM<rs&K8rXJl=ruV.Rrt>>;rXo/@rX8`5q?6g'rri6(r!<<-rri<,rs/Q6r!WN3r!*')rt#)6rt#,B
rY5ACrrrB3r<E67rtkYDrs8W4rW`B)rs&H*rs/Q0rYPSQrtt_Frser3rsA]<rYkeZrs\lGrso&7rX&TD
ruD"KruV.Srs\oBrZqLSrser7rt>>@r[@dVrX8`<rtkYArtPJCrYtkOrsJ`Drseu>rY5ATrXo/7r!<<*
rsSf8rs8W@rWiH0rX8`5rtk\P";haa$k3+IrtYPDrXAf9rt#)Crser7ruV1TrWiH-rt55>rt,2OrY5AF
rs8T9rt#):rsJT*rrrE,rrrB-rs\l2rsA]7rX]#?rs&H*rt#,>rXJl5rs&H=rser8rt#,MrZqLZrrrB/
rs&K.rXSr7rXo/7rrrB,rs8W6rX/Z3rsJ`cruD%KrXJl4rWW<0rt,/FruD%GrZ2"brtbSCrs\f=ru1kS
rt>>=rXAf9rs8T9rt>>CrYb_ErWrN,rs\l2rs8W2rZ(qNrsA]7":YnR%M&IRrt#)Brs\oArX8`4rtkYB
rt##;rt,/JrtYPArYGMRrtYMErtPJMrWrN1rs\l<rsAZ.rtbVHr!<<<rZ2"UrtkYMrt>>8rX&K0rsA]0
qucs&rs&K,rWrN4rrrT1#mh%MrX]#?rs&H*rt#,>rXJl5rs&H=rser8rt#,MrZqLZrrrB/rs&K.rXSr7
rXo/7rrrB,rs8W6rX/Z3rsJ`cruD%KrXJl4rWW<0rt,/FruD%GrZ2"brtbSCrs\f=ru1kS!"o>G$4?b@
rseu6rXo/Crt,/Irs\l4rri?1rW`B.rsAZErt>><rXJl=rso#Drt#)Brs\oArX8`4rtkYBrt##;rt,/J
rtYPArYGMRrtYMErtPJMrWrN1rs\l<rsAZ.rtbVHr!39<!#GPSrttbPrYGMHrrrB.r!NH1rs&B'rrrE,
rrrB-rs\l2rsA]7rX]#?rs&H*rt#,>rXJl5rs&H=rser8rt#,MrZqLZrrrB/rs&K.rXSr7rXo/7rrrB,
rs8W6rX/Z3rsJ`c!#u%[%M&IIrs/N,rsSi<rYGMRrsJ`Gs!@[\rXJl9r"K)KrYb_KrsJ`6rseu6rXo/C
rt,/Irs\l4rri?1rW`B.rsAZErt>><rXJl=rso#Drt#)Brs\oArX8`4rtkYBrt##;!Y>n]ru1nPrsSfA
ruD%RrXf)Drtt_@rsA]6rXf)9rWW<;rt5/7rtbSSrttbPrYGMHrrrB.r!NH1rs&B'rs8Q1rXAf:rWW<.
rs\l6rs\o3rX&TIrtbSEr<E61rsSf<r<`H=rso&5rWW</rs\l:rtkYKrs&K/r"&fCrXf#8rWrN>rsAZ0
r!*05rsSf5rtPJErY>GFs!%FVrso&<rWrE0rsJc4rXSr@rsAZ/rsSi9rWiH4rWrN3rt55>rs/Q7rXJl8
rt558rsS`.rs&H6s!%J&rZM4Ws"jX(rtYP>rYb_QrYb_DrsJ`@rtk\ErXAf:rs\l4rseu<rX8`0rWiH3
rso#Ws#9rhrX]#=rsSfCrt#,6r!33-rsJc4rWN6'rs8Q1rXAf:rWW<.rs\l6rs\o3rX&TIrtbSEr<E61
rsSf<r<`H=rso&5rWW</rs\l:rtkYKrs&K/r"&fCrXf#8rWrN>rsAZ0r!*05rsSf5rtPJErY>GFs!%FV
rso&<rWrE0rsJc4rXSr@rsAZ/rsSi9rWiH4rWrN3rt55>rs/Q7rXJl8rt558rsS`.rs&H6s!%J&rZM4W
s"jX(rtYP>rYb_QrYb_DrsJ`@rtk\ErXAf:rs\l4rseu<rX8`0rWiH3rso#Ws#9rhrX]#=rsSfCrt#,6
r!33-rsJc4rWN6'rsA]1rsAZ7r!iZ2rs8T2rt#,8rX/T4r!364rXSrBrXSl3rX]#8rrrB-ru(hIr!WK-
rs&K,rX8`;rtGA<rs/Q-rX/Z8rsel4r!*0,rXJl4r!iZ9s""'artPJFr!`Q1rs\o6r"&f5rX8`Brt>;7
rtPJQ"<7m]$Ocq?rs\oOrZqL\rtbS=rrrE/rXSrIrXo/Gru:qLrt>>QrZqLart,/Krs\l5rs&K5rX&N.
rXAf4rs\l6r=8f8rs8T5rsA]0rZ(qdrser4r<WB5rsSi/rWW3+!"/i9(Dm&Vrr`9-rs/Q1rXSi8rs/Q0
rX/Z9rs8T2r=&T/rt#)=rtPGBr<N<4rsA]/rWrNArt##8rWW<+rrrB0rt,2DrX&T0rrrB/rso&<r!E9*
rs8T5rs/K3":YhN.kCT7rtPJFr!`Q1rs\o6r"&f5rX8`Brt>;7rtPGPrso&:rX&T5s!%FfrttbOrWiH,
rsAZ7ru:qLrtbVRrXo/CruV.bruM+NrYtkGrX&T/rso#7r<N<1rs8W5rX&W8rXSo9rs8T5rsA]0rZ(qd
rser4r<WB5rsSi/rWW3+rsSiCrWrN+r<`K4rXf)<rY#59rsAZ8rtbV=rX&T.rso#8rs&K?rXf)grX]#9
rs\l6rs\o5rX&T4r!!!0!"&c7#mpS>rt#,@rW`B0rsSf@s"FBhrWiH/rW`B+rs/N?rtbV@rXf):rsAZ7
rt>><rWrN5rXo/Krs\lWrt58:rX8`<ru:qIrs\lBrs\o5rWiH-ru(eVr<iN5rs\o5rX]#Or[S$^&J>'V
rXf)ArtPGArtbVGrY>G@rWN6,rt,/9r<WB-rs&K,rWrN8rs\l9rt55>rs8W3rXSl>rWrN3rser;rt#,5
rWDp"quls)rs\l<rs\l>rs/Q1rX]#Ers&H/!!NE-%M&IFrs&K?rXf)grX]#9rs\l6rs\o5rX&T4r!!!0
rsJc4rXAf;rt,/6rsJc6rY>Gdrtt_?rs8T.rrrE-rYYYNrsAZ9rsJc4rXSr@rsAZ1rser>ru1nGr[\!\
rs8T3!YH"`!#tnIrs\lBrs\o5rWiH-ru(eVr<iN5rs\o5rX]#Or[\!\rt>;Brt58FrXJlCrt,/ErsSf/
rs8W9rX&N/rWiH-rrrB-rt,2=rXJl>rXJl5rsJ`8r=])8rsSi9rXK&A%g<+=rr`$#qum$+rs/Q4rY,2?
rs\o4rY#5>rrrB,rsJc9rY#5@rt,/7rtkYFrso&?rWrN6rser5rsS`0rrrB8s![mYrY,;:rs&H*rso&<
r[@dgrtYM<rsAT-!YuOdrtYPJrsSf=r=Al6rs\o;rX]#9rXAf7r"&f:rs\l3rsJc8rY5A>rXAf<r!r`9
ru:qKrso&FrY,;Mrt##4rXJl8rtt_Irt,2QrX]#Jrt#)Jrser2rsSi;rXf)<r!!*'rs&H/rseu5rXf)D
rW`B4rtbSBrt>>DrX&T1rt55=rt58?rX&T/rWrN7rs&H)rri?.rs/Q4rY,2?rs\o4rY#5>rrrB,rsJc9
rY#5@rt,/7rtkYFrso&?rWrN6rser5rsSf2rs/Q-rY,;[rt,/Crs/Q.rWN62rserUru_7UrWiH0r!*0:
rY>GIrsSf=r=Al6rs\o;rX]#9rXAf7r"&f:rs\l3rsJc8rY5A>rXAf<r!r`9ru:qKrso&FrY,;Mrt#)6
rs/N4rsSiDrXo/Aruh:Oru:tKrYtkHrWW<0rt#)?rs\f/rri?+rX&T6rs/N7rtPG:rso&ErXAf>rt55:
rs8W:rXAf=rser6rs&H.rt#,6rWE0'rs8W.rs/N7rser8rrrE,rX&N.rWN6/rs\l9rsSi4rW`B0rY#5C
rt#)4r<N<-rt>>?rX&T/rXf)Jru:qIrseu:rWiH;rt,/?ru:kLrt#)?rrrE2rXo/MrsSf?ru(hKrX]#;
rs8T/rtGACrsJZ3rtbVFrXJl8rtkYMrs8T8ruh=lrY#5Hru:qKrsA]4rY>GMrtYMArs&H0rtPJ>rWrN5
rsSfIs#0lbrXAf5rXSr;rs/N7rs/Q,rWW6+rWW<.rs\l:rt#)9s![mer!<</r!36;rXAf;rt55Krs/N1
rt589rWW<,rs8W.rs/N7rser8rrrE,rX&N.rWN6/rs\l9rsSi4rW`B0rY#5Crt#)4r<N<-rt>>?rX&T/
rXf)Jru:qIrseu:rWiH;rt,/?ru:kLrt#)?rrrE2rXo/MrsSf?ru(hKrX]#;rs8T/rtGACrsJZ3rtbVF
rXJl8rtkYMrs8T8ruh=lrY#5Hru:qKrsA]4rY>GMrtYMArs&H0rtPJ>rWrN5rsSfIs#0lbrXAf5rXSr;
rs/Q8":teC"9e]-r<WB+rsA]6rXSr=rX/ZRruCqBrsAT.rtbSBrt#,ArYkeArX/Z;rs/N,rs/Q2rs8W0
rX&K.rs&K.rWE*(rWW<.rtbSDr<<*)rX/Z5r!NH1rso#6rtbVIrYtkFrXAf>rsSf7rtYPFrXJl9rsAZ1
rsJc6rXo/=rX\r;rX]#drsSfGruM+KrY>GArso#:rtYMLrs\o5rYPSfrtbSHrsSiNr!r];rtbVRrXSrJ
rtGANrs/K0!"/Z4rYGMlrX]#CrsJ`5rt58>rY>GKrrrB1r!NH.rsSf5rsAT.rt58BrWiB+rXf)ErWiH5
rsSf/rrrE,rWrN1rtkYCrtPJ>rYke?rWrN5r!*0)rsJc3rs/N0r<NN3"pP;;rWE*(rWW<.rtbSDr<<*)
rX/Z5r!NH1rso#6rtbVIrYtkFrXAf>rsSf7rtYPFrXJl9rsAZ1rsJc6rXo/=rX\r;rX]#drsSfGruM+K
rY>GArso#:rtYML!"8o;#RLDGs"FBfrY#5=s!%@NrXf)Fru:qIruD%PrYtkBr!NB1rYGMlrX]#CrsJ`5
rt58>rY>GKrrrB1r!NH.rsSf5rsAT.rt58BrWiB+rXf)ErWiH5rsSf/!X/`3!!`E.rsA]ArXAf@rsAZC
rrrB-rsel1rrrE0rs8W0rX&K.rs&K.rWE*(rWW<.rtbSDr<<*)rX/Z5r!NH1rso#6rtbVIrYtkFrXAf>
rsSf7rtYPFrXJl9rsAZ1!"&c7$OcqGrs\l;r=8f;s#'farZ(qYrserBrs\o;rXAfArYPSCrs8T?s"FBf
rY#5=s!%@NrXf)Fru:qIruD%PrYtkBr!NB1rYGMlrX]#CrsJ`5rt58>rY>GKrrrB1rX/Z4rs&K2rX/Z3
r!366rt,/7r<E64rtYM<rso&:rWN6)rs&H.rsA]ArXAf@rsAZCrrrB-rsel1rrrE.rsSi6rYGMCrX8`5
rt,)5rs8T/rt,2FrYYYDrs&H3rs8T/rs\o8rX/Z>s!n!`rtk\FrXo/:rWW<6ruV.MrsA]5rWiB-rWiH1
rsAZ1rs\l9rtbVQrXAfCrsAT7rtbSCrseu=rWrN:rXo/:rso#:ru_7VrY#5<r"/lWrZ_@NrsS`@rt>;C
rrrE2rY,;?ru(eSru(eErsSiBrY#5Ers\l;rsJc3rXSr9rXJl5rser=rttbIrX&T7rt#)8rseu6rYPSR
rWi9'rs&K+rX8`=rt#)9rt58<rYYYCrWW<,rs&H*rrW3+rsSi6rYGMCrX8`5rt,)5rs8T/rt,2FrYYYD
rs&H3rs8T/rs\o8rX/Z>s!n!`rtk\FrXo/:rWW<6ruV.MrsA]5rWiB-rWiH1rsAZ1rs\l9rtbVQrXAfC
rsAT7rtbMArt#)7rt>;CrsA]8rXAfKrtbSHrsJZ8s!dpkrs\o8r"oAGrXo/6rs\l?rs\oFrYkeSrXAf7
rtbSHrtGD@rX]#9rs8T6rsSf8rs8W6rXf)Hrt,/9rso&>rX&T6rs8T?ru:qBq??m'rri</rt>>BrX/Z;
rsJ`BrsSf0rs/Q.rWN6&rs8W7rs\l5rs8T>rtYPErX8`5rsAZ4rtYPCrXSr:rsJ`9rt>;=rsJc4rXAf>
rsnr5rt5/9rWiH3s#0ikrt,2GrYPSCrs/N0rt,2;rX]#<rXSr9rser9rs&K4rX&T<ru:qErso&8rXf):
rY#5?rso#8rt>>WrYPS=rs\lcs#C#j";(qH)&`Ddrs8W2rX/Z2rsSf8rsJc:rZ(qIrY,;IrsJ`Aru1nM
r[%LRrXSr8rXf)<ru(eUrso&6r!NH.r!NH0rXSr=rWiH+rsAZ4rsA]0rX&T:rs\l5rsJc8rYPSGrW`E,
rWW9'rrW3+rso&;rX&T1rYGMKrt#):rsJc4rX8`@rser;rs\o7rX]#ArX8`5rsAZ5rt>>Ar!EB8r!NE.
rs\ocrY>GErtbSMrs\o4rX&T9rsJ`9rser;rsSi9rXAf2rseu7":5_T)]Sb`rso&8rXf):rY#5?rso#8
rt>>WrYPS=rs\lcs#BuirsA]CrY#5:rsAZ3rs8W4rXJl7rt#)Krser@rtbVArYPSQrt>;Wr=Al;rsJ`:
rs\oFrZ(qJrs/H/rs&E/!X]2=rXSr=rWiH+rsAZ4rsA]0rX&T:rs\l5rsJc8rYPSGrWiB*rWE0%r<`B/
rs/N5rtbVBrX/Z6rs/N0rtkSBrs/Q7rXSr>rWiH/r!!*.rsJ`5rs8W6rXSr>rWrQ/!X9/GrYb_Qr"]5F
rsel6rs8T1rso#Ar=Al4rsA]ArY5A?rt558r<iN9rs&H3r=Jr<rt58HrYb_Prt>;Orso#8rt##:r<iN6
rs\o4rXSrEr"&f4rXo8L(_$HSrY,;;rtGAPrs\o?rXAfHrY5A?rt,/;rs/Q4rXSr=rs8T4rso&FrX8`3
rWW</rrrB,rrrE/rX/T0rXSr:rso#5rs8T.r<3*%rrW-*r!NH/rXSrDrsSf5rs\o4rWrQ@!#PPBrs/Q7
rXSr>rWiH/r!!*.rsJ`5rs8W6rXSr>rX&T/rt#)HrttYKrtGDAr!WN1rX&T7rY,5@rWiH0rtkYKrsSi=
rWiB/rXo/7rXJf;rXSr?rtbSO!Z)Xc!##8Orso#8rt##:r<iN6rs\o4rXSrEr"&f4rY#5Jrser@rs8W<
rZ2"Irt>;>ruD"PrsSi<rX8`2rs\l:rt#,8rXAf:rtkYBrs8T-rsJc0rWiH,rsAZ3r<WB4":P\K%L<"=
rs8T.r<3*%rrW3?rsJc7rWiH1rXJl;rsJ`5rs8W0rWW<0rs8T2rs8W8rW`B+rW`B.rs\l5rttbGrX8`9
rsJ`:r##GCrs8T8rseuCrZ(qQrser7rs/Q0rXAf:rX&c>&.oKsruh=hrt55:rsJc@rZM4WrserDrsJ`6
ru1nJrX/Z=rsnr;rtPGBru1kKruh=MrX&N4r[Rq%rs\ldrtYP@rXo/>rWrN6s#BusrsS`9rsSi?rX]#S
rYGM>r!!*.r!EB6r!NH:ruM(FrsJ`9rso&7rX/Z0rsJ`:rt#,9rXSr9rsAZ-rsJ`2rs/Q.rWW<'ruD%G
rs\l3rsJ`7rso&9rX8`3rs/N,rsSi4rX/Z2rt#)5rrrB+rs8W5rX&TArso#9":bnK$5!4Kr##GCrs8T8
rseuCrZ(qQrser7rs/Q0rXAf:rX/Z:rt55Qs!RgYrX&T3rtYMUrtk\ErYPSArXAfFrt#)9rtGDBr"&fA
rXSrHrXo/Qrs\l5r=/`Us"OH]r]'omrsJ`;rser5rso&grYtkFr"/l9rtGABs!7RZrs8N+rsS`2rt##7
rt>>PrX&T3rX]#=rs8T2rs&K1rXf)?rsAZ7rsSi5rWN6.rWrN/rs&H+rrW3Ars\o=rXJl>rY,;DrsAZ:
rs8W8rXAf;rrrB-rsAT.rsAZ8rsJc:rXSrLrt55Krt58@rXJl5r!36+rWiH0rt#)JrtGDArX/Z6rsnr9
rX&T;rt,/Ns"s`nrZM4Zs!n!cruh=JrX/Z8rYGMJrser>rtYPMrY5AXrtGA>rs\lCs"XNfrYGMCrsAT_
rserMru1eBrt5/?s!dp^rsJc<rYtkJrser6rs8T.rs8W3rWrN3rs8T1rrrE0rX\rCrXAfArY,;;rs/N/
rs\o;rY,;Ert,/Arseu6rXJl9rX/Z2rri<'rrW3Ars\o=rXJl>rY,;DrsAZ:rs8W8rXAf;rrrB-rsAT.
rsAZ8rsJc:rXSrLrt55Krt58@rXJl5r!36+rWiH0rt#)JrtGDArX/Z6rsnr9rX&T;rt,/Ns"s`nrZM4Z
s!n!cruh=JrX/Z8rYGMJrser>rtYPMrY5AXrtGA>rs\lCs"XNfrYGMCrsAT_rserMru1eBrt5/?s!dp^
rsJc<rYtkJrser6rs8T.rs8W3rs/`5$O[4GrX&T.rsJ`9r>,A@rtYMHrs8W0rWrN4rso#Art>>CrXo/>
rs8T5rs\l6rs8W-rWE0%rtYPErsJ`;ru:qHrso&9rY,;HrtPGCrtGD;rW`B*rs&H1rt#)Er=Al9rt#,<
rXf#?rY#5?rXf)6rrrB.rsJc9rZ;(Lr!iZ;r!E9.rs\o4rXAfDs!Re(ruh=prYYYRrt#)Ys""()rtPJ?
rXJlUrtkYHs!dshrYYYKrY>GHr"&f5rsAZ>rttbMrt#;E%1N[Qr!<90rt#,GrY#5=rt>;@s!%IVrXAf>
rWr9-r!NH0rsSf8rtkSArso#;rs&K0rXJlRrtbS@rsnr<rsSi2rWrN/rW`B)rrW0%rrW38rt#,:rXo/L
rs])?%LrgQrY,;HrtPGCrtGD;rW`B*rs&H1rt#)Er=Al9rt#,<rXf#?rY#5?rXf)6rrrB.rsJc9rZ;(L
r!iZ;r!E9.rs\o4rXAfDs!Re(ruh=prYYYRrt#)Ys""()!#,JK$4?bAs![m`rXo/ZruV.VrtGAHrtG;@
rs8W2rY>GMrtPGDrseu9r!<90rt#,GrY#5=rt>;@s!%IVrXAf>rWr9-r!NH0rsSf8rtkSArso#;rs&K0
rXAoT,o-IrrX/Z8r"/l9rs&H.rs/N-rr`9&rWE0%rtYPErsJ`;ru:qHrso&9rY,;HrtPGCrtGD;rW`B*
rs&H1rt#)Er=Al9rt#,<rXf#?rY#5?rXf)6rrrB.rsJc9rZ;(Lr!`W;!"f&7r!NH4rs/N3rttb`r\jd!
s"F?gru1nJr[Rpur\OQgrsJ`7s![m`rXo/ZruV.VrtGAHrtG;@rs8W2rY>GMrtPGDrseu9r!<90rt#,G
rY#5=rt>;@s!%IVrX8i@&d\LCp^I'-rs8W4rXJlDr!`T8rXJl3rsAZ6s!@[\rX/Z8r"/l9rs&H.rs/N-
rr`9&rWE0%ruD%MrsAZ7rser9rs&K.rXSrBrsJ`5rs8W/rWN6)rs&H0rs\l:rsJc>rXAf7rsJ`7ru1n_
rYPSPrYtkGrsAT-r!<<4rsJZ>rtt_Drt#)7rsnr2rsA]BrXAf6s""'urs\o<rZ_A!rZ;(PrsJ`7rt,2=
rXJl?ruh;!ruD"Ur<rT2rsJc7rXJf<rYGMCrs/N-r!<<6rsSf7rtYPNrXJl@rser<s!@XWrso&ArXf)>
rtbSErs/Q0rXAf=rs/N6rsAZ;rso&8rYPSQrtPG<rsA]2rWW<,rs&H)r!!**rs&H*rrW3?rt,2:rXSr;
rXAf2rs/N5rtPJ?rX8`3rs&H*rrrE,rX/Z6rXSr8rtGA?rsSi6rXJlGs!7R[ru(eTrs\o6r!*')rso&9
r"f;LrXAf;rWrN6r!*0-rtt_DrsJcVr[RpVrt#)Qs"s]rrt>>=rXJl=rs\l9rt>>Sr\jcrrYbYBrX&T3
rs\l9r=T#Erseu5rW`9+rt,2<rXAfArtt_ErtGDArX]#TrY#5@rt>;Brso&ErX]#6rs8T4rt589rX]#8
rY#5@rsAZ@ru1nOrWrN1rs8T-rs/Q.rWE'%rs/Q.rWN6&rtPJErsJ`=rser6r<E6)rsSi3rXAf:rsJZ.
rsJ`5rso#Ers/Q6rWiH3rs8T9ruD%UrYtkQrX/ZArtG;9rs&H1rttbPrZ1qTr!NE-rsSi9rXf)Krt#):
r<iN8rs\o>rX&T3rX&T7rs\lCrsJc=rYkeCrt,/=rtPJG";2%K#mpSBrsSi8rX8`>rso#:rsJc1rWiH2
rYb_Frs/N:rtk\CrY#5;rsSf7rt>;CrsAN0rsAZ0rsJc3rX8`0rserHrs8T;rtbV<rXAf=rtGA<r<3*(
rt#,7r!E?1!"Au=#7(52rrN-6rt,2;rY,;@rX&N-rWW<0rs/N3rso&9r!*0.rX8`9rYPS>rso#5rs\o5
rXo/Mrtt_SrtbS@rtk\Kr!<<,rX8`CrtkYTr>GM?rW`B1rser=ru:tKrsJf7r<iN8rs\o>rX&T3rX&T7
rs\lCrsJc=rYkeCrt,/=rtPGFrsJc4rXf);rs\l7rtGDBrXAf6rs&H-rsSfDrseu5rY,;JrsSf=rsA]5
rXAf>rXo/:q@!<0rWiH1rs8T3!!NE-%1W:Urs8T;rtbV<rXAf=rtGA<r<3*(rt#,7r!E?1rseu5rWN6%
rs&K/rsJ`2rs/H*rri<)rs\o=rXJl<rtbSArs/Q0rX/Z3rX/Z0rsAZ5rt#,7rXAfCrsAZ@rtGA9!"/i9
%hJRFru(ejrt#,7rX]#<rsJ`=rt>;<rs\o5rYYYkrtGA@rt>>=rXf):r##G?rXo/Drt>5FruV.YrttbT
rXSr3rX]#<rso#Xr=Jr8rso&Er#PeVrY5ALrYGVF%1rRPrY#59rserBrsJc;rW`B1rY#5Brs&H1rs/Q0
rX/Z3rs/N-rri?-rXAf5rX8`4rs&H/rtYPHrYPSBrrrB.rt,26rWrN/rWrN:rsAZ,rrW3)rs8W3rWrN/
r!!*'rWW<1rt,/=!"T,A()HlWrs/Q0rX/Z3rX/Z0rsAZ5rt#,7rXAfCrsAZ@rtGA9rsSi;r!NHAr\=E`
rs/N6rseu8rY,;ErX/Z6rs8T@s"jZgrXJl?rsJ`:rsJZ@rsAZ:rtGDFr"f;RrYknU(`NGorXSr3rX]#<
rso#Xr=Jr8rso&Er#PeVrY5ALrYPSDrt55Crs/Q5rY>G?rt,/6rsSf=rt,27rX8`2rs8T2rsA]1rW`B*
rs8T4rsAZ4rsA]0rX&T>rt>;IrsSi1rWr]=&-W4Crs8W0rWrN:rsAZ,r<!!%r!!*)rWiH/rr`6(rsSi8
rX]#<rt>;<rrr<)r!!*)rsSfBrsSi4rXSrHrso#2rs&H0rt58JrXf)JrtGA]rtk\@rXJlBrtkYArtkYG
":P\G$4HkArs8W=rZM4Xrs\l;rsSiFrYGMCrXf)GrttSArX8`;s#C!'rserIrt,2?rYk_OrXo/8rs\lB
rtYPLrXSrBr!<<ArY,;BruD"Rrtk\GrWN6/rYkeKrsAZ4rsJc1rX/Z3rs/N8rsSi0rX&T4rXSr3rser?
rso&<rY,;?r!WN3rr`6/rt>;:rtk\@rWE0$rrW3'r!!*)rWiH/rr`6(rsSi8rX]#<rt>;<rrr<)r!!*)
rsSfBrsSi4rXK&L)@d5[rri?+rX/Z;rtt_Hru1nNr[Rpars8T5rtYPMrX/ZArXf)<rsJ`5rs8W=rZM4X
rs\l;rsSiFrYGMCrXf)GrttSArX8`;s#C!'rserIrt,2?rYk_OrXo/8rs\lBrtYPLrXSrBr!<<ArY,;B
ruD"Rrtk\GrWN6/rYkeKrsAZ4rsJc1rX/Z3rs/N8rsSi0rX&T4rXSr3rser?rso&<rY,;?r!WN3rr`6/
rt>;:rtk\@rWE0$rrW3&qum$(rXAf9rsAZ0rt#,;rXSr8rs8T.rrrE.rXAf;rWrH0rY#5=rsAZ1rtYPH
rWrN,rXSr;s#0iirt>>:rW`B/rs8T3ru(hIrX&T7rY5ALr!WN?rsAZ:rtbVCrX&T1rt,/;rs8T:rtYPI
rY#5Nrtt_ErtPJ_r\FKfrX]#8rso#;rt#,ErXAf6rt55>rs8W3rXo&8r=JrKs#L*:rZ;(`ruM(CrsJ`C
rt5/7rsA]/rX/Z=rsSfBrsSi1rXJlKrY#5=rtGABrttbWrXf)>rsAZ/rrrE,rX/Z:rWiH1rs&H(rrN-$
rr`0%rs&H2rseu7rWiH6rsSf9rsJc3rW`B+rs8T4rt#)7r<iN:rsSi5rWrN=rt>;:rri<2rseudrY,;E
rs/N-rsA]2rX8`Drt#)8rso#BrttYArtbV@rXo/Grs\l5rs8W9rX8`3rY#5GrtGAEruD%UrXJlAs!n"'
rtPGCrsA]8rXJl<rtYMArsJc<rXJl5rsJ`;r!NB6rZ2#!s#'css!%I`rW`B0rYb_Jr<NN3#mgb=rX/Z=
rsSfBrsSi1rXJlKrY#5=rtGABrttbWrXf)>rsAZ/rrrE,rX/Z:rWiH1rs&H(rrN-$r<3*(rrrB0rs&K7
rXJf4rW`3(rsA]<rX&T8rXJl=rs/NCs!7UNrX/Z8r!`T2rXSr8rs8T4rt58>r!NH/rWW<=rserGrs\l<
rsJc7rXSr?rsSf7s!%IZrYYSCrX/Z.rY#5@rrrB2s!7UVrX8`=rt#)Fq@!<0rXf)Irt,/8rs&K:ruD4_
',(farXAf7rYtkNrsAZ?s!7U]rX8`9r!`T1rXJl6rs&H/rs\f4rsSi5rX/Z2rsAZ>ruh:Qrso&;rWrN=
rt55;rseu3rWiH,rsJ`3q?R$'rW<*#rrW-%rW`B+rsJr;"pPVMrXJf4rW`3(rsA]<rX&T8rXJl=rs/NC
s!7UNrX/Z8r!`T2rXSr8rs8T4rt58>r!NH/rWW<=rserGrs\l<rsJc7rXSr?rsSf7s!%IZrYYSCrX/Z.
rXo2@!Y,A;rXJlQrt55<rt>>BrYPD=rsAZ9ru(hJrWrN.rtGAPrtGDArXAf7rYtkNrsAZ?s!7U]rX8`9
r!`T1rXJl6rs&H/rs\f4rsSi5rX/Z2rsAZ>ruh:Qrso&;rWiQ?'bLEXrX/Z7rrrB,rrrE0rX&E+rri<&
rrN-$r<3*(rrrB0rs&K7rXJf4rW`3(rsA]<rX&T8rXJl=rs/NCs!7UNrX/Z8r!`T2rXSr8rs8T4rt58>
r!NH/rWN9=!Z2@UrYkeFrXf):rs\l:rt58=rXAfNrtkYOr=/`5rri<6rso&4rXJlQrt55<rt>>BrYPD=
rsAZ9ru(hJrWrN.rtGAPrtGDArXAf7rYtkNrsAZ?s!7U]rX8`9r!WW3#7^\BrsA]0rX&T5r!NH3rsAZ3
rs8W2rY>GUrXo/?rs\l4rtYPGrX/Z7rrrB,rrrE0rX&E+rri<&rrN-#rr`0'rri6+rt,/;rri?+rWrN3
rs8T:rt58HrY,;9rWiH>rsSf5rttbFrXAf6rs\l5rs8T-rs/Q2rWrN2rt55UrtbVKrXAfOs#Buprt#)=
rs8W4rXo/HrserDr=8fJrsnrArsJ`2rs/Q4rXJl?rser9rsA]5rYPSErXf)IrtPGKrs\o=rYb_CrsAZ3
rs\o7rY5ACrY,;Ars8T/rsSi4rX8`?rs\l=rsJ`8rs/Q0rWiH2rtkYFrsJcBrY#5<rt,/>rser6rs\o4
rWrN3rs8T/rsJZ.r=/`6rsAZ0rrrE)rW<$!rr`0'rri6+rt,/;rri?+rWrN3rs8T:rt58HrY,;9rWiH>
rsSf5rttbFrXAf6rs\l5rs8T-rs/Q2rWrN2rt55UrtbVKrXAfOs#Buprt#)=rs8W4rXo/HrserDr=8fJ
rsnrArsJ`2rs/Q4rXJl?rser9rsA]5rYPSErXf)IrtPGKrs\o=rYb_CrsAZ3rs\o7rY5ACrY,;Ars8T/
rsSi4rX8`?rs\l=rsJ`8rs/Q0rWiH2rtkYFrsJcBrY#5<rt,/>rser6rs\o4rWrN3rs8T/rsJZ.r=/`6
rsAZ0rrrE)rW<$!rrW3&rW`B+rXAf5rs/N,rri?,rWrN5rs/N4rt,2IrZ2"FrWrN7rsS`5rsJ`6rsel4
rrrB/rs8W6rWrN5rs\lErt#,ErX&T?rtGAEr#G_Lrsnr7rsJ`ErtPJDrX&T<rsSf@ruh:drseuJrZ;(M
rs\l9rt58=rX]#=rtbeS)B(%RrXf)=rtbSDrs/Q3rX]#8rt,/Crs\l@rt58:r!NH5rXSrHrtkYBr!EB/
rs/N0rs/Q4rX8`5rs\l5rs\o=rWrN7rXJl6rs8T2rrrE-rX/Z3rs&H2rtYPCrX/Z;rWW?(rW;osrrW3&
rW`B+rXAf5rs/N,rri?,rWrN5rs/N4rt,2IrZ2"FrWrN7rsS`5rsJ`6rsel4rrrB/rs8W6rWrN5rs\lE
rt#,ErX&T?rtGAEr#G_Lrsnr7rsJcF"</$h%hJXGrtGD?rY>GUrZqLQruD"Zrt#,<rXJl>rsSf:rso#E
ru1ndrXf)=rtbSDrs/Q3rX]#8rt,/Crs\l@rt58:r!NH5rXSrHrtkYBr!EB/rs/N0rs/Q4rX8`5rs\l5
!"8o;&.ngHrt#)<rsA]2rX/Z/rs/N1rsA]0rXAfArser7rt557r;ufrrrW3)rX&T/rX8`7rs&H-rri?/
rWrN2rsSf4rs\o=rY#5?rX&T6rsJ`Art#,:qum$)rX/Q.!"/]4rXSrFrt>;Gru1nLrWiH-rsJ`Us"XKh
rt,2VrXJl3rs/N4ruD%ZrX&T8rso#Aru1kZrtk\Vr\FKcrso#ErtPJBrW`B3rXAf7rtkY?rt58grY5A>
rt#);rsA]:r!iQ4!"Ju=rX&T8rt,/;s!ds`rX/Z2rWW<0rs\l4rsA]5rXAf7rs8T.r<`H4ru:qHrsA]8
rX&?*rso#:r=/Z=rW`B(p]:Brrs&H/rs&H1rs\o3rWiH+rsJ`2!"&c7$Ocq?rs\o=rY#5?rX&T6rsJ`A
rt#,:qum$)rX/Q.r<iN6rttbKrY>GOrt558rs&K1r[\"'rYPSGs!@XRrs&K.rXJlIruM(Frt#,>rY,;M
rZM4WruV.prt58@rYGVM'Fb$OrW`B3rXAf7rtkY?rt58grY5A>rt#);rsA]:r!iQ4rso#7rt#,@rX8`T
rtbS@rs8T-rsSi8rWrN1rsSf7rsSi4rW`<-rXJlHrXJl6rso#7p^$m0rXA`7!#5AGrW`B(p&Y0rrX&T5
rX8`5rs/N/rrrE1rX/Z9rser7rs\o;rYPSBrW`B5rsSf;rs8W0rWW<)rt#)Jru(eQrsSi6rX&T@rser>
rso&;r!36.rYb_TrWiW<&0)Z"r=8i:rYb_Grser<rs8W8rYGD?rtbVQrY,;Erser;rtGDLrX/Z:rY5AB
r!*05rtG;:ru1kGrs&K0r!WK8rsSi=rX]#Art55Es!%IPrY5A?rX&TBru:qIrsA]6rXJl6rr`6*rrrE,
rXAf<rX]#5rsAZ0rs8N/rsJT4rt55Erser2rrVlprri<-rs\l7rsJc2rWrN-rsSf5rt#,=rX/Z6rso#E
rsSf1rt#,;rXf)8rs/N,"9\i<%ibNfru(eQrsSi6rX&T@rser>rso&;r!36.rYb_TrWrN8ruCqHrserF
rso&<rX]#7rt#)Er!`T@ru1kMrt>>@rXSrArtt_Brt,/Drsnr2rt58Er!EBArXJl3rsAZ4rsSf;rsSi=
rX]#Art55Es!%IPrY5A?rX&TBru:qIrsA]6rXJl6rr`6*rrrE,rXAf<rX]#5rsAZ0rs8N/rsJT4rt55E
rser2rrVrrrrW3&rX&T=rXJl=rs8T6rsJc4rX/Z<rt557rs8W6rXeu3r<WB5rsJc2rWrN,rs8T=rtkYB
rsJc1rX/Z2rs\lJs!%IPrX]#Ort>;=rser7rsA]8rXf)>rs8T9r<iN:ruM+LrY,;CrXJl6rs/N2rt>>=
rWiH5rtbSBrs8T1rs8W.rXSr>rs/N=rt#,9rWiH9ruM(UrtbS`rtPJJrX]#9rser@rseuArXJl4rX/Z>
rtYMArs8W5rYGMCrs&H1rri?*rXAfDrX]#4rsAZ3rs8W4rXf)Frso#Krt>>CrX/Z3rWW<'p]:Brrr`6,
rtPGArt,29rXSr8rsAZ3rt>>DrW`B.rser=r!***rX]#9rs/N/rri?-rY>GLrX8`5rs&H0rs8W5rZ;(`
rser<ruh=SrX8`8rX/Z3rso#>rso&7rXo)9rY#5Orso#Art,/=rsA]1rX8`=rsJ`1rso&ErXAf4rX&T1
rrrB3rt,28rYGMErsAZ0rt>>PrYYYNr[Rp^rtYMDrsJc8rY,;@rtGA@rs/N1rtPJJrsT#=#RChIrYGMC
rs&H1rri?*rXAfDrX]#4rsAZ3rs8W4rXf)Frso#Krt>>CrX/Z3rWW<'p]:<prWiH@rXJl<rt>;8rrrE0
rXJf5rX]#:rsJ`5rt#):rs/H0r<WB-rs&K3rX/Q0rsJc2rXSr4rs\lLs"=<grXSrCrs\f:r!36-rXJl;
rsAZDs""*XrXSrPrserDrsS`0rsJ`;rsSi9rXAf7rs8T5r!<<6rs/N1rtbVCrXf)?rso&9":>q]&eb0T
r!rZ?r!WN2rXJl=ru:qCrsAZ1rsJc1rXSrDrs\l;rsJc0rY#5=rrrB/rt55<r<N<0rsA]1rXSrArser9
rrrE*rW`B2rWMoqr;us'ru(hG":YkP&eb0JrrrE0rXJf5rX]#:rsJ`5rt#):rs/H0r<WB-rs&K3rX/Q0
rsJc2rXSr4rs\lLs"=<grXSrCrs\f:r!36-rXJl;rsAZDs""*XrXSrPrserDrsSc1!XB&>rXo/<rser9
rsSi4rXJc2rt,28rX/Z@rs\l<rt#,>rX/ZArt>;Br!rZ?r!WN2rXJl=ru:qCrsAZ1rsJc1rXSrDrs\l;
rsJc0rY#5=rrrB/rt55<r<N<0!XT/<!!iK5rtGDArXAf1rri<*rs\l0p&Y*nrWiH@rXJl<rt>;8rrrE0
rXJf5rX]#:rsJ`5rt#):rs/H0r<WB-rs&K3rX/Q0rsJc2rXSr4rs\lLs"=<grXJoC!Yl+Pr"/c2rs8T5
rso&8rYtkfrs\l:s!%IPrYPSBr!36/rXo/<rser9rsSi4rXJc2rt,28rX/Z@rs\l<rt#,>rX/ZArt>;B
r!rZ?r!WN2rXJl=ru:qC!XT/=rs8W3rs&H4rtbVCrX]#9rrrB7rsSi1rX/Z;rX8Z0rX8`4rs/N5rtGDA
rXAf1rri<*rs\l0p]:6mrWN65rY#5;rso#8r=/`>rsSi9rYtkSr!iZ=rXJl4r!<</rs8N1rs\lBrso#3
rs&K/rX/Z8ruV.Jrt#,@rX/Z7rso#7rs\l7r<`H4rt58@rXJlHrs\l>rt#,LrZM4UrX/Z.rs&H9rtk\F
rX8`:r!WN8rX8`TrtYMQs!dsarYb_NruD"Urt58>rWrN7rX/Z;rs\l<rsJcGrYGMGru1eArWN6+rs8T;
ru(hIrY#5Grs\lIrtbV<rW`B+rX/Z2r!EB8rsJ`9rtbVBrX/Z/q?Hp$ncA^mrt55CrsA]8rX/T5rY,;>
rserHrttYCrt>;?rs/H-rsA]2r!WN5rYGMDrWW<+rs8T2rso&MrXAf;rt,/:rseu<rX&T5rX8Z2rXJl>
rso#;ru:tHrY#5AruD"\rtYM?rri?+rY,;Jrso#9rt##8rt#):s!ds_rZ(qertkYPrtYPRrYb_Jrs\l4
rt#)9rt58>rXf):ruD"Rrt58Lr!E?*rs/Q0rY,;Lrt#)ArtYPBrZ2"SrrrB+rrrB/rs8N/rt58<rX]#E
rsSf5rrr6'rWDcnrrW0&rsSf7r<WB2rso&<rXSr;rtkYJrtYP<rX&T1rX/Z0rsJ`5p^I07rZ;(QrX8`5
rtbSBrsSiPrXAf>s!7RXrsA]NrY>G@r!r`CrXSrPruD"Lr=&Z8rt,2>r#PbIrsA]?r[%RSrt55@r>5GY
ruV1P";)Cb'GUNcs!@[OrXAf<rs\l;s"OI$rYYYMrX]#Mrt559rso&OrYkePrt55Hrso#5rsJc9rYGME
qAB5@rYGMCrsJZ/rX&T.rs8T2rt#,;rXSr>rt55Crs&K0rWrN+rW3'#o`>'orWN6/rXA`2rXAf:rser;
rseuErY,;Hrs&H/rs8T2rs&K1rX8K0rt55OrtGA>rsJcArXAf7s!7RPrt>>WrY5A=s!7RYrsS`7rtkYE
s!%I_rt#/Ar=&Z8rt,2>r#PbIrsA]?r[%RSrt55@r>5GYruV.OrtbVKrYtk`rsAZ5rt,2=rX]#_s![j`
rtYMDruV1PrWrN6ruh:ZrtbVHrYPSErWiH1rso#Drt"rCrs\lB!"Au=$4?\9rX&T.rs8T2rt#,;rXSr>
rt55Crs&K0rWrN+rW;WkrWE0,rXSr6rs\lFrtGDDrX8`4rtYMHrt,27rWrN3rXSr?rs8T/rseuDrY5AL
r!NH0rX/]:!Y5nVrWiH>rtPGFrso&JrYb_ErsJ`Js#9omrt58Oq@3ELrtbVIq@EQ5rso#Gs!@[PrX&T4
ruD"Rrt58[r\OQgrXf)9rtt_Lrt#,:rX]#Cs"s]ks"==0rY#5=rWiQF*"W)]rWW<2rs\l;rso&9rXJc:
rseu9rX&T1rtYMCrt#,;r!<<,rWiH2rX&T8rt,/7rs&K?rXf)8r!EB/rsJ`0rr_]jrWE0,rXSr6rs\lF
rtGDDrX/]4!XTSVrY,;Crs&H.rsSf9rt58:rWiH4rtbSJrttY@rs8T3rt#,BrWiH>rtPGFrso&JrYb_E
rsJ`Js#9omrt58Oq@3ELrtbVIq@EQ5rso#Gs!@[PrX&T4ruD"R!YH"n!%In'rtPGDrsA]BrY5ACrsJ`9
rtPJirYPSes#0ihrsSf3ruD%MrWW<2rs\l;rso&9rXJc:rseu9rX&T1rtYMCrt#,;r!<<,rWiH2rX&T8
rt,/7rs&K?rXf)8r!<K3#RUnCrs&K*mfEChrrrB7rt#,;rY>GGrtGADrs\oArX]#6rsSf5rs&H2rtGD<
rWiH2ru(eqs!%IOrWrN2rX]#;rs8T3r<iN3rtk\CrXf)FrtkYCrtYMF":>JJ&N'MEs!7U_r\jcqrtkYO
s![mtrY#5@rZ2"Yr!<<3rs\l9s#'g4rX]#9rW`B2rtbS?rt,)HrtGDYrX/Z@ru(eDrsJ`1rsSi6rWrN;
rt#)=ru(hBrYPSArW`B0rs/H2rs\l2rsJc2rWW<-rs&B-rWrN:rso#8rt>>OrX8`0r!363rser2rrVWi
rW<*'rY#5ArsSf@rt>>FrXo/=rtPGCrs/Q3rX/Z0rXAf?rs8T/rsSiEr\t$)+q+kcrs8W3rX]#;rs8T3
r<iN3rtk\CrXf)FrtkYCrtYMFrsJc<r\XX#ru1kpru:tSrYYY`s""']rso#KruCqBrseu:rXJlbs"jWb
rsJ`0rs\oCrX&T9r#5SKs!@XOrtbVPrX8`5rWiH2rsJ`2rtGDCrXSrGrs8T?rsJ`0rsJc2r!iZ7rW`B0
rs/N,rs8W/r!E?.rt>>ArX/Z<ruD"Grrr<*rso&<rWW<'liI+hrW`B7rs/N1rt,2Hr!NH8rXAf3rsSf4
rs&H)rs8W6rWrN/rso#Brs\o<rX/Z3rX/Z0rsAZ0r=Al@rsA]4rXJlDru1e@rXJl3rs/N?rtbVOrY5;@
rYYYVrtYMBrtkYTrttbDrX/ZFrtPGLrt58IrXo/;rWW<3rtGA>r>5GDrsSi8rX&T?rt558rs8T-rsA]>
rXo/@rt>5>rrrB.rri<0rsS`2rseu6rWW<.rsSf1rs8W2rXJl1rWW</rs/N7rtGDArW`B*rsAZ1rtbVC
rWE0%liI+hrW`B7rs/N1rt,2Hr!NH8rXAf3rsSf4rs&H)rs8W6rWrN/rso#Brs\o<rX/Z3rX/Z0rsAZ0
r=Al@rsA]4rXJlDru1e@rXJl3rs/N?rtbVOrY5;@rYYYVrtYMBrtkYTrttbDrX/ZFrtPGLrt58IrXo/;
rWW<3rtGA>r>5GDrsSi8rX&T?rt558rs8T-rsA]>rXo/@rt>5>rrrB.rri<0rsSc3":5MH#RLD5rsA]5
rW`B.rsAZ6rri<)rsJc2rXf)Crser3rri?.rWrN>rs\l/rrVNfrri<*rt589rX/Z:rtkS?rt,/<rs/Q3
rX&T/rWE0+rser5rs/Q6rY5A@rt#)9rsAZ3rs&K0rWiB4rY,;<rsJ`7rtk\Rr!<92rs&K.rYYYNrtt_L
r=8fDruV1TrXJlDrZ2"UrsSf5ruD%QrYYYIrtkYHrsJ`/rso&BrX8Z@rX]#:rs\o6":5hZ&J>!Irs8T-
rsA]>rXo/@rt>5>rrrB.rri<0rsS`2rseu6rWW<.rsSf1rs8W2rXJl1rWW</rs/N7rtGDArW`B*rsAZ1
rtbVCrWE0%liI+grs8f7&eYNYrWiB6rWW<,rsJ`<rsA]?rX8`0rWE0(p]pd)rs8W2rX]#:rWrN2rs\f7
rt#)?rt58<rXeo4rsJ`3r<E6/rs/H=rseu>rXAf4rt#)?rtt_S!#,JK&J>!NrttbMrYYYGrtGAUrtt_M
rsA]:rXo/=rt>;Ort>>@r"f;@rXJl6rXf)7rtYMKrsA]GrZ(qFrs/N+rsSf>rt58ErX/Z2rsJ`=s!%I[
rXf)Brs8T2rri6'rs\l5!X]8<!!W?-r<<0)rsA]-rW;?crr`6,rt>>=rWiB6rWW<,rsJ`<rsA]?rX8`0
rWE0(p]pd)rs8W2rX]#:rWrN2rs\f7rt#)?rt58<rX]&9q[*90rX&N-rX8`2r##GCrt,/<rs8W8rXf)H
rYtkOrt55=rttbMrYYYGrtGAUrtt_MrsA]:rXo/=rt>;Ort>>@r"f;@rXJl6rXf)7rtYMKrsA]GrZ(qF
rs/N+!XfALrtGDErtGA=rs8W3rY,;Urtt_Hrt>>;rX/Z.r!!*/rX&T3rrrB-r<<0)rsA]-rW;Zlp]:Br
rWN6,rsS`2rs\f2rsJ`6rso&@rX8`4pBCR$rs/N-rsJc7rXf)BrXSr9rtt_Mrsnr8rso&ArX/Z3rsSfH
s![dWrser3rsSi=rWrN2rtbSRrtG;@rs8T2rt#,HrXSr9rsAZ>rs/Q6rY>GPrZ(qFrsAZ@rseu?r\sih
rs\l:rs\f:r!r`9rt#):rseuHrYYY?r!NH>rXSr:rso#7rs\oBrZ(qVrt,/Grs8N-rsAZ0rs8W4rX/Z8
rri<*rs/H*rrhEarrW0&rs8W4r!EB3r!<<0rXAf:rt55<rsAE'rs&K.rW`B0rs\l<rt>;@rsSiDrY>GC
r!`T8rt>;<rsA]5rZ2"er"8r<rW`B1rt559rsJcArZ(qOr"&f5rX/Z9rtt_FrsSi5rY>G<rso#Cru:qW
rsJc4rYPSDrt55hrt58>rXSr:r"/c9rseu=rX8`8ru1kRrs/H/rtbSDrs\o;rX&T5rtYMQru1nKrYPS?
r!36.rWiH/rsSf5rso&3rW`B-r!!*'irT,]rrrE/rW`B*rs8T3rseu9rXJl4rrrB+rsSf1rsS`1rs/Q0
rX8`4rs&H-rt#)Mrs8W4rX]#?rtt_DrtbVTrXJl8rso#>rsJ`7r<iN=rtbVArWiH/rtYM@rs\o;rWrN5
rYtkHrt,/Crt##9rs&K.rX/Z3rtY_Q%1NLGr!EBArY#5;rsJ`7rsJc9rWrN4rX&E1rt58ZrYYYCrs\l;
ru(eIrt#,=rX8`?rt,/:rttbErYPSCrtbSArso#8rso&ArXJl=rri<)rs&K+rWE*#p]9d`rWE0(rsAZ/
rri?-rX8`8rsSf8rs/Q-rW`B1rW`B1r!<<-rs8T3rsA]0rWiH6rZ;(FrsSf:rt,2IrXAfBruM(JrsSi:
rXf):rXJf5rY>GKrsJc2":#2<'c$]Urs\o;rWrN5rYtkHrt,/Crt##9rs&K.rX/Z3rYGMCrs&B-ru1kL
rsA]4rXJl7rso#6rs\l5q@3H:s![j`rsSi8rX]#HrXf)?rser8rtPJErX/ZBrs\lC!"8o;()HlWrso#8
rso&ArXJl=rri<)rs&K+rWE*#iW9&\rr`*$rWrN4rs/N6rseu4rWiH,rX8`1r!!*)rs/N4rs&K2rXSr:
rXf,7qZd'.rtbSBr>kkLrs/Q.rY#5Gr!iZ3rYb_KrsJ`2rs\o;r!EB-rXSrDrZ;(Nrtt_Lrt>><rXSr;
rt#)9rtPGIrs8W3rWiH,rsSf7rs8W5rXf):rso#FrtPGD!YlFW!"/]0rseu@rX&T4rtbSErsS`8r!EB>
rs8T>ruh=RrZM4Rru1kFrser5ru1nLrX&T.rs/H-rs&H)h?!WXrr`*$rWiK4!Xo;=rX]#<rs&H-rrrB0
rs&B)rs&K.rXJl3rsSf9rs\l=q?Hs-rtbSBr>kkLrs/Q.rY#5Gr!iZ3rYb_KrsJ`2rs\o;r!EB-rXSrD
rZ;(Nrtt_Lrt>><rXJu=%1`FLrX/Z>rY>G=rsJ`1rrrE1rXAf4rs\l<rsJc9rYYYLrXf)ErsJ`0rseu@
rX&T4rtbSErsS`8r!EB>rs8T>ruh=RrZM4Rru1kFrser5ru1nLrX&T.rs/H-rs&H)quPgYr;us$rs&K+
rX&T4rs&H1rt589rX]#6rXf)?rr`6%rri?2rY,;;r!WN8rWrN,rs8T1rsSi;rWrN7rso#CrsJc4rX/ZA
rXf)GrXAf8rsSi<rY5ARrtkS=rt,/DrtGA>rs8W5rXf)BrsJ`7rtk\JrZ(qSrX]#<rsAZ1rsA]2rX&T;
rtt_Brt#,IrY#5Br!`T4rXJl6rrrB6rtPA<rt>;Orseu4rX&T6rsSf:rt>>CrYb_HrtkY<rsJ`5rsA].
r!36)rWrN/rsAZ.h?!QVrWN6*rri<-rsSi2rX8`<rs/N6rs/N7rt#,3rW<*&rser@rs8T3rsSi;rWrN,
rs8T1rsSi;rWrN7rso#CrsJc4rX/ZArXf)Gr!`T5rt,/DruV1Vr!<<6rY5AGrX8`3rs\l<rt>>=rXJlD
rt>;NrtkYFrseu7rWrN1rs8T1rt>>KrX/Z9ru(eKrt,):rsJ`7rsA]/rXo/Er!NH:rZ2"Jrs&H/rseu9
rX]#Art,/Irt#,GrWW</rX8`4rri6)rri<,rs/Q1rWV!VrW<*(rrrB,rs\f2rso&?rYGM?r!N?)rs&K2
rXJl9rs&H-rsSf2rs&K1rWrN7rser4rs\o8rXAf:rsJ`2r!*05s!@XVr=/`<ruV1RrWiH4rt#)?r!NB.
rX8`=rsJ`:ru(her]'odrXJl<rserEruCqHru1nMrXo/Artt_Hrso#6rso&;rWiH1rt#)Grt,)7rser6
rs&K,r!EB:rXJl4rtbS>rs\o:rX&T9rXSr5rs8N+rs/H-rs&H)rrUsVrW<*(rrrB,rs\f2rso&?rYGM?
r!N?)rs&K2rXJl9rs&H-rsSf2rs&K1rWrN7rser4rs\o8rXAf:rsJ`2rs&H,rt58WrXo)<rXo/OrtGA:
rseu=rXeu7r<WB1rt>>=rXf)Is""(.rs\l9rt#,=rYYYTr!r`Frt>;Crt,2IrXf)>rWrN6rs\l3rsJc:
rYYYHr!EB4rX&T/rrrE/rX&T<rXJl4rtbS>rs\o:rX&T9rXSr5rs8N+rs/H-rs&H)rrUsVrW<*(rrrB,
rs\f2rso&?rYGM?r!N?)rs&K2rXJl9rs&H-rsSf2rs&K1rWrN7rser4rs\o8rXAf:rsJ`2r!*05s!@XV
r=/`<ruV1RrWiH4rt#)?r!NB.rX8`=rsJ`:ru(her]'odrXJl<rserEruCqHru1nMrt,AG&.fZqrXf)>
rWrN6rs\l3rsJc:rYYYHr!EB4rX&T/rrr<,rtGA@rs/Q>rWrN4rser6rt,/>rs/Q0r!!**r!<<,rWE0%
i;riWrW<*%rs&H-rsJc6rX]#6rt55Drs/N-r=&T1rs/N3rsJc2rWrN1rX/T0rX&T7r!`T;rser9rt>><
rWrN4rWiH-rso#9rsA]@rZM4Yrser5rso&?rX8`4rX8c7!Xf2:rWW</rt,)GrtbSIr"&f>rser@rt58?
rY>GGrs8T5rtGDNrYtkNrXf)Prt>;;rseu@rYPSOrt558q?Hs+rXJl7rt>;=rt58MrW`B3rs\l;rsAZ0
rsA]4rW`K."UP/8rX]#7rr`6%g&_0Srr`9*rWiH1rsSf:rs/Q9rY,;:rW`<0r!EB.rXAf6rs/N/rsAZ3
r<WB/rsnr8rt58?rX8c>!YPeGrWrN4rWiH-rso#9rsA]@rZM4Yrser5rso&?rX8`4rXAf7rs&H+rsJc;
r#,MMrY,2?rt58?rY,;DrserBrt>>;rXJl@ru1kUrtGACruh=SrX&T6rt>;IrttbJrWiE,r<E9.rXJl7
rt>;=rt58MrW`B3rs\l;rsAZ0rsA]4rWiH,rsAZ8rs8W,rW;EeliI+hrs/N/rs&K/rX]#:rt#)Ort#)8
rs/Q2rWiH1rs&H0rt#,;rXAf6rXf);rt,/:rs8H.rt,/:rtbVArWrN9rX&T8rt55Arso&GrZM4Prs\l9
rs8W:r!NE0ru(hRrXSr8rs&H-rsJc7rXSr=rXJl6rtkYIrs\o:rXo)9r!iZ;rZ2"Nr&OcerX]#Frsnr7
rs8T4r!r`4rtkYDrt>>BrWrN6rt,/8rt58@rWrN/rWrN3rri<*rrr<1rs&K)e,fRPrs/N/rs&K/rX]#:
rt#)Ort#)8rs/Q2rWiH1rs&H0rt#,;rXAf6rXf);rt,/:rs8H.rt,/:rtbVArWrN9rX&T8rt55Arso&G
rZM4Prs\l9rs8W:r!NE0ru(hRrXSr8rs&H-rsJc7rXSr=rXJl6rtkYIrs\o:rXo)9r!iZ;rZ2"Nr&Oce
rX]#Frsnr7rs8T4r!r`4rtkYDrt>>BrWrN6rt,/8rt58@rWrN/rWrN3rri<*rrr<1rs&K)f)bdNrrrB+
rsJc1rWrN2rsSf:rser5rs&K1rWrN3rso#5rrrE-rWrN/rX]#FrtPGKrsef2rs8T4rt58HrXJl=rX&T8
r"B#DrtYMHrt#,ErZ;(LrrrB-rs\l5rso&JrY5AErserCrt,2FrX]#@rtbeS()@;erY5AIrs\l6rt58>
rWW<-rt#)=rserErtk\SrXo/ArsAZ1rsSi;rXo/;rXAf9rsAZ3rt>>?rX&T?rs8T/r<iN-rsSf8rsA]0
rX/Z2rsAZ-rr`9&nH%eRquZm%rW`B0rs&H.rsJc6rX]#<rWrN.rsJ`2rsSi:rWiH,rs/N/rs/N6rtk\L
rYPSDq?d0-rXAf=rtbSCrt,/9rt##?rtPJJrt>MK%hBBirZ;(LrrrB-rs\l5rso&JrY5AErserCrt,2F
rX]#@rYPSMrs\l@rtYPBrX/Z;rs\l1rs8W8rXSr;rYYYOru:qLrt,2:rWrN3rt#)@rsJ`6rseu7rX/Z<
rs\l5rtbV?rW`E1rX/W.rsSf8rsA]0rX/Z2rsAZ-rr`9&e,fLLrWW<.rri<*rs/Q1rWiH0rWiH-rt#)?
rs&K5rX8Z.rWiH+rWiK>!Yu7Ur!WN5r!<<,rXAfGs#BuhrsSfArsSi8rX/Z9rsAT3ru1k^rt,2?rX&T3
rY5A>rs\l5rtbVHrY>GMs!7RVrs8T5rt58ArX/Z3rso#ArtPJ@rW`B3rtGAErtbSF!XoJD!"&W1rsJc:
rWiH/rsJ`6rs8T4r<iN4rs8W/r!EB-rX/Z1rs8T3r"&f:rtGAIrsJc.rW:FIr;us%!!r]5"9e].rs/Q1
rWiH0rWiH-rt#)?rs&K5rX8Z.rWiH+rWrN>rsnr7rs\f2rs&H2ru:ttrXf);rYGMArs\l6rt#,9r!`TD
rZqLTrso#7rsJ`>rsJc7rX&T?rt55F!Z2b"!$qOVrs8T5rt58ArX/Z3rso#ArtPJ@rW`B3rtGAErtbSF
rs\o6rWrN2rt#)6rs8W3rXAf4rXA`4rXAf4rs&B-rs&H0rs/Q0rX8W7rseuArYGM@rr`6%o`<\GrWN6.
rs/H*rsAZ6rtt_DrsJZ1rrrE,rXSr;rs\l9r!*0,rsAZ1rsSi<rXA`3rYPSHrtkYGr!`c6#6kA;rs/Q9
rtkYArs\f3rt>>SrXf)7rX/Z:rtbSFrttbGrXAf5rtt_Irs8T8rso&9rX]#JrtGAErt#,ArY5;@rX/Z<
rYYYErsAZ3s#C$9rX]#=rsSf:r!NH7rsS`1rsJ`5rsJc:rWrN.rsAZ3rtkYCrtYPFrWiH+rrU:CrWN6.
rs/H*rsAZ6rtt_DrsJZ1rrrE,rXK&?%1EXSrsel1rs8W2rWrN3rt,/<r<`H>rt58IrXeu:rs/Q.rWiH8
rtkYArs\f3rt>>SrXf)7rX/Z:rtbSFrttbGrXAf5rtt_Irs8T8rso&9rX]#JrtGAErt#,ArY5;@rX/Z<
rYYYErsAZ3s#C$9rX]#=rsSf:r!NH7rsS`1rsJ`5rsJc:rWrN.rsAZ3rtkYCrtYPFrWiH+rrUFGq>pTu
rs&H-rri?+rWW<2rXSr7rser7rso&7rX&T5rtkYErsAZ/r<N<2rsJc3rXSr8rrrB3rsA]7q$d9/rs&H0
rso&;rWrN5rsJ`2rt,2CrX&T/rXAfBrtGAJrt58>rWiH2rso#7rs/N1rs&K6rY#5>rt#)9rsSiDrZ(qG
rs&H/rtYMDq@3H>rt>;?rsJc7rXJl9rX&T6rsAZ6r<`B1rs/N,rt,2CrXAf5rX8`;rt55<rri?'q>nhA
rr`9*rWiH+rs&H+rser;rsA]7rX/Z8rs8T1rs\oDrXSr7rW`<+rXJl7rs8T6rsJc0rXSr7rsel7rXAf4
rs&H0rso&;rWrN5rsJ`2rt,2CrX&T/rXAfBrtGAJrt58>rWiH2rso#7rs/N1rs&K6rY#5>rt#)9rsSiD
rZ(qGrs&H/rtYMDq@3H>rt>;?rsJc7rXJl9rX&T6rsA]7!"Jl5r!`T1rWW<5rt>;>rsAZ4rt,2BrX8`/
rrU1@rr`9*rWiH+rs&H+rser;rsA]7rX/Z8rs8T1rs\oDrXSr7rW`<+rXJl7rs8T6rsJc0rXSr7rsec4
rs8W/rX/Z8rs\l4rseu8rWrN8rt>;;rs&H2rtbVJrYPSHrs\l3rsSi:rX&T0rX/Z0rt#)Ars\o<rX/Z5
rttbU"<7dW"pY&5rtYMDq@3H>rt>;?rsJc7rXJl9rX&T6rsAZ6r<`B1rs/N,rt,2CrXAf5rX8`;rt55<
rri?'eH,4Ar;us'rs\o6rWW<-r!EB=rW`B<rt,/9rsnr5rri6'r!<</rsJ`5rsA]0rXAf5r!<3,rs/Q2
rX&T4rsJZ7rs/N/rt#,<rX&T0rX8c:!Y,_Or!E9,rsA]1rWW<-rXJl5rso#Frs\o7rXAf7rser4rsA]0
rWrE,rseu?rY5AIruV.Jrs8W9rY,;DrXAf4rt>;Crs/Q4rX&T,r!!*0rs8T8ru(eWs!%ISrW<3'!Wg7@
r;us'rs\o6rWW<-r!EB=rW`B<rt,/9rsnr5rri6'r!<</rsJ`5rsA]0rX8c5!"&Q/r!EB.rsJ`3rsSi6
r"&f4rWrN7rs\l5rs/N3rso&>r!E9,rsA]1rWW<-rXJl5rso#Frs\o7rXAf7rser4rsA]0rWrE,rseu?
rY5AIruV.Jrs8W9rY#>F&Ie[Jrs8W;rXo/8rs\l5rr`0&rseu6rXf)IrZ;(`rt,/3rrV*ZirT/]rWW<4
rs\l4rrrB.rs/Q5rWrH5rXSrErs8T,rs&H.rsA]9rX/Z0rso#>r=/`9rsA]7rY#,5rs\o8r!36+rWiH9
rs\l2rs/Q-rW`B-rWrN5rs\l5rtGDFr!NH0r!iW2rs/Q4rXSr7rs8T2rs/Q3rXAf9rt55=rso#7rs/Q7
rZ2"Xrt>5:rs\l6rsAZ3rsSi5rWrN5rtkY@rrrE,q?[!1rYGMHrs&H)^]FH:rWW<4rs\l4rrrB.rs/Q5
rWrH5rXSrErs8T,rs&H.rsA]9rX/Z0rso#>r=/`9rsA]7rY#,5rs\o8r!36+rWiH9rs\l2rs/Q-rW`B-
rWrN5rs\l5rtGDFr!NH0r!iW2rs/Q4rXSr7rs8T2rs/Q3rXAf9rt55=rso#7rs/Q7rZ2"Xrt>5:rs\l6
rsAZ3rsSi5rWrN5rtkY@rrrE,q?[!1rYGMHrs&H)^&e38rrrE/qum!'rsJc=rWiH4rs8T8s"jZir!*-(
rs\o@rWrN.rsS`2rs\l4rsA]9rZ_@PrWrN3rt>;Hrt>>>rX/Z9rtGABrsSi:rXJl;rXJl7rtYMOrtbVG
rXAf;rso#7rseu:":PPA',1?UrsJc:rX/Z@rt#)Ert58FrXJl;rWrH-r!*0,rX&T9rsAZ/rs8T.rrrE.
rX&T8rsAZ0rri?.rWrN4rsAZ0rso#8r<<0%joO-9rWE0(rsAT+rW`B0rt>;9rseu6rXf)crtYG9rWW<1
rtGA;rs&K2r!EB3rWrN1rt#)Qrso#6rsSi>rYGMHrsSi6":>YM',1?UrsSi:rXJl;rXJl7rtYMOrtbVG
rXAf;rso#7rser9rs8W<rX]#9rt#)9rtbVFrYGMGrtPGArso#6r<N6)rs8T1rt,2:rW`B.rW`B+rs8T1
rt#,9rWiH+rsAZ1!"8o;#mpS9rso#8r<<0%])hp5rr`6+rs/N,rs&K4rWW<0rs8T2s!7UZrW`B*rX/]5
!X]GKrXSr;rs/N/rsJc7rXSr=rtt_DrtkYGrsSi2rXf)Crso#5rs&K5rXf):rs\l:rs8T2rtbVCrXf):
rt,/Crso&9rWrN/rXo/=rrrB,rsJc4rXo/UrtGABrso&9q$6m)!!rQ1rseu8rXAf7rs/N-q?R$0rXf):
qum$,rser7rs8W/r!WK.rr`0#_#aE6rrW3&rWrN/rWW<+rser2rsSi4rX/ZNrtYM;rri</rsJc:rXSr;
rs/N/rsJc7rXSr=rtt_DrtkYGrsSi2rXf)Crso#5rs&K5rXf):rs\l:rs8T2rtbVCrXf):rt,/C!Y,\I
!"/]2rs/N8rs\o2rWiH1rsAZ:s!7UXrX]#=rsJQ,r<WB/rseu8rXAf7rs/N-q?R$0rXf):qum$,rser7
rs8W/r!WK.rr`0#mK(N4rrW0&rs/N0r<N<.rs8W4rW`<-rWiH-rWiH-rs8T:rt#,9rW`B7rtbSGrtk\V
rY5A=rX/i<%1EXTrso&MrtYM>rs\o6r"/l7rX8`1q@3E6rsSZ4rsJ`1r!NH5rt55@rs8W5q?m3;rseu6
rX8`5rXJl4rs&H3rs\o4rWW<.rs8T5rsSf1rs/Q8rYYYDrs&H+rt#,BrWiB)rX/Z1rWE*#[K6C0rWN6+
rX&N.rX&T1rsSf1r<WH/rs/Q.rWiH-rs8T:rt#,9rW`B7rtbSGrtk\VrY5A=rX8`8rs\l:ruV1TrX&T5
rsAT7rsAZ4rs&</rXSr9q@3H3rWi?.rseu?rX]#7rs\`2rYGMCrs8T3rsJ`7rs/Q.rXJl9rs/N,rsA]2
rXJl8rW`B-rt,/Hrs\o3rWW<4rt>;9r<3*,rs/N*r;st>mfEChrr`02rsAZ3rrrE,rWiH/rt55;r!<<0
r!EB,rsAZ0rtk\or[@dWrso#>rserCrsSi4rXJl?rser8rt,#6rso#Brt#)9rs8W6rY#5;ru(eQrt>>B
r!NE0rs8WErY#5;rt#)8rs\o?rXJ]3rs8T.rsA]2rX&T9r!366rtYMUrsAZ9rt58Ir!`T0rWN6,rsJT*
rW`B)liFs(rW<*%r"8r8rX/Z/rs&H-rs8W:rX/Q/rsJZ1rrrE/rWiH>s#9p*rt#,>rXf)=rYGMArs8T5
rt>>@rX8`;q?m64rY5ACrX/Z2rser?rsA]CrYYYJrt##7rX&T1ruD"NrsA]9rX&T5rt>;?q@!</rW`B/
rs8T1rt,)5rt58GrZM4IrXf)Artk\DrXAf2rWN6,rsJT*rW`B)XTAD&rr`02rsAZ3rrrE,rWiH/rt55;
r!<<0r!EB,rsAZ0rtk\or[@dWrso#>rserCrsSi4rXJl?rser8rt,#6rso#Brt#)9rs8W6rY#5;ru(eQ
rt>>Br!NE0rs8WErY#5;rt#)8rs\o?rs\r;q@!</rW`B/rs8T1rt,)5rt58GrZM4IrXf)ArtkSArs&H*
rs8W3q?6d%rr^:Bj8o8_rWN6,rs&B+rser5rso&?rYPS@rWiH5rsJ`0rri?+rWrN2rt#)Jrt>>=rWrN1
rX/Z2rsJ`3r<<0)rsJZ7rs/Q7rYYYRrWrQ-!X&o?rWrN2ru(eOr=Al=r!iZ5rtbSGrtGD<rXJlBrsSf1
rsef2rXJl9r!!$'rX&T6rt,/;rt#)Art,2:r!*0)rWrN.rsAT/rrrB(rrVfn[fQL2rWN6,rs&B+rser5
rso&?rYPS@rWiH5rsJ`0rri?+rWrN2rt#)J!"o>G$4?b<rsAZ3rs8W3rX&N,rW`B0r"&f4rt#)Gru1kC
rri?1rWrN2ru(eOr=Al=r!iZ5rtbSGrtGD<rXJlBrsSf1rsef2rXJl9r!!$'rX&T6rt,/;!Y5eSrt>>C
rsAT-rrrB-rs&K0r!<<+rWE0%e,e/%quZm%rr`6)rsJcGr!`K8rso#6r<<*(r!EB/rsAZ3rrrE0rWrN1
rX\r=rX8`1rs8T/rt,2=rWiB-rXAf7rWiH/rsAZ5rseu>rYGMIrt>;Hrt#)9rsA]6rXo/ErsJ`@ruD%Q
rYkeLrsAZ1rs\l<rsJc3rX8`5rsAZ1rsSi:rX8`;rX&T0r!NH/r!<<5rt556rr`0#rrK,#quZm%rr`6)
rsJcGr!`K8rso#6r<<*(r!EB/rsAZ3rrrE0rWrN1rX\r=rX8`1rs8T/rt,2=rWiB-rXAf7rWiH/rsAZ5
rseu>rYGMIrt>;Hrt#)9rsA]6rXo/ErsJ`@ruD%QrYkeLrsAZ1rs\l<rsJc3rX8`5rsAZ1rsSi:rX8`;
rX&T0r!NH/r!<<5rt556rr`0#XTA(qrrW0%rsA]<rXAf3rsJ`<rsJ`;rsSi5rX]#@rso#9rt>>CrY#58
rrrB-rsJ`1rtbVKrX8`1rsAZ6r=f/<rs8W6rXf)GrX/T4rWiH6rt>;OruD%_rYke\rtY_Q$O[:KrXAf6
rs/N5rsSi4rXAf3rri<*rs8T1rs8W7rXJl6rsJ`6rsSi6rX&T=rX/Z0rso#7rrrE.rXAf;rs8N(eH*_l
rrW0%rsA]<rXAf3rsJ`<rsJ`;rsSi5rX]#@rso#9rt>>CrY#58rrrB-rsJ`1rtbVKrX8`1rsA]7!"Jl?
rX8`3rser=rtkYAr=&Z1rt#,BrZ2"Ys!%F\s!%FXrsSi6rXAf6rs/N5rsSi4rXAf3rri<*rs8T1rs8W7
rXJl6rsJ`6rsSi6rX&T=rX/Z0rso#7rrrE.rXAf;rs8Q)!!8SirWN6+rt##6rs/N3rseo7!Xf>BrYPSB
rs/N3rso&@rX]#<rs&H+rsSf1rsSi>rX/Z/rs/H-rsS`8rso#;rt#)8r=Al3rs8W6rY>GMrt>;;rt>;>
rseu>rXo/@r!36-rs&B(rs/N/rs&H0!XT/A!"Ai4rrrE3rX]#6rs&H2rsS`/rs8T+rrrE-rWW<,rr^CE
rrD*\lN-tfrs/Q7r!EB.rXAf9r!WN3rYPSBrs/N3rso&@rX]#<rs&H+rsSf1rsSi>rX/Z/rs/H-rsS`8
rso#;rt#)8r=Al3rs8W6rY5JO(_Qf]rX&T;rXAf9rt,/Art##4rs8W/qum$)rWrN.rX/Z3rs\l4rrrE3
rX]#6rs&H2rsS`/rs8T+rrrE-rWW<,rr^mSo)\jkciO%Grr`9(rWrH/rW`B/rWW<+rsSf5rt,2BrX&N1
rWN0*rWW<+rWr];%MTTcrs\o5r!!*)rs8N/rs8T,rrr6*rX/Z>rtbSHrt,2@rXf)<rWrN,rs8T?rtbVB
rXJl<rser7rs8W6rW`B-rWrN3rt#)6rsA]<rXAf3rrrB0rs\l2rs8W.rWN6)rr`6'rr`9&QN@!crr`9(
rWrH/!!`H-rsAZ.rs&K2rX/Z:rt55:r<iN,r<WB+rs&H/rso&CrXAf4r!!*)rs8N/rs8T,rrr6*rX/Z>
rtbSHrt,2@rXf)<rWrN,rs8T?rtbVBrXJl<rser7rs8W6rW`B-rWrN3rt#)6rsA]<rXAf3rrrB0rs\l2
rs8W.rWN6)rr`6'rr`9&ZN8n`quZm%rs&H/rs\l9q?[*0rser5rrrE-rWN6-rs8T/rs8N5rs\l:r<`B7
rsSf5rrrE.rYPSOrZ;(Mr!WN;rtkYCrt>>>rWrN5rX8`2rs&H2rsSi2rWiH/rsAZ1rs\o>rY>GDrXf)?
rsAZ6rsS`3rs&K,rW`B+qulp$rri0"h>sk^quZm%rs&H/rs\l9q?[*0rser5rrrE-rWN6-rs8T/rs8N5
rs\l:r<`B7rsSf5rrrE.rYPSOrZ;(Mr!WN;rtkYCrt>>>rWrN5rX8`2rs&H2rsSi2rWiH/rsAZ1rs\o>
rY>GDrXf)?rsAZ6rsS`3rs&K,rW`B+quls%!X/]0q>uZXrrW0$rrrE,rX&T5rXJ]0rs\o:rWrN-rs/N+
rsA]2rWiH/r"&f9rXSl5r"B#;rX/Z/rs8T?rtt_Vrt##8rt>>JrXAf>rsSf3rser8rs/Q.rXAf7rs&H-
rs8W2rs/`5$k*^[rY>GDrXf)?rsAZ6rsS`3rs&K,rW`B+qulp$rri0"\H11\quZm$rWE0*rX/Z3rs/N/
rt#,<rWiH2rsAZ/rsA]2rX&T7r"&f;rX&T4rsAZ:ru(hGrX/Z0rt55HrtbSO!"K&?#mpS?rso&:r!<<,
rWN6*rWrN2rsAZ0r<E6(rsJc;rY#5=rtkYKrso#=rsSi9rX]#ErsJ`5rrrE*rWiH-rWW<.rs&H)q>pTt
joM@\quZm$rWE0*rX/Z3rs/N/rt#,<rWiH2rsAZ/!!r]5#RLD9rsnr;rso#7rsSi5rXo/Jrser7rs&K8
rYPSMrYb_GrsAZ6rso&:r!<<,rWN6*rWrN2rsAZ0r<E6(rsJc;rY#5=rtkYKrso#=rsSi9rX]#ErsJ`5
rrrE*rW`K/"pP#1rsA]0rWDutrrU1@_?'Q9rrrB/rs8W3rWrN6ruD"IrsSi8rX8`3rs&H/rs8T8rt>>I
rWrN1r!`T7rso#9rs\o?rWiH0r"8r;r!*0+rXJl?rt,/7rri<+rs8W0rW`B-rsSf5rseu8rYPSJr"8r;
rYPSYruD"JrsJc9rX8`4rs&H/r!!*)rrV?aPl^darrrB/rs8W3rWrN6ruD"IrsSi8rX8`3rs&H/rs8T8
rt>>IrWrN1r!`T7rso#9rs\o?rWiH0r"8r;r!*0+rXJl?rt,/7rri<+rs8W0rW`B-rsSf5rseu8rYPSJ
r"8r;rYPSYruD"JrsJc9rX8`4rs&H/r!!*)rrSGdiW9&]rW`B/rs\l:q@*3+r=&ZArsJ`1rsA]:rWrN1
rs/N0r=Al7rsSiBrXJc;rt,2:r!!*,rWrN6rsJ`5rs/Q1":5;<#mpS@rsJc6rW`B+rs8N2rsSf9rsSf;
s![mbrWiH5rt,/ArttbFrW`9'rrTt:[/p:0rW`B/rs\l:q@*3+r=&ZArsJ`1rsA]:rWrN1rs/Q1!"&T7
rX/Z5rtbSCr"8r?rsAT,rsAZ1rso&9rX8`2rX&T0rsAZ7rsJc6rW`B+rs8N2rsSf9rsSf;s![mbrWiH5
rt,/ArttbFrW`9'rrVQgL&q5S!WiQ1rWrN:rtGA;rsJZ1rt#,8r"/i6r<iN3rso&?rX]#Ir"f;ArtbSK
rsJ`0rsJc4rWrH,rWiH3rt,/=rsAZ5rs/Q,rX/Z8rt,/6rri?/rXJlGrtGA?rsel4!!iQ1rY,;CrsSf8
rtk\AquW/bfE(mOrs&H.rt>>FrWrN2r!EB6rs8N6rX&N1rX8`9rt,/?ru1eNrseuDrY>G?rW`B0rsAZ1
r<E6+!XoJK!"f,=rsAZ5rs/Q,rX/Z8rt,/6rri?/rXJlGrtGA?rsel4rs8T;rt,2<rXJlDrsAT)_Z?\:
r;um$rs\l3rsSi5rW`<,rW`B1rXK&F'FYBWr<iQ6rXf);rs8N1rs8T7r!NH6rt>;?rs\o:rXSrDrso#7
rs&H1rs8W-rWW<<rtPGCq@<N4r!<<-rW`B*rserBrsel7rri6$mK%n?q>pNrr!*00rWiH2rsAZ/r<WB,
rsSf9rtPJAr!NH5rXf);rs8N1rs8T7r!NH6rt>;?rs\o:rXSrDrso#7rs&H1rs8W-rWW<<rtPGCq@<N4
r!<<-rW`B*rserBrsel7rri6$S,pe6quZm#rrW0%q??m(rs&H*rsJ`2rt,);rsSi5rYPSPrsSf4rt#,9
rX8`:rXSr6rt55ArsJZ0q@*B0rX8`4rrrB.rseu<rXo)ArXf):rs&B+qum$'rWN6)rri<'rrU+>ScS`j
rr`9&rWE!#rs/Q.rWN6.rWrN8r!iZ6rsAZ@ru(hErX&T8rsAZ4rt#)=rs8W:rXf):r!<--rs8T3rsA]/
rX&T6rso#?r=])@rsJc1r!3-&rrrB)rrrE*rWE0%nH"4Bn,`Fgrr`9&rWE!#rs/Q.rWN6.rWrN8r!iZ6
rsAZ@ru(hErX&T8rsAZ4rt#)=rs8W:rXf):r!<--rs8T3rsA]/rX&T6rso#?r=],A":tnI"pXu1qum$'
rWN6)rri<'rrSen_#aN:p]:BrrWE0*rrrB)rs&H.rrrE/rXSr>rsAZ1rs&<+rsSf<rser9!"f,@rWrN2
rsel4rs8T1r!<<3rs/H+r!r`0rs/N1q?Hs)rWW<(qum$%rrW0%aoR_-rW;iqrrW0%!!`Q1"U4l.rs&H.
rrrE/rXSr>rsAZ1rs&<+rsSf<rser9r=Jr6rsJc8r!EB/rX&K.rseu5r!*'/rri?,rX/K+rs/N,rr`0%
rr`9&rWDlqZiT[trrD$ZrrCUNrr`9&rWN6)rWE*&rWiH=rt>;IrsA]0rWiB0rXAf7q?[!&rri<+rri6)
rs8T.rs8N1rrrE3rWrN.r!36+rs/N,rr`0#rrN*#ciM&crrD$ZrrD$Zo`>'prrW0&rrrB(r<<0*rtbVI
rYPS@rs&H-r<rT5rsSZ/r!!*'rWiH+r!36-rW`B.r!WN.rser5rs&B+rs&K.rWW<(quZm!rW<$!VZD;
~>

%%EndBinary
grestore
np
12 lw
10 ml
125.86 483.254 mo
125.86 493.575 117.493 501.941 107.172 501.941 cv
96.8509 501.941 88.4849 493.575 88.4849 483.254 cv
88.4849 472.933 96.8509 464.567 107.172 464.567 cv
117.493 464.567 125.86 472.933 125.86 483.254 cv
cp
0 0 0 0 cmyk
@
2 lw
95.4468 482.799 mo
95.4468 475.977 100.898 470.445 107.622 470.445 cv
114.345 470.445 119.797 475.977 119.797 482.799 cv
119.797 489.621 114.345 495.153 107.622 495.153 cv
100.898 495.153 95.4468 489.621 95.4468 482.799 cv
cp
1 1 0 0 cmyk
@
1 lw
128.068 504.132 mo
87.243 504.132 li
87.243 463.308 li
128.068 463.308 li
cp
0 0 0 1 cmyk
@
128.068 463.308 mo
130.06 465.551 li
@
[3.168 3.168 ] 0 dsh
132.164 467.919 mo
135.32 471.471 li
@
[] 0 dsh
136.372 472.655 mo
138.364 474.897 li
@
128.068 504.313 mo
130.311 502.321 li
@
[3.168 3.168 ] 0 dsh
132.679 500.216 mo
136.231 497.061 li
@
[] 0 dsh
137.415 496.009 mo
139.658 494.017 li
@
0 0 0 1 cmyk
GIBHKR+MyriadPro-Regular*1 [8 0 0 -8 0 0 ]msf90.9312 459.755 mo(distal side)sh1.001 lw
8 ml
390.109 222.407 mo
369.841 242.675 li
.746 .676 .668 .898 cmyk
@
374.342 244.396 mo
365.013 247.503 li
368.12 238.174 li
cp
ef
324.593 287.548 mo
324.593 293.569 li
401.079 293.569 li
401.079 287.548 li
cp
/2 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 0 524.436 ]ct
[0 -6.02077 76.4861 0 324.593 236.888 ]ct
snap_to_device
<<
/T 1
/W 54 
/H 686 
/M[54 0 0 -686 0 686 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
Jj4iOJj5VelTTnaJj+cMJj."7_EEK6Jj"]KJj&B^R66'`JinWIaum3rJieQGJieQGo/i$pJi\KEJi]G`
juJ#RJiSECJiUh2b;b)5JiJ?AQoOCjJiA9?JiA9?_)K4hJi83=Ji83=l8G%fJi/-;Ji1\.\MSmpJi&'9
Ji*'UO>DJEJhr!7SMTC`Jhhp5Jhhp5`\P^lJh_j3Jh`WIlS*oEJhVd1JhY"p_CpKoJhM^/JhQCBR4a(D
JhDX-atC4VJh;R+Jh;R+o.?%TJh2L)Jh3HDjsu$6Jh)F'Jh+hkb:8)nJgu@%Qn%DNJgl:#Jgl:#_(!5L
Jgc4!Jgc4!l6r&JJgZ-tJg\\g\L)nTJgQ'rJgU(9O<oK)JgH!pSL*DDJg>pnJg>pn`[&_PJg5jlJg6X-
lQUp)Jg,djJg/#T_BFLSJg#^hJg'D&R37)(JfoXfarn5:JffRdJffRdo,j&8Jf]LbJf^I(jrK$oJfTF`
JfViOb8c*RJfK@^QlPE2JfB:\JfB:\_&L60Jf94ZJf94Zl5H'.Jf0.XJf0djmhgWnJf'(VJf+(rO;EKb
Jes"TSJUE(JeiqRJeiqR`YQ`4Je`kPJeaXflP+pbJeWeNJeZ$8_@qM7JeN_LJeRD_R1b)aJeEYJPS3Es
Je<SHJe<SHo+@&qJe3MFJe4Iajq!%SJe*GDJe,j3b79+6Je!ABQk&EkJdm;@Jdm;@_%"6iJdd5>Jdd5>
l3s'gJd[/<Jd[eNmg=XRJdR):JdV)VO9pLFJdI#8SI+EaJd?r6Jd?r6`X'`mJd6l4Jd7YJlNVqFJd-f2
Jd0$q_?GMpJd$`0Jd(ECR08*EJcpZ.PQ^FWJcgT,JcgT,o)k'UJc^N*Jc_JEjoL&7JcUH(JcWjlb5d+o
JcLB&JcMhOJ,~>

%%EndBinary
grestore
np
.5 lw
10 ml
401.079 293.569 mo
325.01 293.569 li
325.01 287.548 li
401.079 287.548 li
cp
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: FAAAAA+MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginGIBHKR+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/pi <1C60D8A8C9B790A816BA887E174A52F33D680F807B1119902FA9789F130B10B04DDBC0FD9DEC28CD7A548C8CB8F417ECBBBABC17EDA17E31BD4F48C40D7ACB5B657CA4BFA24392341750DA72EC3F62D1950BF08194384BB48BACFD6E1C0DFD44FD29> |-systemdict /gcheck known {setglobal} if end {end} ifendGIBHKR+MyriadPro-Regular /Encoding getdup 35 /pi putpop%ADOEndSubsetFont
/GIBHKR+MyriadPro-Regular*1 [32{/.notdef}rp /space /f_f /f_i /pi 4{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight /.notdef /colon 6{/.notdef}rp /A /B /C /D /E /F /G 5{/.notdef}rp /M /N /O /P /.notdef /R /S /T 3{/.notdef}rp /X 8{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v /.notdef /x 135{/.notdef}rp]GIBHKR+MyriadPro-Regular nfGIBHKR+MyriadPro-Regular*1 [8 0 0 -8 0 0 ]msf321.49 301.562 mo(0)sh398.242 300.282 mo(#)sh1 lw
451.566 309.438 mo
451.566 311.938 li
449.066 311.938 li
@
[5.004 5.004 ] 0 dsh
444.063 311.938 mo
266.415 311.938 li
@
[] 0 dsh
263.914 311.938 mo
261.414 311.938 li
261.414 309.438 li
@
[4.769 4.769 ] 0 dsh
261.414 304.668 mo
261.414 211.666 li
@
[] 0 dsh
261.414 209.282 mo
261.414 206.782 li
263.914 206.782 li
@
[5.004 5.004 ] 0 dsh
268.918 206.782 mo
446.565 206.782 li
@
[] 0 dsh
449.066 206.782 mo
451.566 206.782 li
451.566 209.282 li
@
[4.769 4.769 ] 0 dsh
451.566 214.051 mo
451.566 307.053 li
@
GIBHKR+MyriadPro-Regular*1 [8 0 0 -8 0 0 ]msf173.732 194.613 mo(Dichr)sh191.492 194.613 mo(oic)sh132.812 33.8287 mo(SMF)sh[] 0 dsh
173.862 60.4873 mo
172.056 60.4873 170.591 56.2503 170.591 51.0233 cv
170.591 45.7963 172.056 41.5583 173.862 41.5583 cv
175.669 41.5583 177.133 45.7963 177.133 51.0233 cv
177.133 56.2503 175.669 60.4873 173.862 60.4873 cv
cp
@
102.1 51.7509 mo
103.465 50.2877 li
129.783 50.2941 li
129.783 50.4907 li
129.739 50.4898 129.695 50.4887 129.651 50.4876 cv
129.651 50.4874 li
129.651 50.4876 li
129.651 50.4876 129.651 50.4876 129.651 50.4876 cv
129.625 51.4712 li
129.625 51.4872 li
129.678 51.4886 129.73 51.4898 129.783 51.4909 cv
129.783 51.605 li
102.1 51.7509 li
.4 0 0 0 cmyk
f
102.046 51.7512 mo
102.045 51.0229 li
101.151 51.0229 li
101.151 50.2871 li
103.465 50.2877 li
102.1 51.7509 li
102.046 51.7512 li
.398554 0 0 .337486 cmyk
f
101.151 51.7559 mo
101.151 51.0229 li
102.045 51.0229 li
102.046 51.7512 li
101.151 51.7559 li
.667805 0 .268574 .134287 cmyk
f
100.554 51.7591 mo
100.554 50.2869 li
101.151 50.2871 li
101.151 51.0229 li
101.151 51.7559 li
100.554 51.7591 li
.917647 .439216 0 0 cmyk
f
118.859 58.0151 mo
117.579 58.0151 116.541 55.0132 116.541 51.3082 cv
116.541 47.6042 117.579 44.6012 118.859 44.6012 cv
120.139 44.6012 121.177 47.6042 121.177 51.3082 cv
121.177 55.0132 120.139 58.0151 118.859 58.0151 cv
cp
0 0 0 1 cmyk
@
gsave
129.625 51.5041 mo
154.82 51.5041 li
154.82 39.576 li
129.625 39.576 li
129.625 51.5041 li
clp
154.092 51.4993 mo
151.645 51.4838 149.168 51.4336 146.696 50.9719 cv
145.48 50.7443 144.238 50.4074 143.058 49.8136 cv
142.98 49.8947 142.899 49.9727 142.814 50.0471 cv
142.001 50.7493 141.039 50.918 140.213 51.028 cv
139.095 51.1763 137.972 51.2507 136.848 51.2507 cv
136.847 51.2507 136.845 51.2507 136.844 51.2507 cv
136.839 51.2507 136.835 51.2507 136.83 51.2507 cv
136.459 51.2507 136.088 51.2423 135.718 51.2259 cv
135.718 51.2259 li
135.181 51.2021 134.597 51.1517 134.019 50.9675 cv
133.964 50.9499 133.908 50.931 133.853 50.9107 cv
132.658 51.3862 131.422 51.4954 130.23 51.4956 cv
130.08 51.4956 129.931 51.4939 129.783 51.4909 cv
129.783 50.4907 li
129.932 50.4939 130.081 50.4958 130.23 50.4958 cv
130.231 50.4958 130.232 50.4958 130.233 50.4958 cv
131.089 50.4958 131.925 50.4343 132.724 50.2283 cv
132.617 50.1294 132.514 50.0209 132.417 49.9021 cv
131.711 49.0359 131.415 47.8244 131.411 46.6417 cv
131.411 46.5487 131.413 46.456 131.417 46.3635 cv
131.471 45.1004 131.846 43.9185 132.328 42.879 cv
132.797 41.88 133.398 40.9004 134.312 40.3387 cv
134.699 40.1042 135.138 39.9739 135.583 39.9739 cv
135.587 39.9739 135.592 39.9739 135.597 39.9739 cv
136.229 39.9739 136.876 40.2605 137.321 40.8338 cv
137.956 41.6593 138.104 42.7738 138.121 43.7893 cv
138.121 43.9145 li
138.121 44.9073 137.99 45.9133 137.675 46.8406 cv
137.178 48.3029 136.261 49.432 135.191 50.1866 cv
135.379 50.2065 135.57 50.2188 135.761 50.2269 cv
135.762 50.2269 li
136.122 50.2429 136.483 50.2509 136.844 50.2509 cv
137.924 50.2507 139.005 50.1795 140.082 50.0368 cv
140.877 49.9332 141.594 49.7805 142.153 49.2965 cv
141.971 49.1788 141.791 49.0535 141.613 48.9202 cv
141.127 48.5556 140.584 48.058 140.301 47.2916 cv
140.117 46.7886 140.073 46.2634 140.073 45.7641 cv
140.073 45.6408 140.075 45.519 140.08 45.3992 cv
140.14 43.8965 140.462 42.3477 141.256 41.1569 cv
141.874 40.2403 142.799 39.5912 143.829 39.576 cv
143.882 39.576 li
144.179 39.58 144.48 39.6423 144.767 39.7686 cv
145.318 40.0097 145.825 40.5014 146.054 41.2058 cv
146.153 41.5101 146.191 41.8197 146.191 42.1222 cv
146.189 42.7993 146.006 43.448 145.824 44.0127 cv
145.406 45.2983 144.915 46.5413 144.358 47.7288 cv
144.155 48.1578 143.939 48.5963 143.68 49.0049 cv
144.695 49.4897 145.778 49.7828 146.88 49.9889 cv
149.242 50.4313 151.657 50.4843 154.092 50.4996 cv
154.092 51.4993 li
135.582 40.9737 mo
135.334 40.9737 135.071 41.0479 134.829 41.1942 cv
134.212 41.5603 133.659 42.3768 133.235 43.2999 cv
132.791 44.2563 132.462 45.3162 132.416 46.4056 cv
132.411 46.6417 li
132.407 47.6516 132.692 48.6736 133.189 49.2665 cv
133.389 49.5085 133.611 49.6849 133.856 49.8179 cv
135.067 49.2315 136.188 48.1112 136.728 46.5186 cv
137 45.7221 137.122 44.819 137.121 43.9145 cv
137.121 43.7992 li
137.118 42.8868 136.936 41.9453 136.534 41.4511 cv
136.263 41.1107 135.94 40.978 135.583 40.9737 cv
135.582 40.9737 135.582 40.9737 135.582 40.9737 cv
143.832 40.5755 mo
143.255 40.5755 142.565 40.9957 142.087 41.7137 cv
141.447 42.6611 141.129 44.0542 141.079 45.4374 cv
141.075 45.547 141.073 45.6562 141.073 45.7641 cv
141.072 46.2018 141.116 46.6157 141.239 46.9456 cv
141.423 47.4447 141.786 47.7992 142.214 48.1206 cv
142.406 48.2647 142.601 48.3984 142.8 48.5229 cv
143.035 48.1606 143.25 47.7398 143.453 47.3041 cv
143.992 46.1552 144.467 44.9503 144.873 43.7037 cv
145.046 43.1741 145.192 42.6115 145.191 42.1222 cv
145.191 41.9034 145.163 41.7002 145.103 41.5145 cv
144.969 41.0994 144.671 40.8188 144.365 40.6844 cv
144.194 40.6096 144.024 40.5758 143.848 40.5756 cv
143.843 40.5756 143.837 40.5755 143.832 40.5755 cv
.8 0 0 0 cmyk
f
154.815 51.5032 mo
154.574 51.502 154.333 51.5008 154.092 51.4993 cv
154.092 50.4996 li
154.334 50.5011 154.577 50.5023 154.82 50.5034 cv
154.82 50.5469 li
154.815 51.5032 li
.878431 0 0 0 cmyk
f
129.783 51.4909 mo
129.73 51.4898 129.678 51.4886 129.625 51.4872 cv
129.625 51.4712 li
129.651 50.4876 li
129.695 50.4887 129.739 50.4898 129.783 50.4907 cv
129.783 51.4909 li
129.651 50.4876 mo
129.651 50.4876 129.651 50.4876 129.651 50.4876 cv
129.651 50.4874 li
129.651 50.4876 li
f
grestore
213.686 196.194 mo
213.685 196.073 li
222.744 187.093 li
213.686 196.194 li
213.649 193.293 mo
213.419 175.434 li
224.454 175.434 li
224.569 182.468 li
213.649 193.293 li
224.421 173.434 mo
213.393 173.434 li
213.268 163.783 li
213.482 163.783 li
213.317 153.343 li
214.003 154.025 li
224.271 164.294 li
224.421 173.434 li
.690196 .586667 0 0 cmyk
f
224.454 175.434 mo
213.419 175.434 li
213.393 173.434 li
224.421 173.434 li
224.454 175.434 li
.690196 .588235 0 .160784 cmyk
f
213.685 196.073 mo
213.649 193.293 li
224.569 182.468 li
224.614 185.215 li
224.614 185.216 li
224.614 185.215 li
222.744 187.093 li
213.685 196.073 li
.690196 .586851 0 .110727 cmyk
f
213.686 196.194 mo
213.686 196.194 li
222.744 187.093 li
222.789 187.049 li
213.686 196.194 li
.828912 .704575 0 0 cmyk
f
222.744 187.093 mo
224.614 185.215 li
222.789 187.049 li
222.744 187.093 li
.829342 .705329 0 .0232526 cmyk
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: FAAAAA+MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginGIBHKR+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/nine <1C60D8A8C9B7BA8F63126F4A1F6F4C8A6D297D6FEEB3E1EA33A18C32A839F51A85CD7DE6BC7BE0FC5E14C273DEF590B88E507C7A736EF2A90ACB7B8F9A190B2C51A24432873D103FAFC9B3793333CCD91BFB26AA2EDD101FDCA101247D729F8EA9F184BC3D2FD9C99ABDCAACABC5E792EC3D0438CFE5E32E78D626F92C945E9BEC772CDF50F38A2D46A5A6239FBE> |-systemdict /gcheck known {setglobal} if end {end} ifendGIBHKR+MyriadPro-Regular /Encoding getdup 57 /nine putpop%ADOEndSubsetFont
/GIBHKR+MyriadPro-Regular*1 [32{/.notdef}rp /space /f_f /f_i /pi 4{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight /nine /colon 6{/.notdef}rp /A /B /C /D /E /F /G 5{/.notdef}rp /M /N /O /P /.notdef /R /S /T 3{/.notdef}rp /X 8{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v /.notdef /x 135{/.notdef}rp]GIBHKR+MyriadPro-Regular nfGIBHKR+MyriadPro-Regular*1 [8 0 0 -8 0 0 ]msf136.102 128.471 mo(MMF)sh136.102 138.071 mo(\(900 um\))shgsave
0 0 mo
595.276 0 li
595.276 841.89 li
0 841.89 li
0 0 li
clp
122.814 171.695 mo
122.814 172.195 li
122.34 172.196 121.885 172.034 121.483 171.763 cv
120.878 171.355 120.368 170.712 119.914 169.891 cv
119.462 169.069 119.07 168.062 118.743 166.907 cv
118.074 164.539 117.678 161.544 117.678 158.281 cv
117.678 155.598 117.946 153.095 118.413 150.974 cv
118.882 148.851 119.542 147.113 120.373 145.933 cv
120.706 145.464 121.068 145.081 121.474 144.806 cv
121.878 144.531 122.336 144.367 122.814 144.368 cv
123.615 144.369 124.322 144.813 124.904 145.486 cv
125.491 146.164 125.991 147.095 126.419 148.231 cv
127.368 150.763 127.947 154.324 127.948 158.281 cv
127.948 160.906 127.692 163.358 127.243 165.449 cv
126.793 167.542 126.159 169.271 125.362 170.472 cv
125.018 170.987 124.642 171.408 124.219 171.711 cv
123.798 172.013 123.318 172.196 122.814 172.195 cv
122.814 171.695 li
122.814 171.195 li
123.078 171.194 123.345 171.105 123.638 170.897 cv
123.929 170.69 124.235 170.361 124.529 169.918 cv
125.219 168.886 125.836 167.25 126.266 165.24 cv
126.697 163.228 126.949 160.84 126.948 158.281 cv
126.95 154.425 126.375 150.953 125.482 148.583 cv
125.085 147.521 124.621 146.684 124.149 146.141 cv
123.671 145.594 123.222 145.367 122.814 145.368 cv
122.562 145.369 122.311 145.448 122.035 145.634 cv
121.76 145.819 121.471 146.113 121.189 146.511 cv
120.479 147.51 119.836 149.151 119.39 151.189 cv
118.94 153.228 118.677 155.665 118.677 158.281 cv
118.677 161.462 119.067 164.379 119.706 166.635 cv
120.119 168.101 120.642 169.287 121.202 170.07 cv
121.481 170.462 121.768 170.751 122.04 170.933 cv
122.314 171.116 122.564 171.194 122.814 171.195 cv
122.814 171.695 li
f
128.61 163.659 mo
127.567 163.659 li
127.813 162.006 127.948 160.189 127.948 158.281 cv
127.948 156.373 127.813 154.557 127.567 152.904 cv
129.11 152.904 li
129.11 159.775 li
128.61 159.775 li
128.61 163.659 li
126.555 163.659 mo
119.071 163.659 li
118.819 162.02 118.677 160.198 118.677 158.281 cv
118.677 156.364 118.819 154.543 119.071 152.904 cv
126.555 152.904 li
126.807 154.543 126.949 156.365 126.948 158.281 cv
126.949 160.198 126.807 162.02 126.555 163.659 cv
118.06 163.659 mo
93.445 163.659 li
93.445 152.904 li
118.059 152.904 li
117.813 154.557 117.678 156.373 117.678 158.281 cv
117.678 160.189 117.813 162.006 118.06 163.659 cv
91.4449 163.659 mo
84.7881 163.659 li
84.7881 152.904 li
91.4449 152.904 li
91.4449 163.659 li
.690196 .586667 0 0 cmyk
f
93.445 163.659 mo
91.4449 163.659 li
91.4449 152.904 li
93.445 152.904 li
93.445 163.659 li
.690196 .588235 0 .160784 cmyk
f
127.567 163.659 mo
126.555 163.659 li
126.807 162.02 126.949 160.198 126.948 158.281 cv
126.949 156.365 126.807 154.543 126.555 152.904 cv
127.567 152.904 li
127.813 154.557 127.948 156.373 127.948 158.281 cv
127.948 160.189 127.813 162.006 127.567 163.659 cv
119.071 163.659 mo
118.06 163.659 li
117.813 162.006 117.678 160.189 117.678 158.281 cv
117.678 156.373 117.813 154.557 118.059 152.904 cv
119.071 152.904 li
118.819 154.543 118.677 156.364 118.677 158.281 cv
118.677 160.198 118.819 162.02 119.071 163.659 cv
.690196 .588235 0 .2 cmyk
f
[12 12 ] 0 dsh
122.813 101.664 mo
5.496 101.664 li
5.496 23.053 li
122.813 23.053 li
cp
.49 .44 .42 .06 cmyk
@
grestore
%ADOBeginSubsetFont: FAAAAA+MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginGIBHKR+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/L <1C60D8A8C9B74383E5F6C6CDF9C5C9B87417EDC75203EAC0F1F9428D2177D6066C95DE> |-systemdict /gcheck known {setglobal} if end {end} ifendGIBHKR+MyriadPro-Regular /Encoding getdup 76 /L putpop%ADOEndSubsetFont
/GIBHKR+MyriadPro-Regular*1 [32{/.notdef}rp /space /f_f /f_i /pi 4{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight /nine /colon 6{/.notdef}rp /A /B /C /D /E /F /G 4{/.notdef}rp /L /M /N /O /P /.notdef /R /S /T 3{/.notdef}rp /X 8{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v /.notdef /x 135{/.notdef}rp]GIBHKR+MyriadPro-Regular nfGIBHKR+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf9.0728 16.2508 mo(Ligh)sh30.8647 16.2508 mo(t G)sh45.1926 16.2508 mo(ener)sh67.7407 16.2508 mo(ation Module)[5.73593 3.97192 2.80792 6.58795 6.65991 2.54407 9.72001 6.58795 6.76794 6.61194 2.83192 0 ]xshgsave
0 0 mo
595.276 0 li
595.276 841.89 li
0 841.89 li
0 0 li
clp
105.11 227.001 mo
93.1101 227.001 li
93.1101 226.001 li
105.11 226.001 li
105.11 227.001 li
81.1099 227.001 mo
69.11 227.001 li
69.11 226.001 li
81.1099 226.001 li
81.1099 227.001 li
57.11 227.001 mo
45.1101 227.001 li
45.1101 226.001 li
57.11 226.001 li
57.11 227.001 li
33.1099 227.001 mo
21.11 227.001 li
21.11 226.001 li
33.1099 226.001 li
33.1099 227.001 li
9.11003 227.001 mo
5.16506 227.001 li
5.16506 217.946 li
6.1651 217.946 li
6.1651 226.001 li
9.11003 226.001 li
9.11003 227.001 li
9.11003 227.001 li
5.16506 205.946 mo
5.16506 193.946 li
6.1651 193.946 li
6.1651 205.946 li
5.16506 205.946 li
5.16506 181.946 mo
5.16506 169.946 li
6.1651 169.946 li
6.1651 181.946 li
5.16506 181.946 li
5.16506 157.946 mo
5.16506 145.946 li
6.1651 145.946 li
6.1651 157.946 li
5.16506 157.946 li
8.30198 136.083 mo
20.3019 136.083 li
20.3019 137.083 li
8.30198 137.083 li
8.30198 136.083 li
32.3019 136.083 mo
44.302 136.083 li
44.302 137.083 li
32.3019 137.083 li
32.3019 136.083 li
56.302 136.083 mo
68.3019 136.083 li
68.3019 137.083 li
56.302 137.083 li
56.302 136.083 li
80.3019 136.083 mo
92.3018 136.083 li
92.3018 137.083 li
80.3019 137.083 li
80.3019 136.083 li
104.302 136.083 mo
116.302 136.083 li
116.302 137.083 li
104.302 137.083 li
104.302 136.083 li
128.302 136.083 mo
129.11 136.083 li
129.61 136.083 li
129.61 147.775 li
128.61 147.775 li
128.61 137.083 li
128.302 137.083 li
128.302 136.083 li
129.61 159.775 mo
129.61 171.775 li
128.61 171.775 li
128.61 159.775 li
129.61 159.775 li
129.61 183.775 mo
129.61 195.775 li
128.61 195.775 li
128.61 183.775 li
129.61 183.775 li
129.61 207.775 mo
129.61 219.775 li
128.61 219.775 li
128.61 207.775 li
129.61 207.775 li
129.11 227.001 mo
117.11 227.001 li
117.11 226.001 li
129.11 226.001 li
129.11 227.001 li
.49 .44 .42 .06 cmyk
f
grestore
0 0 0 1 cmyk
GIBHKR+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf9.0728 128.47 mo(Ligh)sh30.8647 128.47 mo(t C)sh44.2087 128.47 mo(ollec)sh68.0045 128.47 mo(tion M)sh100.295 128.47 mo(odule)sh452.29 341.529 mo
440.29 341.529 li
440.29 340.529 li
452.29 340.529 li
452.29 341.529 li
428.29 341.529 mo
416.29 341.529 li
416.29 340.529 li
428.29 340.529 li
428.29 341.529 li
404.29 341.529 mo
392.29 341.529 li
392.29 340.529 li
404.29 340.529 li
404.29 341.529 li
380.29 341.529 mo
368.29 341.529 li
368.29 340.529 li
380.29 340.529 li
380.29 341.529 li
356.29 341.529 mo
344.29 341.529 li
344.29 340.529 li
356.29 340.529 li
356.29 341.529 li
332.29 341.529 mo
320.29 341.529 li
320.29 340.529 li
332.29 340.529 li
332.29 341.529 li
308.29 341.529 mo
296.29 341.529 li
296.29 340.529 li
308.29 340.529 li
308.29 341.529 li
284.29 341.529 mo
272.29 341.529 li
272.29 340.529 li
284.29 340.529 li
284.29 341.529 li
260.29 341.529 mo
248.29 341.529 li
248.29 340.529 li
260.29 340.529 li
260.29 341.529 li
236.29 341.529 mo
224.29 341.529 li
224.29 340.529 li
236.29 340.529 li
236.29 341.529 li
212.29 341.529 mo
200.29 341.529 li
200.29 340.529 li
212.29 340.529 li
212.29 341.529 li
188.29 341.529 mo
176.29 341.529 li
176.29 340.529 li
188.29 340.529 li
188.29 341.529 li
168.221 336.598 mo
168.221 324.598 li
169.221 324.598 li
169.221 336.598 li
168.221 336.598 li
168.221 312.598 mo
168.221 300.598 li
169.221 300.598 li
169.221 312.598 li
168.221 312.598 li
168.221 288.598 mo
168.221 276.598 li
169.221 276.598 li
169.221 288.598 li
168.221 288.598 li
168.221 264.598 mo
168.221 252.598 li
169.221 252.598 li
169.221 264.598 li
168.221 264.598 li
168.221 240.598 mo
168.221 228.598 li
169.221 228.598 li
169.221 240.598 li
168.221 240.598 li
168.221 216.598 mo
168.221 204.598 li
169.221 204.598 li
169.221 216.598 li
168.221 216.598 li
168.221 192.598 mo
168.221 180.598 li
169.221 180.598 li
169.221 192.598 li
168.221 192.598 li
168.221 168.598 mo
168.221 156.598 li
169.221 156.598 li
169.221 168.598 li
168.221 168.598 li
168.221 144.598 mo
168.221 132.598 li
169.221 132.598 li
169.221 144.598 li
168.221 144.598 li
168.221 120.598 mo
168.221 108.598 li
169.221 108.598 li
169.221 120.598 li
168.221 120.598 li
168.221 96.5984 mo
168.221 84.5984 li
169.221 84.5984 li
169.221 96.5984 li
168.221 96.5984 li
168.221 72.5982 mo
168.221 60.5983 li
169.221 60.5983 li
169.221 72.5982 li
168.221 72.5982 li
168.221 48.5984 mo
168.221 36.5984 li
169.221 36.5984 li
169.221 48.5984 li
168.221 48.5984 li
168.221 24.5985 mo
168.221 22.553 li
179.176 22.553 li
179.176 23.5529 li
169.221 23.5529 li
169.221 24.5985 li
168.221 24.5985 li
191.176 22.553 mo
203.176 22.553 li
203.176 23.5529 li
191.176 23.5529 li
191.176 22.553 li
215.176 22.553 mo
227.176 22.553 li
227.176 23.5529 li
215.176 23.5529 li
215.176 22.553 li
239.176 22.553 mo
251.176 22.553 li
251.176 23.5529 li
239.176 23.5529 li
239.176 22.553 li
263.176 22.553 mo
275.176 22.553 li
275.176 23.5529 li
263.176 23.5529 li
263.176 22.553 li
287.176 22.553 mo
299.176 22.553 li
299.176 23.5529 li
287.176 23.5529 li
287.176 22.553 li
311.176 22.553 mo
323.176 22.553 li
323.176 23.5529 li
311.176 23.5529 li
311.176 22.553 li
335.176 22.553 mo
347.176 22.553 li
347.176 23.5529 li
335.176 23.5529 li
335.176 22.553 li
359.175 22.553 mo
371.176 22.553 li
371.176 23.5529 li
359.175 23.5529 li
359.175 22.553 li
383.176 22.553 mo
395.176 22.553 li
395.176 23.5529 li
383.176 23.5529 li
383.176 22.553 li
407.175 22.553 mo
419.175 22.553 li
419.175 23.5529 li
407.175 23.5529 li
407.175 22.553 li
431.175 22.553 mo
443.176 22.553 li
443.176 23.5529 li
431.175 23.5529 li
431.175 22.553 li
455.175 22.553 mo
467.175 22.553 li
467.175 23.5529 li
455.175 23.5529 li
455.175 22.553 li
476.79 25.9385 mo
476.79 37.9384 li
475.79 37.9384 li
475.79 25.9385 li
476.79 25.9385 li
476.79 49.9384 mo
476.79 61.9385 li
475.79 61.9385 li
475.79 49.9384 li
476.79 49.9384 li
476.79 73.9385 mo
476.79 85.9384 li
475.79 85.9384 li
475.79 73.9385 li
476.79 73.9385 li
476.79 97.9384 mo
476.79 109.938 li
475.79 109.938 li
475.79 97.9384 li
476.79 97.9384 li
476.79 121.938 mo
476.79 133.938 li
475.79 133.938 li
475.79 121.938 li
476.79 121.938 li
476.79 145.938 mo
476.79 157.938 li
475.79 157.938 li
475.79 145.938 li
476.79 145.938 li
476.79 169.938 mo
476.79 181.938 li
475.79 181.938 li
475.79 169.938 li
476.79 169.938 li
476.79 193.938 mo
476.79 205.938 li
475.79 205.938 li
475.79 193.938 li
476.79 193.938 li
476.79 217.938 mo
476.79 229.938 li
475.79 229.938 li
475.79 217.938 li
476.79 217.938 li
476.79 241.938 mo
476.79 253.938 li
475.79 253.938 li
475.79 241.938 li
476.79 241.938 li
476.79 265.938 mo
476.79 277.938 li
475.79 277.938 li
475.79 265.938 li
476.79 265.938 li
476.79 289.938 mo
476.79 301.938 li
475.79 301.938 li
475.79 289.938 li
476.79 289.938 li
476.79 313.938 mo
476.79 325.938 li
475.79 325.938 li
475.79 313.938 li
476.79 313.938 li
476.79 337.938 mo
476.79 341.529 li
464.29 341.529 li
464.29 340.529 li
475.79 340.529 li
475.79 337.938 li
476.79 337.938 li
.49 .44 .42 .06 cmyk
f
gsave
205.777 168.498 mo
229.89 168.498 li
229.89 144.385 li
205.777 144.385 li
205.777 168.498 li
clp
228.476 168.498 mo
228.475 168.498 li
224.271 164.294 li
224.27 164.244 li
214.003 154.025 li
213.317 153.34 li
213.308 152.78 li
212.757 152.78 li
205.777 145.799 li
205.777 145.799 li
207.191 144.385 li
229.89 167.084 li
228.476 168.498 li
0 0 0 .558431 cmyk
f
224.271 164.294 mo
214.003 154.025 li
224.27 164.244 li
224.271 164.294 li
.210381 .177163 0 .557324 cmyk
f
grestore
213.268 163.783 mo
176.917 163.783 li
176.778 152.78 li
212.757 152.78 li
213.317 153.34 li
213.317 153.343 li
213.131 153.158 li
213.268 163.783 li
.690196 .586667 0 0 cmyk
f
213.482 163.783 mo
213.268 163.783 li
213.131 153.158 li
213.317 153.343 li
213.482 163.783 li
.828912 .704575 0 0 cmyk
f
213.317 153.34 mo
212.757 152.78 li
213.308 152.78 li
213.317 153.34 li
.690196 .586851 0 .110727 cmyk
f
gsave
130.035 159.612 mo
173.735 159.612 li
173.735 142.246 li
130.035 142.246 li
130.035 159.612 li
clp
173.73 159.611 mo
172.231 159.605 170.727 159.599 169.221 159.568 cv
169.221 158.568 li
170.723 158.599 172.228 158.605 173.734 158.611 cv
173.73 159.611 li
131.07 159.599 mo
130.724 159.599 130.379 159.594 130.035 159.587 cv
130.058 158.587 li
130.395 158.595 130.733 158.599 131.07 158.599 cv
131.074 158.599 131.077 158.599 131.081 158.599 cv
132.772 158.599 134.447 158.482 136.044 158.058 cv
135.737 157.855 135.444 157.614 135.175 157.331 cv
134.014 156.107 133.494 154.321 133.491 152.58 cv
133.491 152.443 133.494 152.306 133.501 152.17 cv
133.593 150.307 134.235 148.561 135.061 147.022 cv
135.859 145.542 136.9 144.113 138.374 143.337 cv
138.99 143.016 139.675 142.843 140.36 142.843 cv
140.363 142.843 140.366 142.843 140.369 142.843 cv
141.347 142.843 142.339 143.209 143.063 144.007 cv
144.099 145.16 144.372 146.809 144.397 148.308 cv
144.399 148.493 li
144.398 149.966 144.171 151.457 143.636 152.819 cv
142.696 155.2 140.893 156.959 138.855 158.037 cv
139.44 158.133 140.049 158.175 140.651 158.197 cv
141.281 158.221 141.911 158.233 142.541 158.233 cv
144.438 158.233 146.335 158.125 148.224 157.91 cv
149.619 157.753 150.974 157.512 152.039 156.713 cv
152.12 156.652 152.2 156.588 152.278 156.521 cv
151.87 156.304 151.467 156.068 151.072 155.812 cv
150.253 155.279 149.369 154.583 148.901 153.49 cv
148.595 152.772 148.519 152.002 148.518 151.265 cv
148.518 151.083 148.523 150.902 148.531 150.725 cv
148.63 148.497 149.195 146.2 150.53 144.475 cv
151.563 143.15 153.084 142.262 154.671 142.246 cv
154.745 142.246 li
155.207 142.251 155.673 142.333 156.122 142.503 cv
156.978 142.829 157.793 143.495 158.17 144.494 cv
158.333 144.926 158.398 145.372 158.398 145.812 cv
158.395 146.794 158.086 147.748 157.771 148.587 cv
157.048 150.504 156.202 152.359 155.24 154.129 cv
154.853 154.837 154.435 155.558 153.932 156.208 cv
155.822 157.027 157.844 157.506 159.88 157.834 cv
162.635 158.279 165.421 158.463 168.221 158.543 cv
168.221 159.544 li
165.386 159.464 162.547 159.278 159.721 158.822 cv
157.535 158.468 155.323 157.942 153.239 156.994 cv
153.05 157.179 152.851 157.353 152.638 157.513 cv
151.316 158.498 149.759 158.739 148.337 158.904 cv
146.411 159.123 144.476 159.233 142.541 159.233 cv
141.898 159.233 141.256 159.221 140.613 159.197 cv
139.696 159.162 138.721 159.086 137.778 158.826 cv
137.637 158.787 137.496 158.744 137.356 158.696 cv
135.305 159.43 133.166 159.599 131.07 159.599 cv
140.359 143.843 mo
139.843 143.843 139.311 143.975 138.837 144.223 cv
137.652 144.837 136.69 146.096 135.942 147.495 cv
135.162 148.947 134.58 150.557 134.5 152.218 cv
134.494 152.338 134.491 152.459 134.491 152.58 cv
134.488 154.123 134.975 155.681 135.898 156.641 cv
136.323 157.086 136.815 157.401 137.358 157.627 cv
139.626 156.733 141.718 154.962 142.705 152.453 cv
143.185 151.235 143.399 149.863 143.399 148.493 cv
143.397 148.321 li
143.385 146.935 143.088 145.506 142.323 144.679 cv
141.802 144.107 141.104 143.845 140.36 143.843 cv
140.36 143.843 140.359 143.843 140.359 143.843 cv
154.689 143.246 mo
153.483 143.246 152.193 143.96 151.319 145.089 cv
150.166 146.568 149.619 148.677 149.53 150.769 cv
149.523 150.935 149.518 151.101 149.518 151.265 cv
149.517 151.931 149.593 152.57 149.82 153.097 cv
150.159 153.899 150.852 154.479 151.617 154.974 cv
152.067 155.266 152.529 155.531 153.002 155.771 cv
153.507 155.153 153.948 154.414 154.361 153.651 cv
155.301 151.923 156.129 150.11 156.835 148.234 cv
157.139 147.435 157.4 146.576 157.398 145.812 cv
157.397 145.469 157.348 145.147 157.234 144.846 cv
156.982 144.169 156.403 143.679 155.768 143.438 cv
155.421 143.307 155.064 143.246 154.701 143.246 cv
154.697 143.246 154.693 143.246 154.689 143.246 cv
.8 0 0 0 cmyk
f
169.221 159.568 mo
168.888 159.561 168.554 159.553 168.221 159.544 cv
168.221 158.543 li
168.554 158.553 168.888 158.561 169.221 158.568 cv
169.221 159.568 li
.898039 .0862745 .0823529 .0117647 cmyk
f
grestore
173.732 167.746 mo
171.926 167.746 170.461 163.509 170.461 158.282 cv
170.461 153.055 171.926 148.817 173.732 148.817 cv
175.539 148.817 177.003 153.055 177.003 158.282 cv
177.003 163.509 175.539 167.746 173.732 167.746 cv
cp
0 0 0 1 cmyk
@
GIBHKR+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf254.595 16.2508 mo(Light Modulation Module)[5.66402 2.80792 6.70807 6.61191 3.97192 2.54407 9.72119 6.58795 6.76794 6.61194 2.83191 5.73593 3.97192 2.80792 6.58795 6.65991 2.54407 9.71881 6.58795 6.76794 6.61194 2.83191 0 ]xshgrestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 /2 ]]
] del_res
/GIBHKR+MyriadPro-Regular*1 uf/GIBHKR+MyriadPro-Regular uf/FAAAAA+MyriadPro-Regular ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
